
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

00200000 <_vectors>:
  200000:	20000400 	.word	0x20000400
  200004:	002002d9 	.word	0x002002d9
  200008:	002002db 	.word	0x002002db
  20000c:	002002da 	.word	0x002002da
  200010:	002002da 	.word	0x002002da
  200014:	002002da 	.word	0x002002da
  200018:	002002da 	.word	0x002002da
  20001c:	002002da 	.word	0x002002da
  200020:	002002da 	.word	0x002002da
  200024:	002002da 	.word	0x002002da
  200028:	002002da 	.word	0x002002da
  20002c:	00200f81 	.word	0x00200f81
  200030:	002002da 	.word	0x002002da
  200034:	002002da 	.word	0x002002da
  200038:	002002da 	.word	0x002002da
  20003c:	002002da 	.word	0x002002da
  200040:	002002da 	.word	0x002002da
  200044:	002002da 	.word	0x002002da
  200048:	002002da 	.word	0x002002da
  20004c:	002002da 	.word	0x002002da
  200050:	002002da 	.word	0x002002da
  200054:	002002da 	.word	0x002002da
  200058:	00203841 	.word	0x00203841
  20005c:	002037f1 	.word	0x002037f1
  200060:	002037a1 	.word	0x002037a1
  200064:	00203751 	.word	0x00203751
  200068:	00203701 	.word	0x00203701
  20006c:	00203441 	.word	0x00203441
  200070:	00203411 	.word	0x00203411
  200074:	002033e1 	.word	0x002033e1
  200078:	002033b1 	.word	0x002033b1
  20007c:	00203381 	.word	0x00203381
  200080:	00203351 	.word	0x00203351
  200084:	00203321 	.word	0x00203321
  200088:	00203471 	.word	0x00203471
  20008c:	002002da 	.word	0x002002da
  200090:	002002da 	.word	0x002002da
  200094:	002002da 	.word	0x002002da
  200098:	002002da 	.word	0x002002da
  20009c:	00203611 	.word	0x00203611
  2000a0:	002002da 	.word	0x002002da
  2000a4:	002002da 	.word	0x002002da
  2000a8:	002002da 	.word	0x002002da
  2000ac:	002002da 	.word	0x002002da
  2000b0:	00201e51 	.word	0x00201e51
  2000b4:	002002da 	.word	0x002002da
  2000b8:	00201e11 	.word	0x00201e11
  2000bc:	002002da 	.word	0x002002da
  2000c0:	002002da 	.word	0x002002da
  2000c4:	002002da 	.word	0x002002da
  2000c8:	002002da 	.word	0x002002da
  2000cc:	002002da 	.word	0x002002da
  2000d0:	002002da 	.word	0x002002da
  2000d4:	002002da 	.word	0x002002da
  2000d8:	002002da 	.word	0x002002da
  2000dc:	002002da 	.word	0x002002da
  2000e0:	002034f1 	.word	0x002034f1
  2000e4:	002002da 	.word	0x002002da
  2000e8:	002002da 	.word	0x002002da
  2000ec:	002002da 	.word	0x002002da
  2000f0:	002002da 	.word	0x002002da
  2000f4:	002002da 	.word	0x002002da
  2000f8:	002002da 	.word	0x002002da
  2000fc:	002032f1 	.word	0x002032f1
  200100:	002002da 	.word	0x002002da
  200104:	002002da 	.word	0x002002da
  200108:	002002da 	.word	0x002002da
  20010c:	002002da 	.word	0x002002da
  200110:	002002da 	.word	0x002002da
  200114:	002002da 	.word	0x002002da
  200118:	00201dd1 	.word	0x00201dd1
  20011c:	002002da 	.word	0x002002da
  200120:	002032c1 	.word	0x002032c1
  200124:	00203291 	.word	0x00203291
  200128:	00203261 	.word	0x00203261
  20012c:	00203231 	.word	0x00203231
  200130:	00203201 	.word	0x00203201
  200134:	002002da 	.word	0x002002da
  200138:	002002da 	.word	0x002002da
  20013c:	002002da 	.word	0x002002da
  200140:	002002da 	.word	0x002002da
  200144:	002002da 	.word	0x002002da
  200148:	002002da 	.word	0x002002da
  20014c:	00202031 	.word	0x00202031
  200150:	002031d1 	.word	0x002031d1
  200154:	00202471 	.word	0x00202471
  200158:	00202441 	.word	0x00202441
  20015c:	002002da 	.word	0x002002da
  200160:	002002da 	.word	0x002002da
  200164:	002002da 	.word	0x002002da
  200168:	002002da 	.word	0x002002da
  20016c:	002002da 	.word	0x002002da
  200170:	002002da 	.word	0x002002da
  200174:	002002da 	.word	0x002002da
  200178:	002002da 	.word	0x002002da
  20017c:	002002da 	.word	0x002002da
  200180:	002002da 	.word	0x002002da
  200184:	002002da 	.word	0x002002da
  200188:	002002da 	.word	0x002002da
  20018c:	002002da 	.word	0x002002da
  200190:	002002da 	.word	0x002002da
  200194:	002002da 	.word	0x002002da
  200198:	002002da 	.word	0x002002da
  20019c:	002002da 	.word	0x002002da
  2001a0:	002002da 	.word	0x002002da
  2001a4:	002002da 	.word	0x002002da
  2001a8:	002002da 	.word	0x002002da
  2001ac:	002002da 	.word	0x002002da
  2001b0:	002002da 	.word	0x002002da
  2001b4:	002002da 	.word	0x002002da
  2001b8:	002002da 	.word	0x002002da
  2001bc:	002002da 	.word	0x002002da
  2001c0:	002002da 	.word	0x002002da
  2001c4:	002002da 	.word	0x002002da
  2001c8:	002002da 	.word	0x002002da
  2001cc:	002002da 	.word	0x002002da
  2001d0:	002002da 	.word	0x002002da
  2001d4:	002002da 	.word	0x002002da
  2001d8:	002002da 	.word	0x002002da
  2001dc:	002002da 	.word	0x002002da
  2001e0:	002002da 	.word	0x002002da
  2001e4:	002002da 	.word	0x002002da
  2001e8:	002002da 	.word	0x002002da
  2001ec:	002002da 	.word	0x002002da
  2001f0:	002002da 	.word	0x002002da
  2001f4:	002002da 	.word	0x002002da
  2001f8:	002002da 	.word	0x002002da
  2001fc:	002002da 	.word	0x002002da

Disassembly of section .text:

00200200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
  200200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
  200202:	4827      	ldr	r0, [pc, #156]	; (2002a0 <endfiniloop+0x4>)
                msr     MSP, r0
  200204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
  200208:	4826      	ldr	r0, [pc, #152]	; (2002a4 <endfiniloop+0x8>)
                msr     PSP, r0
  20020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
  20020e:	4826      	ldr	r0, [pc, #152]	; (2002a8 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
  200210:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
  200214:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
  200218:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
  20021a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
  20021c:	f380 8814 	msr	CONTROL, r0
                isb
  200220:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
  200224:	f001 f944 	bl	2014b0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
  200228:	f001 fc72 	bl	201b10 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
  20022c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
  200230:	491e      	ldr	r1, [pc, #120]	; (2002ac <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
  200232:	4a1b      	ldr	r2, [pc, #108]	; (2002a0 <endfiniloop+0x4>)

00200234 <msloop>:
msloop:
                cmp     r1, r2
  200234:	4291      	cmp	r1, r2
                itt     lo
  200236:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200238:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
  20023c:	e7fa      	bcc.n	200234 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
  20023e:	491c      	ldr	r1, [pc, #112]	; (2002b0 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
  200240:	4a18      	ldr	r2, [pc, #96]	; (2002a4 <endfiniloop+0x8>)

00200242 <psloop>:
psloop:
                cmp     r1, r2
  200242:	4291      	cmp	r1, r2
                itt     lo
  200244:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200246:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
  20024a:	e7fa      	bcc.n	200242 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
  20024c:	4919      	ldr	r1, [pc, #100]	; (2002b4 <endfiniloop+0x18>)
                ldr     r2, =_data_start
  20024e:	4a1a      	ldr	r2, [pc, #104]	; (2002b8 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
  200250:	4b1a      	ldr	r3, [pc, #104]	; (2002bc <endfiniloop+0x20>)

00200252 <dloop>:
dloop:
                cmp     r2, r3
  200252:	429a      	cmp	r2, r3
                ittt    lo
  200254:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
  200256:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
  20025a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
  20025e:	e7f8      	bcc.n	200252 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
  200260:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
  200262:	4917      	ldr	r1, [pc, #92]	; (2002c0 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
  200264:	4a17      	ldr	r2, [pc, #92]	; (2002c4 <endfiniloop+0x28>)

00200266 <bloop>:
bloop:
                cmp     r1, r2
  200266:	4291      	cmp	r1, r2
                itt     lo
  200268:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  20026a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
  20026e:	e7fa      	bcc.n	200266 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
  200270:	f001 f8de 	bl	201430 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
  200274:	f001 f914 	bl	2014a0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
  200278:	4c13      	ldr	r4, [pc, #76]	; (2002c8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
  20027a:	4d14      	ldr	r5, [pc, #80]	; (2002cc <endfiniloop+0x30>)

0020027c <initloop>:
initloop:
                cmp     r4, r5
  20027c:	42ac      	cmp	r4, r5
                bge     endinitloop
  20027e:	da03      	bge.n	200288 <endinitloop>
                ldr     r1, [r4], #4
  200280:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  200284:	4788      	blx	r1
                b       initloop
  200286:	e7f9      	b.n	20027c <initloop>

00200288 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
  200288:	f002 f922 	bl	2024d0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
  20028c:	4c10      	ldr	r4, [pc, #64]	; (2002d0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
  20028e:	4d11      	ldr	r5, [pc, #68]	; (2002d4 <endfiniloop+0x38>)

00200290 <finiloop>:
finiloop:
                cmp     r4, r5
  200290:	42ac      	cmp	r4, r5
                bge     endfiniloop
  200292:	da03      	bge.n	20029c <endfiniloop>
                ldr     r1, [r4], #4
  200294:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  200298:	4788      	blx	r1
                b       finiloop
  20029a:	e7f9      	b.n	200290 <finiloop>

0020029c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
  20029c:	f001 b8f8 	b.w	201490 <__default_exit>
                ldr     r0, =__main_stack_end__
  2002a0:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
  2002a4:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
  2002a8:	00200000 	.word	0x00200000
                ldr     r1, =__main_stack_base__
  2002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
  2002b0:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
  2002b4:	08003eb4 	.word	0x08003eb4
                ldr     r2, =_data_start
  2002b8:	20020000 	.word	0x20020000
                ldr     r3, =_data_end
  2002bc:	20020008 	.word	0x20020008
                ldr     r1, =_bss_start
  2002c0:	20000800 	.word	0x20000800
                ldr     r2, =_bss_end
  2002c4:	200012c0 	.word	0x200012c0
                ldr     r4, =__init_array_start
  2002c8:	00200200 	.word	0x00200200
                ldr     r5, =__init_array_end
  2002cc:	00200200 	.word	0x00200200
                ldr     r4, =__fini_array_start
  2002d0:	00200200 	.word	0x00200200
                ldr     r5, =__fini_array_end
  2002d4:	00200200 	.word	0x00200200

002002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
  2002d8:	e792      	b.n	200200 <_crt0_entry>

002002da <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
         b          _unhandled_exception
  2002da:	e7ff      	b.n	2002dc <_unhandled_exception>

002002dc <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
  2002dc:	e7fe      	b.n	2002dc <_unhandled_exception>
  2002de:	46c0      	nop			; (mov r8, r8)

002002e0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
  2002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
  2002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
                mov     sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
  2002e8:	f8d0 d00c 	ldr.w	sp, [r0, #12]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  2002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002f0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
  2002f0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
  2002f2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
  2002f6:	4628      	mov	r0, r5
                blx     r4
  2002f8:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
  2002fa:	2000      	movs	r0, #0
                bl      chThdExit
  2002fc:	f000 ffa0 	bl	201240 <chThdExit>

00200300 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
  200300:	f000 fe86 	bl	201010 <chSchDoReschedule>

00200304 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
  200304:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
  200306:	e7fe      	b.n	200306 <_port_exit_from_isr+0x2>
	...

00200310 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
  200310:	4770      	bx	lr
  200312:	bf00      	nop
	...

00200320 <sduRequestsHook>:
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
  200320:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
  200324:	f003 0360 	and.w	r3, r3, #96	; 0x60
  200328:	2b20      	cmp	r3, #32
  20032a:	d001      	beq.n	200330 <sduRequestsHook+0x10>
  return false;
  20032c:	2000      	movs	r0, #0
  20032e:	4770      	bx	lr
bool sduRequestsHook(USBDriver *usbp) {
  200330:	b410      	push	{r4}
    switch (usbp->setup[1]) {
  200332:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
  200336:	4602      	mov	r2, r0
  200338:	2b21      	cmp	r3, #33	; 0x21
  20033a:	d00c      	beq.n	200356 <sduRequestsHook+0x36>
  20033c:	2b22      	cmp	r3, #34	; 0x22
  20033e:	d004      	beq.n	20034a <sduRequestsHook+0x2a>
  200340:	2b20      	cmp	r3, #32
  200342:	d008      	beq.n	200356 <sduRequestsHook+0x36>
      return false;
  200344:	2000      	movs	r0, #0
}
  200346:	bc10      	pop	{r4}
  200348:	4770      	bx	lr
      usbSetupTransfer(usbp, NULL, 0, NULL);
  20034a:	2300      	movs	r3, #0
      return true;
  20034c:	2001      	movs	r0, #1
      usbSetupTransfer(usbp, NULL, 0, NULL);
  20034e:	6513      	str	r3, [r2, #80]	; 0x50
  200350:	6553      	str	r3, [r2, #84]	; 0x54
  200352:	6593      	str	r3, [r2, #88]	; 0x58
  200354:	e7f7      	b.n	200346 <sduRequestsHook+0x26>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
  200356:	4c04      	ldr	r4, [pc, #16]	; (200368 <sduRequestsHook+0x48>)
  200358:	2107      	movs	r1, #7
  20035a:	2300      	movs	r3, #0
      return true;
  20035c:	2001      	movs	r0, #1
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
  20035e:	6514      	str	r4, [r2, #80]	; 0x50
  200360:	6551      	str	r1, [r2, #84]	; 0x54
  200362:	6593      	str	r3, [r2, #88]	; 0x58
}
  200364:	bc10      	pop	{r4}
  200366:	4770      	bx	lr
  200368:	20020000 	.word	0x20020000
  20036c:	00000000 	.word	0x00000000

00200370 <_ctl.lto_priv.66>:
}
  200370:	2000      	movs	r0, #0
  200372:	4770      	bx	lr
	...

00200380 <chCoreAllocAlignedI.lto_priv.52>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
  200380:	b4f0      	push	{r4, r5, r6, r7}

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  200382:	4d0a      	ldr	r5, [pc, #40]	; (2003ac <chCoreAllocAlignedI.lto_priv.52+0x2c>)
  size = MEM_ALIGN_NEXT(size, align);
  200384:	1e4b      	subs	r3, r1, #1
  200386:	424e      	negs	r6, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  200388:	682f      	ldr	r7, [r5, #0]
  size = MEM_ALIGN_NEXT(size, align);
  20038a:	4403      	add	r3, r0
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  20038c:	686c      	ldr	r4, [r5, #4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  20038e:	1e7a      	subs	r2, r7, #1
  size = MEM_ALIGN_NEXT(size, align);
  200390:	4033      	ands	r3, r6
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  200392:	1850      	adds	r0, r2, r1
  200394:	4030      	ands	r0, r6
  next = p + size;
  200396:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  200398:	42a3      	cmp	r3, r4
  20039a:	d804      	bhi.n	2003a6 <chCoreAllocAlignedI.lto_priv.52+0x26>
  20039c:	429f      	cmp	r7, r3
  20039e:	d802      	bhi.n	2003a6 <chCoreAllocAlignedI.lto_priv.52+0x26>
    return NULL;
  }

  ch_memcore.nextmem = next;
  2003a0:	602b      	str	r3, [r5, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
  2003a2:	bcf0      	pop	{r4, r5, r6, r7}
  2003a4:	4770      	bx	lr
    return NULL;
  2003a6:	2000      	movs	r0, #0
  2003a8:	bcf0      	pop	{r4, r5, r6, r7}
  2003aa:	4770      	bx	lr
  2003ac:	20000fa8 	.word	0x20000fa8

002003b0 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
  2003b0:	b4f0      	push	{r4, r5, r6, r7}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2003b2:	2320      	movs	r3, #32
  2003b4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  2003b8:	4d0d      	ldr	r5, [pc, #52]	; (2003f0 <chCoreAllocAlignedWithOffset+0x40>)
  2003ba:	1e4e      	subs	r6, r1, #1
  size = MEM_ALIGN_NEXT(size, align);
  2003bc:	4249      	negs	r1, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  2003be:	682f      	ldr	r7, [r5, #0]
  size = MEM_ALIGN_NEXT(size, align);
  2003c0:	1983      	adds	r3, r0, r6
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  2003c2:	686c      	ldr	r4, [r5, #4]
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  2003c4:	18b8      	adds	r0, r7, r2
  size = MEM_ALIGN_NEXT(size, align);
  2003c6:	400b      	ands	r3, r1
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  2003c8:	4430      	add	r0, r6
  2003ca:	4008      	ands	r0, r1
  next = p + size;
  2003cc:	4403      	add	r3, r0
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
  2003ce:	42a3      	cmp	r3, r4
  2003d0:	d807      	bhi.n	2003e2 <chCoreAllocAlignedWithOffset+0x32>
  2003d2:	429f      	cmp	r7, r3
  2003d4:	d805      	bhi.n	2003e2 <chCoreAllocAlignedWithOffset+0x32>
  ch_memcore.nextmem = next;
  2003d6:	602b      	str	r3, [r5, #0]
  2003d8:	2300      	movs	r3, #0
  2003da:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
  chSysUnlock();

  return p;
}
  2003de:	bcf0      	pop	{r4, r5, r6, r7}
  2003e0:	4770      	bx	lr
    return NULL;
  2003e2:	2000      	movs	r0, #0
  2003e4:	2300      	movs	r3, #0
  2003e6:	f383 8811 	msr	BASEPRI, r3
}
  2003ea:	bcf0      	pop	{r4, r5, r6, r7}
  2003ec:	4770      	bx	lr
  2003ee:	bf00      	nop
  2003f0:	20000fa8 	.word	0x20000fa8
	...

00200400 <wakeup>:
  200400:	2320      	movs	r3, #32
  200402:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
  200406:	f890 3020 	ldrb.w	r3, [r0, #32]
  20040a:	2b07      	cmp	r3, #7
  20040c:	d80e      	bhi.n	20042c <wakeup+0x2c>
  20040e:	e8df f003 	tbb	[pc, r3]
  200412:	0d28      	.short	0x0d28
  200414:	0408240d 	.word	0x0408240d
  200418:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
  20041a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
  20041c:	6893      	ldr	r3, [r2, #8]
  20041e:	3301      	adds	r3, #1
  200420:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  200422:	e890 000c 	ldmia.w	r0, {r2, r3}
  200426:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
  200428:	6802      	ldr	r2, [r0, #0]
  20042a:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_READY;
  20042c:	2200      	movs	r2, #0
  20042e:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
  200430:	4b0e      	ldr	r3, [pc, #56]	; (20046c <wakeup+0x6c>)
  tp->state = CH_STATE_READY;
  200432:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
  200436:	b410      	push	{r4}
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
  200438:	f04f 34ff 	mov.w	r4, #4294967295
  20043c:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
  20043e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  200440:	689a      	ldr	r2, [r3, #8]
  200442:	428a      	cmp	r2, r1
  200444:	d2fb      	bcs.n	20043e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
  200446:	685a      	ldr	r2, [r3, #4]
  200448:	2100      	movs	r1, #0
  tp->queue.next             = cp;
  20044a:	6003      	str	r3, [r0, #0]
  tp->queue.prev             = cp->queue.prev;
  20044c:	6042      	str	r2, [r0, #4]
  tp->queue.prev->queue.next = tp;
  20044e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
  200450:	6058      	str	r0, [r3, #4]
  200452:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
  200456:	bc10      	pop	{r4}
  200458:	4770      	bx	lr
    *tp->u.wttrp = NULL;
  20045a:	6a43      	ldr	r3, [r0, #36]	; 0x24
  20045c:	2200      	movs	r2, #0
  20045e:	601a      	str	r2, [r3, #0]
  200460:	e7e4      	b.n	20042c <wakeup+0x2c>
  200462:	2300      	movs	r3, #0
  200464:	f383 8811 	msr	BASEPRI, r3
  200468:	4770      	bx	lr
  20046a:	bf00      	nop
  20046c:	20001248 	.word	0x20001248

00200470 <_idle_thread.lto_priv.67>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
  200470:	e7fe      	b.n	200470 <_idle_thread.lto_priv.67>
  200472:	bf00      	nop
	...

00200480 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
  200480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t max;

  /* Is the EP0 state machine in the correct state for handling setup
     packets?*/
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
  200482:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
  200486:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
  200488:	b113      	cbz	r3, 200490 <_usb_ep0setup+0x10>
    /* This is unexpected could require handling with a warning event.*/
    /* TODO: handling here.*/

    /* Resetting the EP0 state machine and going ahead.*/
    usbp->ep0state = USB_EP0_STP_WAITING;
  20048a:	2300      	movs	r3, #0
  20048c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
  200490:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
  200494:	6862      	ldr	r2, [r4, #4]
  200496:	68cb      	ldr	r3, [r1, #12]
  200498:	6a1b      	ldr	r3, [r3, #32]
  20049a:	6819      	ldr	r1, [r3, #0]
  20049c:	685b      	ldr	r3, [r3, #4]
  20049e:	65e1      	str	r1, [r4, #92]	; 0x5c
  2004a0:	6623      	str	r3, [r4, #96]	; 0x60
  2004a2:	6893      	ldr	r3, [r2, #8]
  2004a4:	b35b      	cbz	r3, 2004fe <_usb_ep0setup+0x7e>
      !(usbp->config->requests_hook_cb(usbp))) {
  2004a6:	4620      	mov	r0, r4
  2004a8:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
  2004aa:	b340      	cbz	r0, 2004fe <_usb_ep0setup+0x7e>
  2004ac:	6d61      	ldr	r1, [r4, #84]	; 0x54
  2004ae:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
  hw |= (uint16_t)*p << 8U;
  2004b2:	f894 0063 	ldrb.w	r0, [r4, #99]	; 0x63
  2004b6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
  2004ba:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
  2004be:	428a      	cmp	r2, r1
  2004c0:	bf2c      	ite	cs
  2004c2:	460a      	movcs	r2, r1
    usbp->ep0n = max;
  2004c4:	6562      	strcc	r2, [r4, #84]	; 0x54
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
  2004c6:	0619      	lsls	r1, r3, #24
  2004c8:	f100 8090 	bmi.w	2005ec <_usb_ep0setup+0x16c>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
  2004cc:	2a00      	cmp	r2, #0
  2004ce:	d15d      	bne.n	20058c <_usb_ep0setup+0x10c>
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
  2004d0:	220b      	movs	r2, #11
  2004d2:	2320      	movs	r3, #32
  2004d4:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  2004d8:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2004dc:	8922      	ldrh	r2, [r4, #8]
  isp->txbuf  = buf;
  2004de:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
  2004e0:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_in(usbp, ep);
  2004e2:	4620      	mov	r0, r4
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2004e4:	f042 0201 	orr.w	r2, r2, #1
  usb_lld_start_in(usbp, ep);
  2004e8:	4629      	mov	r1, r5
  isp = usbp->epc[ep]->in_state;
  2004ea:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2004ec:	8122      	strh	r2, [r4, #8]
  isp->txbuf  = buf;
  2004ee:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
  2004f0:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
  2004f2:	605d      	str	r5, [r3, #4]
  usb_lld_start_in(usbp, ep);
  2004f4:	f001 fcfc 	bl	201ef0 <usb_lld_start_in>
  2004f8:	f385 8811 	msr	BASEPRI, r5
  2004fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
  2004fe:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
  200502:	f013 0560 	ands.w	r5, r3, #96	; 0x60
  200506:	4619      	mov	r1, r3
  200508:	d016      	beq.n	200538 <_usb_ep0setup+0xb8>
  20050a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
  20050c:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
  200510:	6861      	ldr	r1, [r4, #4]
  200512:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  200516:	680d      	ldr	r5, [r1, #0]
  200518:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
  20051c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
  200520:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  200524:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  200528:	b115      	cbz	r5, 200530 <_usb_ep0setup+0xb0>
  20052a:	2106      	movs	r1, #6
  20052c:	4620      	mov	r0, r4
  20052e:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
  200530:	2306      	movs	r3, #6
  200532:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  200536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           ((uint32_t)usbp->setup[1] << 8U))) {
  200538:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
  20053c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
  200540:	f240 3002 	movw	r0, #770	; 0x302
                                        USB_RTYPE_TYPE_MASK)) |
  200544:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
  200548:	4282      	cmp	r2, r0
  20054a:	f000 814e 	beq.w	2007ea <_usb_ep0setup+0x36a>
  20054e:	d836      	bhi.n	2005be <_usb_ep0setup+0x13e>
  200550:	2a02      	cmp	r2, #2
  200552:	f000 8138 	beq.w	2007c6 <_usb_ep0setup+0x346>
  200556:	f240 810a 	bls.w	20076e <_usb_ep0setup+0x2ee>
  20055a:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
  20055e:	f000 810f 	beq.w	200780 <_usb_ep0setup+0x300>
  200562:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
  200566:	f000 8086 	beq.w	200676 <_usb_ep0setup+0x1f6>
  20056a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  20056e:	d1cc      	bne.n	20050a <_usb_ep0setup+0x8a>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
  200570:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  200574:	2b01      	cmp	r3, #1
  200576:	d1c8      	bne.n	20050a <_usb_ep0setup+0x8a>
      usbp->status &= ~2U;
  200578:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
      usbSetupTransfer(usbp, NULL, 0, NULL);
  20057c:	6525      	str	r5, [r4, #80]	; 0x50
      usbp->status &= ~2U;
  20057e:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
  200582:	6565      	str	r5, [r4, #84]	; 0x54
  200584:	65a5      	str	r5, [r4, #88]	; 0x58
      usbp->status &= ~2U;
  200586:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  20058a:	e05a      	b.n	200642 <_usb_ep0setup+0x1c2>
      usbp->ep0state = USB_EP0_OUT_RX;
  20058c:	2215      	movs	r2, #21
  20058e:	2320      	movs	r3, #32
  200590:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  200594:	f383 8811 	msr	BASEPRI, r3
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200598:	8962      	ldrh	r2, [r4, #10]
  osp->rxcnt  = 0;
  20059a:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
  20059c:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_out(usbp, ep);
  20059e:	4620      	mov	r0, r4
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
  2005a0:	6d27      	ldr	r7, [r4, #80]	; 0x50
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2005a2:	f042 0201 	orr.w	r2, r2, #1
  osp = usbp->epc[ep]->out_state;
  2005a6:	699b      	ldr	r3, [r3, #24]
  usb_lld_start_out(usbp, ep);
  2005a8:	4629      	mov	r1, r5
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
  2005aa:	6d66      	ldr	r6, [r4, #84]	; 0x54
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2005ac:	8162      	strh	r2, [r4, #10]
  osp->rxbuf  = buf;
  2005ae:	609f      	str	r7, [r3, #8]
  osp->rxsize = n;
  2005b0:	601e      	str	r6, [r3, #0]
  osp->rxcnt  = 0;
  2005b2:	605d      	str	r5, [r3, #4]
  usb_lld_start_out(usbp, ep);
  2005b4:	f001 fcf4 	bl	201fa0 <usb_lld_start_out>
  2005b8:	f385 8811 	msr	BASEPRI, r5
  2005bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
  2005be:	f240 6001 	movw	r0, #1537	; 0x601
  2005c2:	4282      	cmp	r2, r0
  2005c4:	d92c      	bls.n	200620 <_usb_ep0setup+0x1a0>
  2005c6:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
  2005ca:	d063      	beq.n	200694 <_usb_ep0setup+0x214>
  2005cc:	f640 4102 	movw	r1, #3074	; 0xc02
  2005d0:	428a      	cmp	r2, r1
  2005d2:	f000 80f0 	beq.w	2007b6 <_usb_ep0setup+0x336>
  2005d6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
  2005da:	d196      	bne.n	20050a <_usb_ep0setup+0x8a>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
  2005dc:	f104 0167 	add.w	r1, r4, #103	; 0x67
  2005e0:	2201      	movs	r2, #1
  2005e2:	65a5      	str	r5, [r4, #88]	; 0x58
  2005e4:	6521      	str	r1, [r4, #80]	; 0x50
  2005e6:	4611      	mov	r1, r2
  2005e8:	6562      	str	r2, [r4, #84]	; 0x54
  2005ea:	e762      	b.n	2004b2 <_usb_ep0setup+0x32>
    if (usbp->ep0n != 0U) {
  2005ec:	b362      	cbz	r2, 200648 <_usb_ep0setup+0x1c8>
      usbp->ep0state = USB_EP0_IN_TX;
  2005ee:	2209      	movs	r2, #9
  2005f0:	2320      	movs	r3, #32
  2005f2:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  2005f6:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2005fa:	8922      	ldrh	r2, [r4, #8]
  isp->txcnt  = 0;
  2005fc:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
  2005fe:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_in(usbp, ep);
  200600:	4620      	mov	r0, r4
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
  200602:	6d27      	ldr	r7, [r4, #80]	; 0x50
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200604:	f042 0201 	orr.w	r2, r2, #1
  isp = usbp->epc[ep]->in_state;
  200608:	695b      	ldr	r3, [r3, #20]
  usb_lld_start_in(usbp, ep);
  20060a:	4629      	mov	r1, r5
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
  20060c:	6d66      	ldr	r6, [r4, #84]	; 0x54
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  20060e:	8122      	strh	r2, [r4, #8]
  isp->txbuf  = buf;
  200610:	609f      	str	r7, [r3, #8]
  isp->txsize = n;
  200612:	601e      	str	r6, [r3, #0]
  isp->txcnt  = 0;
  200614:	605d      	str	r5, [r3, #4]
  usb_lld_start_in(usbp, ep);
  200616:	f001 fc6b 	bl	201ef0 <usb_lld_start_in>
  20061a:	f385 8811 	msr	BASEPRI, r5
  20061e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
  200620:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
  200624:	d24d      	bcs.n	2006c2 <_usb_ep0setup+0x242>
  200626:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
  20062a:	f47f af6e 	bne.w	20050a <_usb_ep0setup+0x8a>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
  20062e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
  200632:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
  200636:	f000 80f8 	beq.w	20082a <_usb_ep0setup+0x3aa>
    usbSetupTransfer(usbp, NULL, 0, NULL);
  20063a:	2300      	movs	r3, #0
  20063c:	6523      	str	r3, [r4, #80]	; 0x50
  20063e:	6563      	str	r3, [r4, #84]	; 0x54
  200640:	65a3      	str	r3, [r4, #88]	; 0x58
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
  200642:	060b      	lsls	r3, r1, #24
  200644:	f57f af44 	bpl.w	2004d0 <_usb_ep0setup+0x50>
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
  200648:	2214      	movs	r2, #20
  20064a:	2320      	movs	r3, #32
  20064c:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  200650:	f383 8811 	msr	BASEPRI, r3
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200654:	8962      	ldrh	r2, [r4, #10]
  osp->rxbuf  = buf;
  200656:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
  200658:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_out(usbp, ep);
  20065a:	4620      	mov	r0, r4
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  20065c:	f042 0201 	orr.w	r2, r2, #1
  usb_lld_start_out(usbp, ep);
  200660:	4629      	mov	r1, r5
  osp = usbp->epc[ep]->out_state;
  200662:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200664:	8162      	strh	r2, [r4, #10]
  osp->rxbuf  = buf;
  200666:	609d      	str	r5, [r3, #8]
  osp->rxsize = n;
  200668:	601d      	str	r5, [r3, #0]
  osp->rxcnt  = 0;
  20066a:	605d      	str	r5, [r3, #4]
  usb_lld_start_out(usbp, ep);
  20066c:	f001 fc98 	bl	201fa0 <usb_lld_start_out>
  200670:	f385 8811 	msr	BASEPRI, r5
  200674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
  200676:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  20067a:	2b01      	cmp	r3, #1
  20067c:	f47f af45 	bne.w	20050a <_usb_ep0setup+0x8a>
      usbp->status |= 2U;
  200680:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
      usbSetupTransfer(usbp, NULL, 0, NULL);
  200684:	6525      	str	r5, [r4, #80]	; 0x50
      usbp->status |= 2U;
  200686:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
  20068a:	6565      	str	r5, [r4, #84]	; 0x54
  20068c:	65a5      	str	r5, [r4, #88]	; 0x58
      usbp->status |= 2U;
  20068e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  200692:	e7d6      	b.n	200642 <_usb_ep0setup+0x1c2>
    if (usbp->configuration != usbp->setup[2]) {
  200694:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  200698:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
  20069c:	429a      	cmp	r2, r3
  20069e:	d0cc      	beq.n	20063a <_usb_ep0setup+0x1ba>
      if (usbp->state == USB_ACTIVE) {
  2006a0:	7822      	ldrb	r2, [r4, #0]
  2006a2:	2a04      	cmp	r2, #4
  2006a4:	d026      	beq.n	2006f4 <_usb_ep0setup+0x274>
      if (usbp->setup[2] != 0U) {
  2006a6:	b14b      	cbz	r3, 2006bc <_usb_ep0setup+0x23c>
        usbp->state = USB_ACTIVE;
  2006a8:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
  2006aa:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
  2006ac:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
        usbp->state = USB_ACTIVE;
  2006b0:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
  2006b2:	6813      	ldr	r3, [r2, #0]
  2006b4:	b113      	cbz	r3, 2006bc <_usb_ep0setup+0x23c>
  2006b6:	2102      	movs	r1, #2
  2006b8:	4620      	mov	r0, r4
  2006ba:	4798      	blx	r3
  2006bc:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
  2006c0:	e7bb      	b.n	20063a <_usb_ep0setup+0x1ba>
  hw |= (uint16_t)*p << 8U;
  2006c2:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
  2006c6:	4620      	mov	r0, r4
  2006c8:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
  2006ca:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
  2006ce:	684e      	ldr	r6, [r1, #4]
  2006d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  2006d4:	f894 105f 	ldrb.w	r1, [r4, #95]	; 0x5f
  2006d8:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
  2006dc:	47b0      	blx	r6
    if (dp == NULL) {
  2006de:	2800      	cmp	r0, #0
  2006e0:	f43f af13 	beq.w	20050a <_usb_ep0setup+0x8a>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
  2006e4:	e890 000a 	ldmia.w	r0, {r1, r3}
  2006e8:	65a5      	str	r5, [r4, #88]	; 0x58
  2006ea:	6523      	str	r3, [r4, #80]	; 0x50
  2006ec:	6561      	str	r1, [r4, #84]	; 0x54
  2006ee:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
  2006f2:	e6de      	b.n	2004b2 <_usb_ep0setup+0x32>
  2006f4:	2320      	movs	r3, #32
  2006f6:	f383 8811 	msr	BASEPRI, r3
  2006fa:	6f26      	ldr	r6, [r4, #112]	; 0x70
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  2006fc:	4629      	mov	r1, r5
  usbp->transmitting &= 1U;
  2006fe:	8927      	ldrh	r7, [r4, #8]
    otgp->ie[i].DIEPCTL = 0;
  200700:	462a      	mov	r2, r5
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
  200702:	6833      	ldr	r3, [r6, #0]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
  200704:	f04f 30ff 	mov.w	r0, #4294967295
  usbp->receiving    &= 1U;
  200708:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
  usbp->transmitting &= 1U;
  20070c:	f007 0701 	and.w	r7, r7, #1
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
  200710:	6763      	str	r3, [r4, #116]	; 0x74
  usbp->receiving    &= 1U;
  200712:	f00e 0301 	and.w	r3, lr, #1
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  200716:	68b6      	ldr	r6, [r6, #8]
    usbp->epc[i] = NULL;
  200718:	6125      	str	r5, [r4, #16]
  20071a:	6165      	str	r5, [r4, #20]
  20071c:	61a5      	str	r5, [r4, #24]
  20071e:	61e5      	str	r5, [r4, #28]
  200720:	6225      	str	r5, [r4, #32]
  200722:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  usbp->transmitting &= 1U;
  200724:	8127      	strh	r7, [r4, #8]
  usbp->receiving    &= 1U;
  200726:	8163      	strh	r3, [r4, #10]
  200728:	eb05 1341 	add.w	r3, r5, r1, lsl #5
  20072c:	3101      	adds	r1, #1
  20072e:	428e      	cmp	r6, r1
    otgp->ie[i].DIEPCTL = 0;
  200730:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
  200734:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
  200738:	f8c3 0908 	str.w	r0, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPCTL = 0;
  20073c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
  200740:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  200744:	f8c3 0b08 	str.w	r0, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  200748:	d2ee      	bcs.n	200728 <_usb_ep0setup+0x2a8>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
  20074a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  20074e:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
  200752:	f382 8811 	msr	BASEPRI, r2
        usbp->state = USB_SELECTED;
  200756:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
  200758:	6863      	ldr	r3, [r4, #4]
        usbp->configuration = 0U;
  20075a:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
        usbp->state = USB_SELECTED;
  20075e:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
  200760:	681b      	ldr	r3, [r3, #0]
  200762:	b10b      	cbz	r3, 200768 <_usb_ep0setup+0x2e8>
  200764:	4620      	mov	r0, r4
  200766:	4798      	blx	r3
  200768:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  20076c:	e79b      	b.n	2006a6 <_usb_ep0setup+0x226>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
  20076e:	b9fa      	cbnz	r2, 2007b0 <_usb_ep0setup+0x330>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
  200770:	f104 0164 	add.w	r1, r4, #100	; 0x64
  200774:	2002      	movs	r0, #2
  200776:	65a2      	str	r2, [r4, #88]	; 0x58
  200778:	6521      	str	r1, [r4, #80]	; 0x50
  20077a:	4601      	mov	r1, r0
  20077c:	6560      	str	r0, [r4, #84]	; 0x54
  20077e:	e698      	b.n	2004b2 <_usb_ep0setup+0x32>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
  200780:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  200784:	2b00      	cmp	r3, #0
  200786:	f47f aec0 	bne.w	20050a <_usb_ep0setup+0x8a>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
  20078a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
  20078e:	f013 020f 	ands.w	r2, r3, #15
  200792:	f43f af52 	beq.w	20063a <_usb_ep0setup+0x1ba>
      if ((usbp->setup[4] & 0x80U) != 0U) {
  200796:	f013 0f80 	tst.w	r3, #128	; 0x80
  20079a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  20079c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  2007a0:	d15b      	bne.n	20085a <_usb_ep0setup+0x3da>
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
  2007a2:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
  2007a6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  2007aa:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
  2007ae:	e744      	b.n	20063a <_usb_ep0setup+0x1ba>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
  2007b0:	2a01      	cmp	r2, #1
  2007b2:	f47f aeaa 	bne.w	20050a <_usb_ep0setup+0x8a>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
  2007b6:	4930      	ldr	r1, [pc, #192]	; (200878 <_usb_ep0setup+0x3f8>)
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
  2007b8:	2202      	movs	r2, #2
  2007ba:	2000      	movs	r0, #0
  2007bc:	6521      	str	r1, [r4, #80]	; 0x50
  2007be:	6562      	str	r2, [r4, #84]	; 0x54
  2007c0:	4611      	mov	r1, r2
  2007c2:	65a0      	str	r0, [r4, #88]	; 0x58
  2007c4:	e675      	b.n	2004b2 <_usb_ep0setup+0x32>
    if ((usbp->setup[4] & 0x80U) != 0U) {
  2007c6:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
  2007ca:	f012 0f80 	tst.w	r2, #128	; 0x80
  ctl = usbp->otg->ie[ep].DIEPCTL;
  2007ce:	f002 010f 	and.w	r1, r2, #15
  2007d2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  2007d4:	d123      	bne.n	20081e <_usb_ep0setup+0x39e>
  ctl = usbp->otg->oe[ep].DOEPCTL;
  2007d6:	3158      	adds	r1, #88	; 0x58
  2007d8:	0149      	lsls	r1, r1, #5
  2007da:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DOEPCTL_USBAEP))
  2007dc:	040d      	lsls	r5, r1, #16
  2007de:	f57f ae95 	bpl.w	20050c <_usb_ep0setup+0x8c>
  if (ctl & DOEPCTL_STALL)
  2007e2:	0288      	lsls	r0, r1, #10
  2007e4:	d419      	bmi.n	20081a <_usb_ep0setup+0x39a>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
  2007e6:	4925      	ldr	r1, [pc, #148]	; (20087c <_usb_ep0setup+0x3fc>)
  2007e8:	e7e6      	b.n	2007b8 <_usb_ep0setup+0x338>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
  2007ea:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  2007ee:	2b00      	cmp	r3, #0
  2007f0:	f47f ae8b 	bne.w	20050a <_usb_ep0setup+0x8a>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
  2007f4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
  2007f8:	f013 020f 	ands.w	r2, r3, #15
  2007fc:	f43f af1d 	beq.w	20063a <_usb_ep0setup+0x1ba>
      if ((usbp->setup[4] & 0x80U) != 0U) {
  200800:	f013 0f80 	tst.w	r3, #128	; 0x80
  200804:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
  200806:	eb03 1342 	add.w	r3, r3, r2, lsl #5
  20080a:	d12d      	bne.n	200868 <_usb_ep0setup+0x3e8>
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
  20080c:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
  200810:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  200814:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
  200818:	e70f      	b.n	20063a <_usb_ep0setup+0x1ba>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
  20081a:	4919      	ldr	r1, [pc, #100]	; (200880 <_usb_ep0setup+0x400>)
  20081c:	e7cc      	b.n	2007b8 <_usb_ep0setup+0x338>
  ctl = usbp->otg->ie[ep].DIEPCTL;
  20081e:	3148      	adds	r1, #72	; 0x48
  200820:	0149      	lsls	r1, r1, #5
  200822:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DIEPCTL_USBAEP))
  200824:	040e      	lsls	r6, r1, #16
  200826:	d4dc      	bmi.n	2007e2 <_usb_ep0setup+0x362>
  200828:	e670      	b.n	20050c <_usb_ep0setup+0x8c>
  usbp->address = usbp->setup[2];
  20082a:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
  stm32_otg_t *otgp = usbp->otg;
  20082e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  200830:	f884 0066 	strb.w	r0, [r4, #102]	; 0x66
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
  200834:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
  200838:	6865      	ldr	r5, [r4, #4]
  20083a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  20083e:	682d      	ldr	r5, [r5, #0]
  200840:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  200844:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  200848:	b125      	cbz	r5, 200854 <_usb_ep0setup+0x3d4>
  20084a:	2101      	movs	r1, #1
  20084c:	4620      	mov	r0, r4
  20084e:	47a8      	blx	r5
  200850:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
  usbp->state = USB_SELECTED;
  200854:	2303      	movs	r3, #3
  200856:	7023      	strb	r3, [r4, #0]
  200858:	e6ef      	b.n	20063a <_usb_ep0setup+0x1ba>
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
  20085a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
  20085e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  200862:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  200866:	e6e8      	b.n	20063a <_usb_ep0setup+0x1ba>
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
  200868:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
  20086c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  200870:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  200874:	e6e1      	b.n	20063a <_usb_ep0setup+0x1ba>
  200876:	bf00      	nop
  200878:	08003b68 	.word	0x08003b68
  20087c:	08003ae0 	.word	0x08003ae0
  200880:	08003ae4 	.word	0x08003ae4
	...

00200890 <chSchGoSleepS>:
  thread_t *otp = currp;
  200890:	4b08      	ldr	r3, [pc, #32]	; (2008b4 <chSchGoSleepS+0x24>)
  thread_t *tp = tqp->next;
  200892:	681a      	ldr	r2, [r3, #0]
  200894:	6999      	ldr	r1, [r3, #24]
void chSchGoSleepS(tstate_t newstate) {
  200896:	b430      	push	{r4, r5}
  otp->state = newstate;
  200898:	f881 0020 	strb.w	r0, [r1, #32]
  currp->state = CH_STATE_CURRENT;
  20089c:	2501      	movs	r5, #1
  tqp->next             = tp->queue.next;
  20089e:	6814      	ldr	r4, [r2, #0]
  chSysSwitch(currp, otp);
  2008a0:	4610      	mov	r0, r2
  tqp->next->queue.prev = (thread_t *)tqp;
  2008a2:	6063      	str	r3, [r4, #4]
  tqp->next             = tp->queue.next;
  2008a4:	601c      	str	r4, [r3, #0]
  currp->state = CH_STATE_CURRENT;
  2008a6:	f882 5020 	strb.w	r5, [r2, #32]
  currp = queue_fifo_remove(&ch.rlist.queue);
  2008aa:	619a      	str	r2, [r3, #24]
}
  2008ac:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  2008ae:	f7ff bd17 	b.w	2002e0 <_port_switch>
  2008b2:	bf00      	nop
  2008b4:	20001248 	.word	0x20001248
	...

002008c0 <chSchGoSleepTimeoutS>:
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {

  chDbgCheckClassS();

  if (TIME_INFINITE != timeout) {
  2008c0:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
  2008c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  2008c4:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
  2008c6:	d049      	beq.n	20095c <chSchGoSleepTimeoutS+0x9c>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
  2008c8:	4c42      	ldr	r4, [pc, #264]	; (2009d4 <chSchGoSleepTimeoutS+0x114>)
  2008ca:	2902      	cmp	r1, #2

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
  2008cc:	4a42      	ldr	r2, [pc, #264]	; (2009d8 <chSchGoSleepTimeoutS+0x118>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
  2008ce:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  2008d2:	4625      	mov	r5, r4
  vtp->par = par;
  2008d4:	69a3      	ldr	r3, [r4, #24]
  vtp->func = vtfunc;
  2008d6:	9204      	str	r2, [sp, #16]
  2008d8:	bf38      	it	cc
  2008da:	2102      	movcc	r1, #2
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  2008dc:	f855 2f1c 	ldr.w	r2, [r5, #28]!
  2008e0:	4607      	mov	r7, r0
  vtp->par = par;
  2008e2:	9305      	str	r3, [sp, #20]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  2008e4:	42aa      	cmp	r2, r5
  2008e6:	f8de 3024 	ldr.w	r3, [lr, #36]	; 0x24
  2008ea:	d05d      	beq.n	2009a8 <chSchGoSleepTimeoutS+0xe8>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
  2008ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
  2008ee:	1a1b      	subs	r3, r3, r0

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
  2008f0:	18c9      	adds	r1, r1, r3
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
  2008f2:	6893      	ldr	r3, [r2, #8]
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
  2008f4:	d22e      	bcs.n	200954 <chSchGoSleepTimeoutS+0x94>
      p = p->next;
    }
    else if (delta < p->delta) {
  2008f6:	4299      	cmp	r1, r3
  2008f8:	d337      	bcc.n	20096a <chSchGoSleepTimeoutS+0xaa>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
  2008fa:	4299      	cmp	r1, r3
  2008fc:	d904      	bls.n	200908 <chSchGoSleepTimeoutS+0x48>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
  2008fe:	6812      	ldr	r2, [r2, #0]
    delta -= p->delta;
  200900:	1ac9      	subs	r1, r1, r3
  while (p->delta < delta) {
  200902:	6893      	ldr	r3, [r2, #8]
  200904:	428b      	cmp	r3, r1
  200906:	d3fa      	bcc.n	2008fe <chSchGoSleepTimeoutS+0x3e>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
  200908:	6853      	ldr	r3, [r2, #4]
  vtp->prev->next = vtp;
  20090a:	ae01      	add	r6, sp, #4
  vtp->next = p;
  20090c:	9201      	str	r2, [sp, #4]
  /* Calculate new delta for the following entry.*/
  p->delta -= delta;

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
  20090e:	f04f 30ff 	mov.w	r0, #4294967295
  vtp->prev = vtp->next->prev;
  200912:	9302      	str	r3, [sp, #8]
  vtp->prev->next = vtp;
  200914:	601e      	str	r6, [r3, #0]
  p->prev = vtp;
  200916:	6056      	str	r6, [r2, #4]
  vtp->delta = delta;
  200918:	9103      	str	r1, [sp, #12]
  p->delta -= delta;
  20091a:	6893      	ldr	r3, [r2, #8]
  20091c:	1a59      	subs	r1, r3, r1
  20091e:	6091      	str	r1, [r2, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
  200920:	6260      	str	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
  200922:	4638      	mov	r0, r7
  200924:	f7ff ffb4 	bl	200890 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  200928:	9b04      	ldr	r3, [sp, #16]
  20092a:	b17b      	cbz	r3, 20094c <chSchGoSleepTimeoutS+0x8c>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
  20092c:	69e3      	ldr	r3, [r4, #28]
  20092e:	42b3      	cmp	r3, r6
  200930:	d01f      	beq.n	200972 <chSchGoSleepTimeoutS+0xb2>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
  200932:	9a02      	ldr	r2, [sp, #8]
    vtp->next->prev = vtp->prev;
    vtp->func = NULL;
  200934:	2100      	movs	r1, #0
    vtp->prev->next = vtp->next;
  200936:	9b01      	ldr	r3, [sp, #4]
  200938:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
  20093a:	9b01      	ldr	r3, [sp, #4]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  20093c:	42ab      	cmp	r3, r5
    vtp->next->prev = vtp->prev;
  20093e:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
  200940:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
  200942:	d003      	beq.n	20094c <chSchGoSleepTimeoutS+0x8c>
      vtp->next->delta += vtp->delta;
  200944:	689a      	ldr	r2, [r3, #8]
  200946:	9903      	ldr	r1, [sp, #12]
  200948:	440a      	add	r2, r1
  20094a:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
  20094c:	69a3      	ldr	r3, [r4, #24]
}
  20094e:	6a58      	ldr	r0, [r3, #36]	; 0x24
  200950:	b007      	add	sp, #28
  200952:	bdf0      	pop	{r4, r5, r6, r7, pc}
      p = p->next;
  200954:	6812      	ldr	r2, [r2, #0]
      delta -= p->delta;
  200956:	1ac9      	subs	r1, r1, r3
  200958:	6893      	ldr	r3, [r2, #8]
  20095a:	e7ce      	b.n	2008fa <chSchGoSleepTimeoutS+0x3a>
  20095c:	4c1d      	ldr	r4, [pc, #116]	; (2009d4 <chSchGoSleepTimeoutS+0x114>)
    chSchGoSleepS(newstate);
  20095e:	f7ff ff97 	bl	200890 <chSchGoSleepS>
  return currp->u.rdymsg;
  200962:	69a3      	ldr	r3, [r4, #24]
}
  200964:	6a58      	ldr	r0, [r3, #36]	; 0x24
  200966:	b007      	add	sp, #28
  200968:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return systime + (systime_t)interval;
  20096a:	4408      	add	r0, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  20096c:	f8ce 0034 	str.w	r0, [lr, #52]	; 0x34
  200970:	e7c3      	b.n	2008fa <chSchGoSleepTimeoutS+0x3a>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  200972:	9b01      	ldr	r3, [sp, #4]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
  200974:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  200976:	42ab      	cmp	r3, r5
  ch.vtlist.next = vtp->next;
  200978:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  20097a:	605d      	str	r5, [r3, #4]
  vtp->func = NULL;
  20097c:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
  20097e:	d024      	beq.n	2009ca <chSchGoSleepTimeoutS+0x10a>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
  200980:	689a      	ldr	r2, [r3, #8]
  return (systime_t)STM32_ST_TIM->CNT;
  200982:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  200986:	9d03      	ldr	r5, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
  200988:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
  20098a:	442a      	add	r2, r5
  20098c:	609a      	str	r2, [r3, #8]
  20098e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
  200990:	1a5b      	subs	r3, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
  200992:	429a      	cmp	r2, r3
  200994:	d9da      	bls.n	20094c <chSchGoSleepTimeoutS+0x8c>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
  200996:	1ad0      	subs	r0, r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
  200998:	2801      	cmp	r0, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
  20099a:	bf98      	it	ls
  20099c:	1c9a      	addls	r2, r3, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  20099e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
  2009a2:	440a      	add	r2, r1
  2009a4:	635a      	str	r2, [r3, #52]	; 0x34
  2009a6:	e7d1      	b.n	20094c <chSchGoSleepTimeoutS+0x8c>
      ch.vtlist.lasttime = now;
  2009a8:	62a3      	str	r3, [r4, #40]	; 0x28
  2009aa:	18c8      	adds	r0, r1, r3
      ch.vtlist.next = vtp;
  2009ac:	ae01      	add	r6, sp, #4
  STM32_ST_TIM->SR     = 0;
  2009ae:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  2009b0:	2302      	movs	r3, #2
      vtp->next = (virtual_timer_t *)&ch.vtlist;
  2009b2:	9501      	str	r5, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
  2009b4:	9502      	str	r5, [sp, #8]
      vtp->delta = delay;
  2009b6:	9103      	str	r1, [sp, #12]
      ch.vtlist.next = vtp;
  2009b8:	61e6      	str	r6, [r4, #28]
      ch.vtlist.prev = vtp;
  2009ba:	6226      	str	r6, [r4, #32]
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  2009bc:	f8ce 0034 	str.w	r0, [lr, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
  2009c0:	f8ce 2010 	str.w	r2, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  2009c4:	f8ce 300c 	str.w	r3, [lr, #12]
  2009c8:	e7ab      	b.n	200922 <chSchGoSleepTimeoutS+0x62>
  STM32_ST_TIM->DIER = 0;
  2009ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  2009ce:	60da      	str	r2, [r3, #12]
  2009d0:	e7bc      	b.n	20094c <chSchGoSleepTimeoutS+0x8c>
  2009d2:	bf00      	nop
  2009d4:	20001248 	.word	0x20001248
  2009d8:	00200401 	.word	0x00200401
  2009dc:	00000000 	.word	0x00000000

002009e0 <obqGetEmptyBufferTimeoutS>:
 *                      suspended state.
 *
 * @sclass
 */
msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                sysinterval_t timeout) {
  2009e0:	b570      	push	{r4, r5, r6, lr}
  2009e2:	4604      	mov	r4, r0
  2009e4:	460d      	mov	r5, r1

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
  2009e6:	4e11      	ldr	r6, [pc, #68]	; (200a2c <obqGetEmptyBufferTimeoutS+0x4c>)
  2009e8:	e009      	b.n	2009fe <obqGetEmptyBufferTimeoutS+0x1e>
  2009ea:	69b3      	ldr	r3, [r6, #24]
  tp->queue.prev             = tqp->prev;
  2009ec:	6862      	ldr	r2, [r4, #4]
  tp->queue.next             = (thread_t *)tqp;
  2009ee:	601c      	str	r4, [r3, #0]
  tp->queue.prev             = tqp->prev;
  2009f0:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
  2009f2:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
  2009f4:	6063      	str	r3, [r4, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  2009f6:	f7ff ff63 	bl	2008c0 <chSchGoSleepTimeoutS>
  while (obqIsFullI(obqp)) {
    if (obqp->suspended) {
      return MSG_RESET;
    }
    msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
    if (msg < MSG_OK) {
  2009fa:	2800      	cmp	r0, #0
  2009fc:	db09      	blt.n	200a12 <obqGetEmptyBufferTimeoutS+0x32>
  while (obqIsFullI(obqp)) {
  2009fe:	68e3      	ldr	r3, [r4, #12]
  200a00:	4629      	mov	r1, r5
  200a02:	2004      	movs	r0, #4
  200a04:	b933      	cbnz	r3, 200a14 <obqGetEmptyBufferTimeoutS+0x34>
    if (obqp->suspended) {
  200a06:	7a23      	ldrb	r3, [r4, #8]
  200a08:	b963      	cbnz	r3, 200a24 <obqGetEmptyBufferTimeoutS+0x44>
  if (TIME_IMMEDIATE == timeout) {
  200a0a:	2d00      	cmp	r5, #0
  200a0c:	d1ed      	bne.n	2009ea <obqGetEmptyBufferTimeoutS+0xa>
    return MSG_TIMEOUT;
  200a0e:	f04f 30ff 	mov.w	r0, #4294967295
  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
  obqp->top = obqp->bwrptr + obqp->bsize;

  return MSG_OK;
}
  200a12:	bd70      	pop	{r4, r5, r6, pc}
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
  200a14:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
  200a16:	2000      	movs	r0, #0
  200a18:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
  200a1a:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
  200a1c:	440b      	add	r3, r1
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
  200a1e:	62a2      	str	r2, [r4, #40]	; 0x28
  obqp->top = obqp->bwrptr + obqp->bsize;
  200a20:	62e3      	str	r3, [r4, #44]	; 0x2c
  200a22:	bd70      	pop	{r4, r5, r6, pc}
      return MSG_RESET;
  200a24:	f06f 0001 	mvn.w	r0, #1
  200a28:	bd70      	pop	{r4, r5, r6, pc}
  200a2a:	bf00      	nop
  200a2c:	20001248 	.word	0x20001248

00200a30 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
  200a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  200a34:	4699      	mov	r9, r3
  200a36:	b083      	sub	sp, #12
  200a38:	4605      	mov	r5, r0
  200a3a:	4617      	mov	r7, r2
  200a3c:	2320      	movs	r3, #32
  200a3e:	f383 8811 	msr	BASEPRI, r3
  return (systime_t)STM32_ST_TIM->CNT;
  200a42:	f04f 4a80 	mov.w	sl, #1073741824	; 0x40000000
    if (obqp->ptr == NULL) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200a46:	f109 33ff 	add.w	r3, r9, #4294967295
  size_t w = 0;
  200a4a:	f04f 0b00 	mov.w	fp, #0
    if (obqp->ptr == NULL) {
  200a4e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  200a50:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200a54:	9300      	str	r3, [sp, #0]
  obqp->ptr = NULL;
  200a56:	46d8      	mov	r8, fp
  200a58:	eb09 0302 	add.w	r3, r9, r2
  200a5c:	9301      	str	r3, [sp, #4]
  200a5e:	463b      	mov	r3, r7
  200a60:	460f      	mov	r7, r1
  200a62:	461e      	mov	r6, r3
    if (obqp->ptr == NULL) {
  200a64:	2800      	cmp	r0, #0
  200a66:	d047      	beq.n	200af8 <obqWriteTimeout+0xc8>
        return w;
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
  200a68:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    if (size > (n - w)) {
  200a6a:	eba6 040b 	sub.w	r4, r6, fp
    size = (size_t)obqp->top - (size_t)obqp->ptr;
  200a6e:	1a12      	subs	r2, r2, r0
  200a70:	4294      	cmp	r4, r2
  200a72:	bf28      	it	cs
  200a74:	4614      	movcs	r4, r2
      size = n - w;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
  200a76:	2c40      	cmp	r4, #64	; 0x40
  200a78:	d94d      	bls.n	200b16 <obqWriteTimeout+0xe6>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
  200a7a:	4639      	mov	r1, r7
  200a7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
  200a80:	f8d1 e000 	ldr.w	lr, [r1]
  200a84:	3110      	adds	r1, #16
  200a86:	f851 7c0c 	ldr.w	r7, [r1, #-12]
  200a8a:	3010      	adds	r0, #16
  200a8c:	f851 4c08 	ldr.w	r4, [r1, #-8]
  200a90:	f851 2c04 	ldr.w	r2, [r1, #-4]
  200a94:	4299      	cmp	r1, r3
  200a96:	f840 ec10 	str.w	lr, [r0, #-16]
  200a9a:	f840 7c0c 	str.w	r7, [r0, #-12]
  200a9e:	f840 4c08 	str.w	r4, [r0, #-8]
  200aa2:	f840 2c04 	str.w	r2, [r0, #-4]
  200aa6:	d1eb      	bne.n	200a80 <obqWriteTimeout+0x50>
      bp        += 64U;
      obqp->ptr += 64U;
  200aa8:	6aac      	ldr	r4, [r5, #40]	; 0x28
      bp        += 64U;
  200aaa:	460f      	mov	r7, r1
      w         += 64U;
  200aac:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
      obqp->ptr += 64U;
  200ab0:	3440      	adds	r4, #64	; 0x40
  200ab2:	62ac      	str	r4, [r5, #40]	; 0x28
      obqp->ptr += size;
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
  200ab4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  200ab6:	42a2      	cmp	r2, r4
  200ab8:	d814      	bhi.n	200ae4 <obqWriteTimeout+0xb4>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
  200aba:	69e9      	ldr	r1, [r5, #28]
  *((size_t *)obqp->bwrptr) = size;
  200abc:	692a      	ldr	r2, [r5, #16]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
  200abe:	3904      	subs	r1, #4
  if (obqp->bwrptr >= obqp->btop) {
  200ac0:	69a8      	ldr	r0, [r5, #24]
  *((size_t *)obqp->bwrptr) = size;
  200ac2:	6011      	str	r1, [r2, #0]
  obqp->bwrptr += obqp->bsize;
  200ac4:	69ec      	ldr	r4, [r5, #28]
  obqp->bcounter--;
  200ac6:	68e9      	ldr	r1, [r5, #12]
  obqp->bwrptr += obqp->bsize;
  200ac8:	4422      	add	r2, r4
  obqp->bcounter--;
  200aca:	3901      	subs	r1, #1
  if (obqp->bwrptr >= obqp->btop) {
  200acc:	4282      	cmp	r2, r0
  obqp->bwrptr += obqp->bsize;
  200ace:	612a      	str	r2, [r5, #16]
  obqp->bcounter--;
  200ad0:	60e9      	str	r1, [r5, #12]
  if (obqp->bwrptr >= obqp->btop) {
  200ad2:	d301      	bcc.n	200ad8 <obqWriteTimeout+0xa8>
    obqp->bwrptr = obqp->buffers;
  200ad4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  200ad6:	612a      	str	r2, [r5, #16]
  if (obqp->notify != NULL) {
  200ad8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
  obqp->ptr = NULL;
  200ada:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  if (obqp->notify != NULL) {
  200ade:	b10a      	cbz	r2, 200ae4 <obqWriteTimeout+0xb4>
    obqp->notify(obqp);
  200ae0:	4628      	mov	r0, r5
  200ae2:	4790      	blx	r2
  200ae4:	f388 8811 	msr	BASEPRI, r8
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (w >= n) {
  200ae8:	45b3      	cmp	fp, r6
  200aea:	d227      	bcs.n	200b3c <obqWriteTimeout+0x10c>
  200aec:	2220      	movs	r2, #32
  200aee:	f382 8811 	msr	BASEPRI, r2
    if (obqp->ptr == NULL) {
  200af2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  200af4:	2800      	cmp	r0, #0
  200af6:	d1b7      	bne.n	200a68 <obqWriteTimeout+0x38>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200af8:	9b00      	ldr	r3, [sp, #0]
  200afa:	3303      	adds	r3, #3
  200afc:	d815      	bhi.n	200b2a <obqWriteTimeout+0xfa>
  200afe:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
  200b02:	9b01      	ldr	r3, [sp, #4]
  200b04:	1a59      	subs	r1, r3, r1
        if (next_timeout > timeout) {
  200b06:	4589      	cmp	r9, r1
  200b08:	d31c      	bcc.n	200b44 <obqWriteTimeout+0x114>
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
  200b0a:	4628      	mov	r0, r5
  200b0c:	f7ff ff68 	bl	2009e0 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
  200b10:	b988      	cbnz	r0, 200b36 <obqWriteTimeout+0x106>
  200b12:	6aa8      	ldr	r0, [r5, #40]	; 0x28
  200b14:	e7a8      	b.n	200a68 <obqWriteTimeout+0x38>
      memcpy(obqp->ptr, bp, size);
  200b16:	4622      	mov	r2, r4
  200b18:	4639      	mov	r1, r7
  200b1a:	f002 ffd5 	bl	203ac8 <memcpy>
      obqp->ptr += size;
  200b1e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      w         += size;
  200b20:	44a3      	add	fp, r4
      bp        += size;
  200b22:	4427      	add	r7, r4
      obqp->ptr += size;
  200b24:	4414      	add	r4, r2
  200b26:	62ac      	str	r4, [r5, #40]	; 0x28
  200b28:	e7c4      	b.n	200ab4 <obqWriteTimeout+0x84>
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
  200b2a:	4649      	mov	r1, r9
  200b2c:	4628      	mov	r0, r5
  200b2e:	f7ff ff57 	bl	2009e0 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
  200b32:	2800      	cmp	r0, #0
  200b34:	d0ed      	beq.n	200b12 <obqWriteTimeout+0xe2>
  200b36:	2200      	movs	r2, #0
  200b38:	f382 8811 	msr	BASEPRI, r2
      return w;
    }
    osalSysLock();
  }
}
  200b3c:	4658      	mov	r0, fp
  200b3e:	b003      	add	sp, #12
  200b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  200b44:	f380 8811 	msr	BASEPRI, r0
  200b48:	e7f8      	b.n	200b3c <obqWriteTimeout+0x10c>
  200b4a:	bf00      	nop
  200b4c:	0000      	movs	r0, r0
	...

00200b50 <_writet.lto_priv.64>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
  200b50:	3044      	adds	r0, #68	; 0x44
  200b52:	f7ff bf6d 	b.w	200a30 <obqWriteTimeout>
  200b56:	bf00      	nop
	...

00200b60 <_write.lto_priv.58>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
  200b60:	3044      	adds	r0, #68	; 0x44
  200b62:	f04f 33ff 	mov.w	r3, #4294967295
  200b66:	f7ff bf63 	b.w	200a30 <obqWriteTimeout>
  200b6a:	bf00      	nop
  200b6c:	0000      	movs	r0, r0
	...

00200b70 <obqPutTimeout>:
                    sysinterval_t timeout) {
  200b70:	b570      	push	{r4, r5, r6, lr}
  200b72:	2320      	movs	r3, #32
  200b74:	460e      	mov	r6, r1
  200b76:	4604      	mov	r4, r0
  200b78:	f383 8811 	msr	BASEPRI, r3
  if (obqp->ptr == NULL) {
  200b7c:	6a85      	ldr	r5, [r0, #40]	; 0x28
  200b7e:	b1fd      	cbz	r5, 200bc0 <obqPutTimeout+0x50>
  *obqp->ptr = b;
  200b80:	702e      	strb	r6, [r5, #0]
  obqp->ptr++;
  200b82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
  200b84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  obqp->ptr++;
  200b86:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
  200b88:	4293      	cmp	r3, r2
  obqp->ptr++;
  200b8a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
  200b8c:	d314      	bcc.n	200bb8 <obqPutTimeout+0x48>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
  200b8e:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
  200b90:	6923      	ldr	r3, [r4, #16]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
  200b92:	3a04      	subs	r2, #4
  if (obqp->bwrptr >= obqp->btop) {
  200b94:	69a1      	ldr	r1, [r4, #24]
  *((size_t *)obqp->bwrptr) = size;
  200b96:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
  200b98:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
  200b9a:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
  200b9c:	4403      	add	r3, r0
  obqp->bcounter--;
  200b9e:	3a01      	subs	r2, #1
  if (obqp->bwrptr >= obqp->btop) {
  200ba0:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
  200ba2:	6123      	str	r3, [r4, #16]
  obqp->bcounter--;
  200ba4:	60e2      	str	r2, [r4, #12]
  if (obqp->bwrptr >= obqp->btop) {
  200ba6:	d301      	bcc.n	200bac <obqPutTimeout+0x3c>
    obqp->bwrptr = obqp->buffers;
  200ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  200baa:	6123      	str	r3, [r4, #16]
  obqp->ptr = NULL;
  200bac:	2200      	movs	r2, #0
  if (obqp->notify != NULL) {
  200bae:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->ptr = NULL;
  200bb0:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
  200bb2:	b10b      	cbz	r3, 200bb8 <obqPutTimeout+0x48>
    obqp->notify(obqp);
  200bb4:	4620      	mov	r0, r4
  200bb6:	4798      	blx	r3
  200bb8:	2000      	movs	r0, #0
  200bba:	f380 8811 	msr	BASEPRI, r0
}
  200bbe:	bd70      	pop	{r4, r5, r6, pc}
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
  200bc0:	4611      	mov	r1, r2
  200bc2:	f7ff ff0d 	bl	2009e0 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
  200bc6:	b908      	cbnz	r0, 200bcc <obqPutTimeout+0x5c>
  200bc8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  200bca:	e7d9      	b.n	200b80 <obqPutTimeout+0x10>
  200bcc:	f385 8811 	msr	BASEPRI, r5
  200bd0:	bd70      	pop	{r4, r5, r6, pc}
  200bd2:	bf00      	nop
	...

00200be0 <_putt.lto_priv.62>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
  200be0:	3044      	adds	r0, #68	; 0x44
  200be2:	f7ff bfc5 	b.w	200b70 <obqPutTimeout>
  200be6:	bf00      	nop
	...

00200bf0 <_put.lto_priv.60>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
  200bf0:	3044      	adds	r0, #68	; 0x44
  200bf2:	f04f 32ff 	mov.w	r2, #4294967295
  200bf6:	f7ff bfbb 	b.w	200b70 <obqPutTimeout>
  200bfa:	bf00      	nop
  200bfc:	0000      	movs	r0, r0
	...

00200c00 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
  200c00:	b570      	push	{r4, r5, r6, lr}
  200c02:	4604      	mov	r4, r0
  200c04:	460d      	mov	r5, r1
  queue_insert(currp, tqp);
  200c06:	4e11      	ldr	r6, [pc, #68]	; (200c4c <ibqGetFullBufferTimeoutS+0x4c>)
  200c08:	e009      	b.n	200c1e <ibqGetFullBufferTimeoutS+0x1e>
  200c0a:	69b3      	ldr	r3, [r6, #24]
  tp->queue.prev             = tqp->prev;
  200c0c:	6862      	ldr	r2, [r4, #4]
  tp->queue.next             = (thread_t *)tqp;
  200c0e:	601c      	str	r4, [r3, #0]
  tp->queue.prev             = tqp->prev;
  200c10:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
  200c12:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
  200c14:	6063      	str	r3, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  200c16:	f7ff fe53 	bl	2008c0 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
  200c1a:	2800      	cmp	r0, #0
  200c1c:	db09      	blt.n	200c32 <ibqGetFullBufferTimeoutS+0x32>
  while (ibqIsEmptyI(ibqp)) {
  200c1e:	68e3      	ldr	r3, [r4, #12]
  200c20:	4629      	mov	r1, r5
  200c22:	2004      	movs	r0, #4
  200c24:	b933      	cbnz	r3, 200c34 <ibqGetFullBufferTimeoutS+0x34>
    if (ibqp->suspended) {
  200c26:	7a23      	ldrb	r3, [r4, #8]
  200c28:	b963      	cbnz	r3, 200c44 <ibqGetFullBufferTimeoutS+0x44>
  if (TIME_IMMEDIATE == timeout) {
  200c2a:	2d00      	cmp	r5, #0
  200c2c:	d1ed      	bne.n	200c0a <ibqGetFullBufferTimeoutS+0xa>
    return MSG_TIMEOUT;
  200c2e:	f04f 30ff 	mov.w	r0, #4294967295
}
  200c32:	bd70      	pop	{r4, r5, r6, pc}
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
  200c34:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
  200c36:	2000      	movs	r0, #0
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
  200c38:	1d1a      	adds	r2, r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
  200c3a:	681b      	ldr	r3, [r3, #0]
  200c3c:	4413      	add	r3, r2
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
  200c3e:	62a2      	str	r2, [r4, #40]	; 0x28
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
  200c40:	62e3      	str	r3, [r4, #44]	; 0x2c
  200c42:	bd70      	pop	{r4, r5, r6, pc}
      return MSG_RESET;
  200c44:	f06f 0001 	mvn.w	r0, #1
  200c48:	bd70      	pop	{r4, r5, r6, pc}
  200c4a:	bf00      	nop
  200c4c:	20001248 	.word	0x20001248

00200c50 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
  200c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  200c54:	4698      	mov	r8, r3
  200c56:	b083      	sub	sp, #12
  200c58:	4604      	mov	r4, r0
  200c5a:	460d      	mov	r5, r1
  200c5c:	4616      	mov	r6, r2
  200c5e:	2320      	movs	r3, #32
  200c60:	f383 8811 	msr	BASEPRI, r3
  200c64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  size_t r = 0;
  200c68:	f04f 0a00 	mov.w	sl, #0
    if (ibqp->ptr == NULL) {
  200c6c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200c6e:	f108 39ff 	add.w	r9, r8, #4294967295
  200c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  ibqp->ptr = NULL;
  200c74:	4657      	mov	r7, sl
  200c76:	9301      	str	r3, [sp, #4]
  return systime + (systime_t)interval;
  200c78:	eb08 0302 	add.w	r3, r8, r2
  200c7c:	9300      	str	r3, [sp, #0]
    if (ibqp->ptr == NULL) {
  200c7e:	2900      	cmp	r1, #0
  200c80:	d044      	beq.n	200d0c <ibqReadTimeout+0xbc>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
  200c82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (size > (n - r)) {
  200c84:	eba6 0b0a 	sub.w	fp, r6, sl
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
  200c88:	1a5b      	subs	r3, r3, r1
  200c8a:	459b      	cmp	fp, r3
  200c8c:	bf28      	it	cs
  200c8e:	469b      	movcs	fp, r3
    if (size > 64U) {
  200c90:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
  200c94:	d94a      	bls.n	200d2c <ibqReadTimeout+0xdc>
      memcpy(bp, ibqp->ptr, 64U);
  200c96:	462b      	mov	r3, r5
  200c98:	f101 0240 	add.w	r2, r1, #64	; 0x40
  200c9c:	f8d1 b000 	ldr.w	fp, [r1]
  200ca0:	3110      	adds	r1, #16
  200ca2:	f851 cc0c 	ldr.w	ip, [r1, #-12]
  200ca6:	3310      	adds	r3, #16
  200ca8:	f851 ec08 	ldr.w	lr, [r1, #-8]
  200cac:	f851 0c04 	ldr.w	r0, [r1, #-4]
  200cb0:	4291      	cmp	r1, r2
  200cb2:	f843 bc10 	str.w	fp, [r3, #-16]
  200cb6:	f843 cc0c 	str.w	ip, [r3, #-12]
  200cba:	f843 ec08 	str.w	lr, [r3, #-8]
  200cbe:	f843 0c04 	str.w	r0, [r3, #-4]
  200cc2:	d1eb      	bne.n	200c9c <ibqReadTimeout+0x4c>
      ibqp->ptr += 64U;
  200cc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      bp        += 64U;
  200cc6:	3540      	adds	r5, #64	; 0x40
      r         += 64U;
  200cc8:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
      ibqp->ptr += 64U;
  200ccc:	3340      	adds	r3, #64	; 0x40
  200cce:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
  200cd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  200cd2:	429a      	cmp	r2, r3
  200cd4:	d810      	bhi.n	200cf8 <ibqReadTimeout+0xa8>
  ibqp->brdptr += ibqp->bsize;
  200cd6:	6963      	ldr	r3, [r4, #20]
  200cd8:	69e1      	ldr	r1, [r4, #28]
  ibqp->bcounter--;
  200cda:	68e0      	ldr	r0, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
  200cdc:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
  200cde:	69a2      	ldr	r2, [r4, #24]
  ibqp->bcounter--;
  200ce0:	3801      	subs	r0, #1
  if (ibqp->brdptr >= ibqp->btop) {
  200ce2:	4293      	cmp	r3, r2
  ibqp->brdptr += ibqp->bsize;
  200ce4:	6163      	str	r3, [r4, #20]
  ibqp->bcounter--;
  200ce6:	60e0      	str	r0, [r4, #12]
  if (ibqp->brdptr >= ibqp->btop) {
  200ce8:	d301      	bcc.n	200cee <ibqReadTimeout+0x9e>
    ibqp->brdptr = ibqp->buffers;
  200cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
  200cec:	6163      	str	r3, [r4, #20]
  if (ibqp->notify != NULL) {
  200cee:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->ptr = NULL;
  200cf0:	62a7      	str	r7, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
  200cf2:	b10b      	cbz	r3, 200cf8 <ibqReadTimeout+0xa8>
    ibqp->notify(ibqp);
  200cf4:	4620      	mov	r0, r4
  200cf6:	4798      	blx	r3
  200cf8:	f387 8811 	msr	BASEPRI, r7
    if (r >= n) {
  200cfc:	45b2      	cmp	sl, r6
  200cfe:	d228      	bcs.n	200d52 <ibqReadTimeout+0x102>
  200d00:	2320      	movs	r3, #32
  200d02:	f383 8811 	msr	BASEPRI, r3
    if (ibqp->ptr == NULL) {
  200d06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  200d08:	2900      	cmp	r1, #0
  200d0a:	d1ba      	bne.n	200c82 <ibqReadTimeout+0x32>
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
  200d0c:	f119 0f03 	cmn.w	r9, #3
  200d10:	d816      	bhi.n	200d40 <ibqReadTimeout+0xf0>
  200d12:	9b01      	ldr	r3, [sp, #4]
  return (sysinterval_t)((systime_t)(end - start));
  200d14:	9a00      	ldr	r2, [sp, #0]
  200d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  200d18:	1ad3      	subs	r3, r2, r3
        if (next_timeout > timeout) {
  200d1a:	4598      	cmp	r8, r3
  200d1c:	d31d      	bcc.n	200d5a <ibqReadTimeout+0x10a>
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
  200d1e:	4619      	mov	r1, r3
  200d20:	4620      	mov	r0, r4
  200d22:	f7ff ff6d 	bl	200c00 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
  200d26:	b988      	cbnz	r0, 200d4c <ibqReadTimeout+0xfc>
  200d28:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  200d2a:	e7aa      	b.n	200c82 <ibqReadTimeout+0x32>
      memcpy(bp, ibqp->ptr, size);
  200d2c:	4628      	mov	r0, r5
  200d2e:	465a      	mov	r2, fp
  200d30:	f002 feca 	bl	203ac8 <memcpy>
      ibqp->ptr += size;
  200d34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      r         += size;
  200d36:	44da      	add	sl, fp
      bp        += size;
  200d38:	445d      	add	r5, fp
      ibqp->ptr += size;
  200d3a:	445b      	add	r3, fp
  200d3c:	62a3      	str	r3, [r4, #40]	; 0x28
  200d3e:	e7c7      	b.n	200cd0 <ibqReadTimeout+0x80>
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
  200d40:	4641      	mov	r1, r8
  200d42:	4620      	mov	r0, r4
  200d44:	f7ff ff5c 	bl	200c00 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
  200d48:	2800      	cmp	r0, #0
  200d4a:	d0ed      	beq.n	200d28 <ibqReadTimeout+0xd8>
  200d4c:	2300      	movs	r3, #0
  200d4e:	f383 8811 	msr	BASEPRI, r3
}
  200d52:	4650      	mov	r0, sl
  200d54:	b003      	add	sp, #12
  200d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  200d5a:	f381 8811 	msr	BASEPRI, r1
  200d5e:	e7f8      	b.n	200d52 <ibqReadTimeout+0x102>

00200d60 <_readt.lto_priv.65>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
  200d60:	300c      	adds	r0, #12
  200d62:	f7ff bf75 	b.w	200c50 <ibqReadTimeout>
  200d66:	bf00      	nop
	...

00200d70 <_read.lto_priv.59>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
  200d70:	300c      	adds	r0, #12
  200d72:	f04f 33ff 	mov.w	r3, #4294967295
  200d76:	f7ff bf6b 	b.w	200c50 <ibqReadTimeout>
  200d7a:	bf00      	nop
  200d7c:	0000      	movs	r0, r0
	...

00200d80 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
  200d80:	b530      	push	{r4, r5, lr}
  200d82:	2320      	movs	r3, #32
  200d84:	b083      	sub	sp, #12
  200d86:	4604      	mov	r4, r0
  200d88:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr == NULL) {
  200d8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  200d8e:	b1eb      	cbz	r3, 200dcc <ibqGetTimeout+0x4c>
  msg = (msg_t)*ibqp->ptr;
  200d90:	f813 5b01 	ldrb.w	r5, [r3], #1
  if (ibqp->ptr >= ibqp->top) {
  200d94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  ibqp->ptr++;
  200d96:	62a3      	str	r3, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
  200d98:	4293      	cmp	r3, r2
  200d9a:	d311      	bcc.n	200dc0 <ibqGetTimeout+0x40>
  ibqp->brdptr += ibqp->bsize;
  200d9c:	6963      	ldr	r3, [r4, #20]
  200d9e:	69e0      	ldr	r0, [r4, #28]
  ibqp->bcounter--;
  200da0:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
  200da2:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
  200da4:	69a1      	ldr	r1, [r4, #24]
  ibqp->bcounter--;
  200da6:	3a01      	subs	r2, #1
  if (ibqp->brdptr >= ibqp->btop) {
  200da8:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
  200daa:	6163      	str	r3, [r4, #20]
  ibqp->bcounter--;
  200dac:	60e2      	str	r2, [r4, #12]
  if (ibqp->brdptr >= ibqp->btop) {
  200dae:	d301      	bcc.n	200db4 <ibqGetTimeout+0x34>
    ibqp->brdptr = ibqp->buffers;
  200db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  200db2:	6163      	str	r3, [r4, #20]
  ibqp->ptr = NULL;
  200db4:	2200      	movs	r2, #0
  if (ibqp->notify != NULL) {
  200db6:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->ptr = NULL;
  200db8:	62a2      	str	r2, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
  200dba:	b10b      	cbz	r3, 200dc0 <ibqGetTimeout+0x40>
    ibqp->notify(ibqp);
  200dbc:	4620      	mov	r0, r4
  200dbe:	4798      	blx	r3
  200dc0:	2300      	movs	r3, #0
  200dc2:	f383 8811 	msr	BASEPRI, r3
}
  200dc6:	4628      	mov	r0, r5
  200dc8:	b003      	add	sp, #12
  200dca:	bd30      	pop	{r4, r5, pc}
  200dcc:	9301      	str	r3, [sp, #4]
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
  200dce:	f7ff ff17 	bl	200c00 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
  200dd2:	9b01      	ldr	r3, [sp, #4]
  200dd4:	4605      	mov	r5, r0
  200dd6:	2800      	cmp	r0, #0
  200dd8:	d1f3      	bne.n	200dc2 <ibqGetTimeout+0x42>
  200dda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  200ddc:	e7d8      	b.n	200d90 <ibqGetTimeout+0x10>
  200dde:	bf00      	nop

00200de0 <_gett.lto_priv.63>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
  200de0:	300c      	adds	r0, #12
  200de2:	f7ff bfcd 	b.w	200d80 <ibqGetTimeout>
  200de6:	bf00      	nop
	...

00200df0 <_get.lto_priv.61>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
  200df0:	300c      	adds	r0, #12
  200df2:	f04f 31ff 	mov.w	r1, #4294967295
  200df6:	f7ff bfc3 	b.w	200d80 <ibqGetTimeout>
  200dfa:	bf00      	nop
  200dfc:	0000      	movs	r0, r0
	...

00200e00 <usbStartTransmitI>:
                       const uint8_t *buf, size_t n) {
  200e00:	b5f0      	push	{r4, r5, r6, r7, lr}
  isp = usbp->epc[ep]->in_state;
  200e02:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200e06:	2401      	movs	r4, #1
  200e08:	f8b0 e008 	ldrh.w	lr, [r0, #8]
  isp->txcnt  = 0;
  200e0c:	2700      	movs	r7, #0
  isp = usbp->epc[ep]->in_state;
  200e0e:	f8dc 500c 	ldr.w	r5, [ip, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200e12:	408c      	lsls	r4, r1
  isp = usbp->epc[ep]->in_state;
  200e14:	696d      	ldr	r5, [r5, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200e16:	ea44 040e 	orr.w	r4, r4, lr
  200e1a:	8104      	strh	r4, [r0, #8]
  isp->txbuf  = buf;
  200e1c:	60aa      	str	r2, [r5, #8]
  isp->txcnt  = 0;
  200e1e:	e885 0088 	stmia.w	r5, {r3, r7}
}
  200e22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  usb_lld_start_in(usbp, ep);
  200e26:	f001 b863 	b.w	201ef0 <usb_lld_start_in>
  200e2a:	bf00      	nop
  200e2c:	0000      	movs	r0, r0
	...

00200e30 <sdu_start_receive.lto_priv.70>:
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
  200e30:	f8d0 148c 	ldr.w	r1, [r0, #1164]	; 0x48c
  200e34:	680a      	ldr	r2, [r1, #0]
static bool sdu_start_receive(SerialUSBDriver *sdup) {
  200e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
  200e38:	7813      	ldrb	r3, [r2, #0]
  200e3a:	2b04      	cmp	r3, #4
  200e3c:	d001      	beq.n	200e42 <sdu_start_receive.lto_priv.70+0x12>
    return true;
  200e3e:	2001      	movs	r0, #1
  200e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
  200e42:	7a03      	ldrb	r3, [r0, #8]
  200e44:	2b02      	cmp	r3, #2
  200e46:	d1fa      	bne.n	200e3e <sdu_start_receive.lto_priv.70+0xe>
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
  200e48:	790c      	ldrb	r4, [r1, #4]
  200e4a:	2301      	movs	r3, #1
  200e4c:	8955      	ldrh	r5, [r2, #10]
  200e4e:	fa03 f404 	lsl.w	r4, r3, r4
  200e52:	4225      	tst	r5, r4
  200e54:	d1f3      	bne.n	200e3e <sdu_start_receive.lto_priv.70+0xe>
  if (ibqIsFullI(ibqp)) {
  200e56:	69c4      	ldr	r4, [r0, #28]
  200e58:	6a06      	ldr	r6, [r0, #32]
  200e5a:	42b4      	cmp	r4, r6
  200e5c:	d015      	beq.n	200e8a <sdu_start_receive.lto_priv.70+0x5a>
  if (buf == NULL) {
  200e5e:	1d23      	adds	r3, r4, #4
  200e60:	d0ed      	beq.n	200e3e <sdu_start_receive.lto_priv.70+0xe>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
  200e62:	7949      	ldrb	r1, [r1, #5]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200e64:	2001      	movs	r0, #1
  osp->rxcnt  = 0;
  200e66:	2400      	movs	r4, #0
  osp->rxsize = n;
  200e68:	f44f 7780 	mov.w	r7, #256	; 0x100
  osp = usbp->epc[ep]->out_state;
  200e6c:	eb02 0681 	add.w	r6, r2, r1, lsl #2
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200e70:	4088      	lsls	r0, r1
  osp = usbp->epc[ep]->out_state;
  200e72:	68f6      	ldr	r6, [r6, #12]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200e74:	4305      	orrs	r5, r0
  usb_lld_start_out(usbp, ep);
  200e76:	4610      	mov	r0, r2
  osp = usbp->epc[ep]->out_state;
  200e78:	69b6      	ldr	r6, [r6, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  200e7a:	8155      	strh	r5, [r2, #10]
  osp->rxbuf  = buf;
  200e7c:	60b3      	str	r3, [r6, #8]
  osp->rxsize = n;
  200e7e:	6037      	str	r7, [r6, #0]
  osp->rxcnt  = 0;
  200e80:	6074      	str	r4, [r6, #4]
  usb_lld_start_out(usbp, ep);
  200e82:	f001 f88d 	bl	201fa0 <usb_lld_start_out>
  return false;
  200e86:	4620      	mov	r0, r4
  200e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  200e8a:	6980      	ldr	r0, [r0, #24]
  200e8c:	2800      	cmp	r0, #0
  200e8e:	d1d6      	bne.n	200e3e <sdu_start_receive.lto_priv.70+0xe>
  200e90:	e7e5      	b.n	200e5e <sdu_start_receive.lto_priv.70+0x2e>
  200e92:	bf00      	nop
	...

00200ea0 <ibnotify.lto_priv.50>:
  (void) sdu_start_receive(sdup);
  200ea0:	6b40      	ldr	r0, [r0, #52]	; 0x34
  200ea2:	f7ff bfc5 	b.w	200e30 <sdu_start_receive.lto_priv.70>
  200ea6:	bf00      	nop
	...

00200eb0 <obqGetFullBufferI>:
  if (obqIsEmptyI(obqp)) {
  200eb0:	6943      	ldr	r3, [r0, #20]
  200eb2:	6902      	ldr	r2, [r0, #16]
  200eb4:	429a      	cmp	r2, r3
  200eb6:	d004      	beq.n	200ec2 <obqGetFullBufferI+0x12>
  *sizep = *((size_t *)obqp->brdptr);
  200eb8:	4618      	mov	r0, r3
  200eba:	f850 3b04 	ldr.w	r3, [r0], #4
  200ebe:	600b      	str	r3, [r1, #0]
}
  200ec0:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
  200ec2:	68c2      	ldr	r2, [r0, #12]
  200ec4:	2a00      	cmp	r2, #0
  200ec6:	d0f7      	beq.n	200eb8 <obqGetFullBufferI+0x8>
    return NULL;
  200ec8:	2000      	movs	r0, #0
  200eca:	4770      	bx	lr
  200ecc:	0000      	movs	r0, r0
	...

00200ed0 <obnotify.lto_priv.51>:
static void obnotify(io_buffers_queue_t *bqp) {
  200ed0:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
  200ed2:	6b44      	ldr	r4, [r0, #52]	; 0x34
static void obnotify(io_buffers_queue_t *bqp) {
  200ed4:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
  200ed6:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
  200eda:	6813      	ldr	r3, [r2, #0]
  200edc:	7819      	ldrb	r1, [r3, #0]
  200ede:	2904      	cmp	r1, #4
  200ee0:	d001      	beq.n	200ee6 <obnotify.lto_priv.51+0x16>
}
  200ee2:	b002      	add	sp, #8
  200ee4:	bd10      	pop	{r4, pc}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
  200ee6:	7a21      	ldrb	r1, [r4, #8]
  200ee8:	2902      	cmp	r1, #2
  200eea:	d1fa      	bne.n	200ee2 <obnotify.lto_priv.51+0x12>
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
  200eec:	7910      	ldrb	r0, [r2, #4]
  200eee:	2201      	movs	r2, #1
  200ef0:	8919      	ldrh	r1, [r3, #8]
  200ef2:	fa02 f300 	lsl.w	r3, r2, r0
  200ef6:	420b      	tst	r3, r1
  200ef8:	d1f3      	bne.n	200ee2 <obnotify.lto_priv.51+0x12>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
  200efa:	a901      	add	r1, sp, #4
  200efc:	f104 0044 	add.w	r0, r4, #68	; 0x44
  200f00:	f7ff ffd6 	bl	200eb0 <obqGetFullBufferI>
    if (buf != NULL) {
  200f04:	2800      	cmp	r0, #0
  200f06:	d0ec      	beq.n	200ee2 <obnotify.lto_priv.51+0x12>
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  200f08:	f8d4 448c 	ldr.w	r4, [r4, #1164]	; 0x48c
  200f0c:	4602      	mov	r2, r0
  200f0e:	9b01      	ldr	r3, [sp, #4]
  200f10:	7921      	ldrb	r1, [r4, #4]
  200f12:	6820      	ldr	r0, [r4, #0]
  200f14:	f7ff ff74 	bl	200e00 <usbStartTransmitI>
  200f18:	e7e3      	b.n	200ee2 <obnotify.lto_priv.51+0x12>
  200f1a:	bf00      	nop
  200f1c:	0000      	movs	r0, r0
	...

00200f20 <_port_irq_epilogue>:
  200f20:	2320      	movs	r3, #32
  200f22:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  200f26:	4b0f      	ldr	r3, [pc, #60]	; (200f64 <_port_irq_epilogue+0x44>)
  200f28:	685b      	ldr	r3, [r3, #4]
  200f2a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
  200f2e:	d102      	bne.n	200f36 <_port_irq_epilogue+0x16>
  200f30:	f383 8811 	msr	BASEPRI, r3
  200f34:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  200f36:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
  200f3a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    ctxp--;
  200f3e:	f1a3 0220 	sub.w	r2, r3, #32
    ctxp->xpsr = (regarm_t)0x01000000;
  200f42:	f843 1c04 	str.w	r1, [r3, #-4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
  200f46:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
  200f4a:	4a07      	ldr	r2, [pc, #28]	; (200f68 <_port_irq_epilogue+0x48>)
  200f4c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
  200f4e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  200f50:	6889      	ldr	r1, [r1, #8]
  200f52:	6892      	ldr	r2, [r2, #8]
  200f54:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
  200f56:	bf8c      	ite	hi
  200f58:	4a04      	ldrhi	r2, [pc, #16]	; (200f6c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
  200f5a:	4a05      	ldrls	r2, [pc, #20]	; (200f70 <_port_irq_epilogue+0x50>)
  200f5c:	f843 2c08 	str.w	r2, [r3, #-8]
  200f60:	4770      	bx	lr
  200f62:	bf00      	nop
  200f64:	e000ed00 	.word	0xe000ed00
  200f68:	20001248 	.word	0x20001248
  200f6c:	00200301 	.word	0x00200301
  200f70:	00200304 	.word	0x00200304
	...

00200f80 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  200f80:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
  200f84:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
  200f86:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  200f8a:	2300      	movs	r3, #0
  200f8c:	f383 8811 	msr	BASEPRI, r3
  200f90:	4770      	bx	lr
  200f92:	bf00      	nop
	...

00200fa0 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  200fa0:	4b0e      	ldr	r3, [pc, #56]	; (200fdc <chTMStopMeasurementX+0x3c>)
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  200fa2:	6882      	ldr	r2, [r0, #8]
  200fa4:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  200fa6:	490e      	ldr	r1, [pc, #56]	; (200fe0 <chTMStopMeasurementX+0x40>)
  tmp->last = (now - tmp->last) - offset;
  200fa8:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
  200faa:	6842      	ldr	r2, [r0, #4]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  200fac:	b430      	push	{r4, r5}
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
  200fae:	6f4c      	ldr	r4, [r1, #116]	; 0x74
  tmp->n++;
  200fb0:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  200fb2:	1b1b      	subs	r3, r3, r4
  tmp->n++;
  200fb4:	3101      	adds	r1, #1
  tmp->last = (now - tmp->last) - offset;
  200fb6:	6083      	str	r3, [r0, #8]
  tmp->n++;
  200fb8:	60c1      	str	r1, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
  200fba:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  200fbe:	18e4      	adds	r4, r4, r3
  200fc0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
  200fc4:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
  200fc6:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
  200fc8:	bf88      	it	hi
  200fca:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
  200fcc:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
  200fce:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
  200fd2:	bf38      	it	cc
  200fd4:	6003      	strcc	r3, [r0, #0]
}
  200fd6:	bc30      	pop	{r4, r5}
  200fd8:	4770      	bx	lr
  200fda:	bf00      	nop
  200fdc:	e0001000 	.word	0xe0001000
  200fe0:	20001248 	.word	0x20001248
	...

00200ff0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
  200ff0:	b508      	push	{r3, lr}
  200ff2:	4601      	mov	r1, r0
  200ff4:	2320      	movs	r3, #32
  200ff6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
  200ffa:	2008      	movs	r0, #8
  200ffc:	f7ff fc60 	bl	2008c0 <chSchGoSleepTimeoutS>
  201000:	2300      	movs	r3, #0
  201002:	f383 8811 	msr	BASEPRI, r3
  201006:	bd08      	pop	{r3, pc}
	...

00201010 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
  201010:	4a0e      	ldr	r2, [pc, #56]	; (20104c <chSchDoReschedule+0x3c>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
  201012:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
  201014:	6810      	ldr	r0, [r2, #0]
void chSchDoReschedule(void) {
  201016:	b430      	push	{r4, r5}
  tqp->next             = tp->queue.next;
  201018:	6803      	ldr	r3, [r0, #0]
  tp->state = CH_STATE_READY;
  20101a:	2500      	movs	r5, #0
  thread_t *otp = currp;
  20101c:	6994      	ldr	r4, [r2, #24]
  20101e:	6013      	str	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201020:	605a      	str	r2, [r3, #4]
  currp->state = CH_STATE_CURRENT;
  201022:	f880 1020 	strb.w	r1, [r0, #32]
  tp->state = CH_STATE_READY;
  201026:	f884 5020 	strb.w	r5, [r4, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
  20102a:	68a1      	ldr	r1, [r4, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
  20102c:	6190      	str	r0, [r2, #24]
  20102e:	e000      	b.n	201032 <chSchDoReschedule+0x22>
  201030:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
  201032:	689a      	ldr	r2, [r3, #8]
  201034:	4291      	cmp	r1, r2
  201036:	d3fb      	bcc.n	201030 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
  201038:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
  20103a:	4621      	mov	r1, r4
  tp->queue.next             = cp;
  20103c:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20103e:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  201040:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201042:	605c      	str	r4, [r3, #4]
}
  201044:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
  201046:	f7ff b94b 	b.w	2002e0 <_port_switch>
  20104a:	bf00      	nop
  20104c:	20001248 	.word	0x20001248

00201050 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
  201050:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
  201052:	2200      	movs	r2, #0
thread_t *chSchReadyI(thread_t *tp) {
  201054:	4604      	mov	r4, r0
  cp = (thread_t *)&ch.rlist.queue;
  201056:	4b08      	ldr	r3, [pc, #32]	; (201078 <chSchReadyI+0x28>)
  201058:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
  20105a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
  20105e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  201060:	689a      	ldr	r2, [r3, #8]
  201062:	428a      	cmp	r2, r1
  201064:	d2fb      	bcs.n	20105e <chSchReadyI+0xe>
  tp->queue.prev             = cp->queue.prev;
  201066:	685a      	ldr	r2, [r3, #4]
}
  201068:	4620      	mov	r0, r4
  tp->queue.next             = cp;
  20106a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  20106c:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  20106e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  201070:	605c      	str	r4, [r3, #4]
}
  201072:	bc10      	pop	{r4}
  201074:	4770      	bx	lr
  201076:	bf00      	nop
  201078:	20001248 	.word	0x20001248
  20107c:	00000000 	.word	0x00000000

00201080 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  201080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  201082:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  201084:	42a0      	cmp	r0, r4
  201086:	d022      	beq.n	2010ce <chEvtBroadcastFlagsI+0x4e>
  201088:	460d      	mov	r5, r1
  20108a:	4607      	mov	r7, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
  20108c:	2600      	movs	r6, #0
  20108e:	e002      	b.n	201096 <chEvtBroadcastFlagsI+0x16>
    elp = elp->next;
  201090:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  201092:	42a7      	cmp	r7, r4
  201094:	d01b      	beq.n	2010ce <chEvtBroadcastFlagsI+0x4e>
    elp->flags |= flags;
  201096:	68e3      	ldr	r3, [r4, #12]
  201098:	432b      	orrs	r3, r5
  20109a:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
  20109c:	b115      	cbz	r5, 2010a4 <chEvtBroadcastFlagsI+0x24>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
  20109e:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
  2010a0:	4213      	tst	r3, r2
  2010a2:	d0f5      	beq.n	201090 <chEvtBroadcastFlagsI+0x10>
      chEvtSignalI(elp->listener, elp->events);
  2010a4:	6860      	ldr	r0, [r4, #4]
  tp->epending |= events;
  2010a6:	68a3      	ldr	r3, [r4, #8]
  2010a8:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2010aa:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
  2010ae:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
  2010b0:	2a0a      	cmp	r2, #10
  tp->epending |= events;
  2010b2:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
  2010b4:	d00c      	beq.n	2010d0 <chEvtBroadcastFlagsI+0x50>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2010b6:	2a0b      	cmp	r2, #11
  2010b8:	d1ea      	bne.n	201090 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  2010ba:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
  2010bc:	ea32 0303 	bics.w	r3, r2, r3
  2010c0:	d1e6      	bne.n	201090 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
  2010c2:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  2010c4:	f7ff ffc4 	bl	201050 <chSchReadyI>
    elp = elp->next;
  2010c8:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
  2010ca:	42a7      	cmp	r7, r4
  2010cc:	d1e3      	bne.n	201096 <chEvtBroadcastFlagsI+0x16>
  2010ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2010d0:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
  2010d2:	4213      	tst	r3, r2
  2010d4:	d0dc      	beq.n	201090 <chEvtBroadcastFlagsI+0x10>
    tp->u.rdymsg = MSG_OK;
  2010d6:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
  2010d8:	f7ff ffba 	bl	201050 <chSchReadyI>
  2010dc:	e7f4      	b.n	2010c8 <chEvtBroadcastFlagsI+0x48>
  2010de:	bf00      	nop

002010e0 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
  2010e0:	310d      	adds	r1, #13
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  2010e2:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
  2010e4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
  2010e8:	2c00      	cmp	r4, #0
  2010ea:	d02f      	beq.n	20114c <sduDataReceived+0x6c>
  2010ec:	2320      	movs	r3, #32
  2010ee:	f383 8811 	msr	BASEPRI, r3
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
  2010f2:	2104      	movs	r1, #4
  ibqPostFullBufferI(&sdup->ibqueue,
  2010f4:	f104 050c 	add.w	r5, r4, #12
  2010f8:	1860      	adds	r0, r4, r1
  2010fa:	f7ff ffc1 	bl	201080 <chEvtBroadcastFlagsI>
                     usbGetReceiveTransactionSizeX(sdup->config->usbp,
  2010fe:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
  *((size_t *)ibqp->bwrptr) = size;
  201102:	69e3      	ldr	r3, [r4, #28]
  201104:	7948      	ldrb	r0, [r1, #5]
  201106:	680a      	ldr	r2, [r1, #0]
  if (ibqp->bwrptr >= ibqp->btop) {
  201108:	6a61      	ldr	r1, [r4, #36]	; 0x24
  20110a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
  20110e:	68d2      	ldr	r2, [r2, #12]
  ibqPostFullBufferI(&sdup->ibqueue,
  201110:	6992      	ldr	r2, [r2, #24]
  201112:	6852      	ldr	r2, [r2, #4]
  *((size_t *)ibqp->bwrptr) = size;
  201114:	601a      	str	r2, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
  201116:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  ibqp->bcounter++;
  201118:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
  20111a:	4403      	add	r3, r0
  ibqp->bcounter++;
  20111c:	3201      	adds	r2, #1
  if (ibqp->bwrptr >= ibqp->btop) {
  20111e:	428b      	cmp	r3, r1
  ibqp->bwrptr += ibqp->bsize;
  201120:	61e3      	str	r3, [r4, #28]
  ibqp->bcounter++;
  201122:	61a2      	str	r2, [r4, #24]
  if (ibqp->bwrptr >= ibqp->btop) {
  201124:	d301      	bcc.n	20112a <sduDataReceived+0x4a>
    ibqp->bwrptr = ibqp->buffers;
  201126:	6b23      	ldr	r3, [r4, #48]	; 0x30
  201128:	61e3      	str	r3, [r4, #28]
  return (bool)(tqp->next != (const thread_t *)tqp);
  20112a:	68e3      	ldr	r3, [r4, #12]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
  20112c:	429d      	cmp	r5, r3
  20112e:	d007      	beq.n	201140 <sduDataReceived+0x60>
  tqp->next             = tp->queue.next;
  201130:	681a      	ldr	r2, [r3, #0]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
  201132:	2100      	movs	r1, #0
  (void) chSchReadyI(tp);
  201134:	4618      	mov	r0, r3
  201136:	60e2      	str	r2, [r4, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
  201138:	6055      	str	r5, [r2, #4]
  tp->u.rdymsg = msg;
  20113a:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  20113c:	f7ff ff88 	bl	201050 <chSchReadyI>
  (void) sdu_start_receive(sdup);
  201140:	4620      	mov	r0, r4
  201142:	f7ff fe75 	bl	200e30 <sdu_start_receive.lto_priv.70>
  201146:	2300      	movs	r3, #0
  201148:	f383 8811 	msr	BASEPRI, r3
  20114c:	bd38      	pop	{r3, r4, r5, pc}
  20114e:	bf00      	nop

00201150 <sduDataTransmitted>:
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
  201150:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
  201154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
  201158:	6a1c      	ldr	r4, [r3, #32]
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
  20115a:	b082      	sub	sp, #8
  if (sdup == NULL) {
  20115c:	b1fc      	cbz	r4, 20119e <sduDataTransmitted+0x4e>
  20115e:	460e      	mov	r6, r1
  201160:	4605      	mov	r5, r0
  201162:	2320      	movs	r3, #32
  201164:	f383 8811 	msr	BASEPRI, r3
  201168:	eb00 0881 	add.w	r8, r0, r1, lsl #2
  20116c:	1d20      	adds	r0, r4, #4
  20116e:	2108      	movs	r1, #8
  201170:	f7ff ff86 	bl	201080 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
  201174:	f8d8 300c 	ldr.w	r3, [r8, #12]
  201178:	695b      	ldr	r3, [r3, #20]
  20117a:	681b      	ldr	r3, [r3, #0]
  20117c:	b993      	cbnz	r3, 2011a4 <sduDataTransmitted+0x54>
  20117e:	f104 0744 	add.w	r7, r4, #68	; 0x44
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
  201182:	4638      	mov	r0, r7
  201184:	a901      	add	r1, sp, #4
  201186:	f7ff fe93 	bl	200eb0 <obqGetFullBufferI>
  if (buf != NULL) {
  20118a:	b350      	cbz	r0, 2011e2 <sduDataTransmitted+0x92>
    usbStartTransmitI(usbp, ep, buf, n);
  20118c:	4602      	mov	r2, r0
  20118e:	4631      	mov	r1, r6
  201190:	4628      	mov	r0, r5
  201192:	9b01      	ldr	r3, [sp, #4]
  201194:	f7ff fe34 	bl	200e00 <usbStartTransmitI>
  201198:	2300      	movs	r3, #0
  20119a:	f383 8811 	msr	BASEPRI, r3
}
  20119e:	b002      	add	sp, #8
  2011a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  obqp->brdptr += obqp->bsize;
  2011a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
    obqReleaseEmptyBufferI(&sdup->obqueue);
  2011a6:	f104 0744 	add.w	r7, r4, #68	; 0x44
  2011aa:	6e21      	ldr	r1, [r4, #96]	; 0x60
  obqp->bcounter++;
  2011ac:	6d22      	ldr	r2, [r4, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
  2011ae:	440b      	add	r3, r1
  if (obqp->brdptr >= obqp->btop) {
  2011b0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  obqp->bcounter++;
  2011b2:	3201      	adds	r2, #1
  if (obqp->brdptr >= obqp->btop) {
  2011b4:	428b      	cmp	r3, r1
  obqp->brdptr += obqp->bsize;
  2011b6:	65a3      	str	r3, [r4, #88]	; 0x58
  obqp->bcounter++;
  2011b8:	6522      	str	r2, [r4, #80]	; 0x50
  if (obqp->brdptr >= obqp->btop) {
  2011ba:	d301      	bcc.n	2011c0 <sduDataTransmitted+0x70>
    obqp->brdptr = obqp->buffers;
  2011bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  2011be:	65a3      	str	r3, [r4, #88]	; 0x58
  return (bool)(tqp->next != (const thread_t *)tqp);
  2011c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  2011c2:	429f      	cmp	r7, r3
  2011c4:	d0dd      	beq.n	201182 <sduDataTransmitted+0x32>
  tqp->next             = tp->queue.next;
  2011c6:	681a      	ldr	r2, [r3, #0]
  tp->u.rdymsg = msg;
  2011c8:	2100      	movs	r1, #0
  (void) chSchReadyI(tp);
  2011ca:	4618      	mov	r0, r3
  2011cc:	6462      	str	r2, [r4, #68]	; 0x44
  tqp->next->queue.prev = (thread_t *)tqp;
  2011ce:	6057      	str	r7, [r2, #4]
  tp->u.rdymsg = msg;
  2011d0:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  2011d2:	f7ff ff3d 	bl	201050 <chSchReadyI>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
  2011d6:	4638      	mov	r0, r7
  2011d8:	a901      	add	r1, sp, #4
  2011da:	f7ff fe69 	bl	200eb0 <obqGetFullBufferI>
  if (buf != NULL) {
  2011de:	2800      	cmp	r0, #0
  2011e0:	d1d4      	bne.n	20118c <sduDataTransmitted+0x3c>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
  2011e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
  2011e6:	695a      	ldr	r2, [r3, #20]
  2011e8:	6812      	ldr	r2, [r2, #0]
  2011ea:	2a00      	cmp	r2, #0
  2011ec:	d0d4      	beq.n	201198 <sduDataTransmitted+0x48>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
  2011ee:	8a1b      	ldrh	r3, [r3, #16]
  2011f0:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
  2011f2:	4013      	ands	r3, r2
  2011f4:	d1d0      	bne.n	201198 <sduDataTransmitted+0x48>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
  2011f6:	4631      	mov	r1, r6
  2011f8:	f105 025c 	add.w	r2, r5, #92	; 0x5c
  2011fc:	4628      	mov	r0, r5
  2011fe:	f7ff fdff 	bl	200e00 <usbStartTransmitI>
  201202:	e7c9      	b.n	201198 <sduDataTransmitted+0x48>
	...

00201210 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
  201210:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
  201212:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
  201214:	4298      	cmp	r0, r3
  201216:	d00b      	beq.n	201230 <chThdDequeueAllI+0x20>
  201218:	4604      	mov	r4, r0
  20121a:	460d      	mov	r5, r1
  tqp->next             = tp->queue.next;
  20121c:	681a      	ldr	r2, [r3, #0]
  20121e:	4618      	mov	r0, r3
  201220:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
  201222:	6054      	str	r4, [r2, #4]
  tp->u.rdymsg = msg;
  201224:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
  201226:	f7ff ff13 	bl	201050 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
  20122a:	6823      	ldr	r3, [r4, #0]
  20122c:	429c      	cmp	r4, r3
  20122e:	d1f5      	bne.n	20121c <chThdDequeueAllI+0xc>
  201230:	bd38      	pop	{r3, r4, r5, pc}
  201232:	bf00      	nop
	...

00201240 <chThdExit>:
void chThdExit(msg_t msg) {
  201240:	b538      	push	{r3, r4, r5, lr}
  201242:	2220      	movs	r2, #32
  201244:	4603      	mov	r3, r0
  201246:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
  20124a:	4a10      	ldr	r2, [pc, #64]	; (20128c <chThdExit+0x4c>)
  20124c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
  20124e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
  201252:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
  201254:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
  201256:	4285      	cmp	r5, r0
  201258:	d006      	beq.n	201268 <chThdExit+0x28>
  tlp->next = tp->queue.next;
  20125a:	6803      	ldr	r3, [r0, #0]
  20125c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
  20125e:	f7ff fef7 	bl	201050 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
  201262:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
  201264:	42a8      	cmp	r0, r5
  201266:	d1f8      	bne.n	20125a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
  201268:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
  20126c:	b943      	cbnz	r3, 201280 <chThdExit+0x40>
  20126e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  201272:	079b      	lsls	r3, r3, #30
  201274:	d104      	bne.n	201280 <chThdExit+0x40>
    REG_REMOVE(tp);
  201276:	6922      	ldr	r2, [r4, #16]
  201278:	6963      	ldr	r3, [r4, #20]
  20127a:	611a      	str	r2, [r3, #16]
  20127c:	6922      	ldr	r2, [r4, #16]
  20127e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
  201280:	200f      	movs	r0, #15
}
  201282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
  201286:	f7ff bb03 	b.w	200890 <chSchGoSleepS>
  20128a:	bf00      	nop
  20128c:	20001248 	.word	0x20001248

00201290 <chSysPolledDelayX>:
  201290:	4a03      	ldr	r2, [pc, #12]	; (2012a0 <chSysPolledDelayX+0x10>)
  201292:	6851      	ldr	r1, [r2, #4]
  201294:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
  201296:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
  201298:	4298      	cmp	r0, r3
  20129a:	d8fb      	bhi.n	201294 <chSysPolledDelayX+0x4>
  }
}
  20129c:	4770      	bx	lr
  20129e:	bf00      	nop
  2012a0:	e0001000 	.word	0xe0001000
	...

002012b0 <usbInitEndpointI>:
                      const USBEndpointConfig *epcp) {
  2012b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  2012b4:	fa0f f881 	sxth.w	r8, r1
  if (epcp->in_state != NULL) {
  2012b8:	6953      	ldr	r3, [r2, #20]
                      const USBEndpointConfig *epcp) {
  2012ba:	460d      	mov	r5, r1
  2012bc:	eb00 0688 	add.w	r6, r0, r8, lsl #2
  usbp->epc[ep] = epcp;
  2012c0:	60f2      	str	r2, [r6, #12]
  if (epcp->in_state != NULL) {
  2012c2:	b123      	cbz	r3, 2012ce <usbInitEndpointI+0x1e>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
  2012c4:	2100      	movs	r1, #0
  2012c6:	6019      	str	r1, [r3, #0]
  2012c8:	6059      	str	r1, [r3, #4]
  2012ca:	6099      	str	r1, [r3, #8]
  2012cc:	60d9      	str	r1, [r3, #12]
  if (epcp->out_state != NULL) {
  2012ce:	6993      	ldr	r3, [r2, #24]
  2012d0:	b123      	cbz	r3, 2012dc <usbInitEndpointI+0x2c>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
  2012d2:	2200      	movs	r2, #0
  2012d4:	601a      	str	r2, [r3, #0]
  2012d6:	605a      	str	r2, [r3, #4]
  2012d8:	609a      	str	r2, [r3, #8]
  2012da:	60da      	str	r2, [r3, #12]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
  2012dc:	68f3      	ldr	r3, [r6, #12]
  2012de:	681a      	ldr	r2, [r3, #0]
  2012e0:	f002 0203 	and.w	r2, r2, #3
  2012e4:	2a02      	cmp	r2, #2
  2012e6:	d05b      	beq.n	2013a0 <usbInitEndpointI+0xf0>
  2012e8:	2a03      	cmp	r2, #3
  2012ea:	d05b      	beq.n	2013a4 <usbInitEndpointI+0xf4>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
  2012ec:	4f4a      	ldr	r7, [pc, #296]	; (201418 <usbInitEndpointI+0x168>)
  2012ee:	494b      	ldr	r1, [pc, #300]	; (20141c <usbInitEndpointI+0x16c>)
  2012f0:	2a01      	cmp	r2, #1
  2012f2:	bf18      	it	ne
  2012f4:	460f      	movne	r7, r1
  stm32_otg_t *otgp = usbp->otg;
  2012f6:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
  otgp->oe[ep].DOEPTSIZ = 0;
  2012f8:	ea4f 1e45 	mov.w	lr, r5, lsl #5
  2012fc:	f04f 0c00 	mov.w	ip, #0
  if (usbp->epc[ep]->out_state != NULL) {
  201300:	699a      	ldr	r2, [r3, #24]
  otgp->oe[ep].DOEPTSIZ = 0;
  201302:	eb04 010e 	add.w	r1, r4, lr
  201306:	f8c1 cb10 	str.w	ip, [r1, #2832]	; 0xb10
  if (usbp->epc[ep]->out_state != NULL) {
  20130a:	2a00      	cmp	r2, #0
  20130c:	d06f      	beq.n	2013ee <usbInitEndpointI+0x13e>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
  20130e:	f8b3 c012 	ldrh.w	ip, [r3, #18]
  201312:	f105 0158 	add.w	r1, r5, #88	; 0x58
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  201316:	f105 0910 	add.w	r9, r5, #16
  20131a:	2201      	movs	r2, #1
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
  20131c:	0149      	lsls	r1, r1, #5
  20131e:	ea4c 0c07 	orr.w	ip, ip, r7
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  201322:	fa02 f209 	lsl.w	r2, r2, r9
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
  201326:	f844 c001 	str.w	ip, [r4, r1]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  20132a:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
  20132e:	430a      	orrs	r2, r1
  201330:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
  201334:	44a6      	add	lr, r4
  201336:	2100      	movs	r1, #0
  if (usbp->epc[ep]->in_state != NULL) {
  201338:	695a      	ldr	r2, [r3, #20]
  otgp->ie[ep].DIEPTSIZ = 0;
  20133a:	f8ce 1910 	str.w	r1, [lr, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
  20133e:	b39a      	cbz	r2, 2013a8 <usbInitEndpointI+0xf8>
    if (usbp->epc[ep]->in_multiplier > 1)
  201340:	8b9a      	ldrh	r2, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
  201342:	8a19      	ldrh	r1, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
  201344:	2a01      	cmp	r2, #1
  next = usbp->pmnext;
  201346:	f8d0 e074 	ldr.w	lr, [r0, #116]	; 0x74
    fsize = usbp->epc[ep]->in_maxsize / 4;
  20134a:	ea4f 0391 	mov.w	r3, r1, lsr #2
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
  20134e:	f105 013f 	add.w	r1, r5, #63	; 0x3f
      fsize *= usbp->epc[ep]->in_multiplier;
  201352:	bf88      	it	hi
  201354:	4353      	mulhi	r3, r2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
  201356:	01aa      	lsls	r2, r5, #6
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
  201358:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  usbp->pmnext += size;
  20135c:	eb03 0c0e 	add.w	ip, r3, lr
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
  201360:	f042 0220 	orr.w	r2, r2, #32
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
  201364:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
  usbp->pmnext += size;
  201368:	f8c0 c074 	str.w	ip, [r0, #116]	; 0x74
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
  20136c:	604b      	str	r3, [r1, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
  20136e:	6122      	str	r2, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
  201370:	6923      	ldr	r3, [r4, #16]
  201372:	069a      	lsls	r2, r3, #26
  201374:	d4fc      	bmi.n	201370 <usbInitEndpointI+0xc0>
  chSysPolledDelayX(cycles);
  201376:	2012      	movs	r0, #18
  201378:	f7ff ff8a 	bl	201290 <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
  20137c:	68f2      	ldr	r2, [r6, #12]
    otgp->ie[ep].DIEPCTL = ctl |
  20137e:	f105 0148 	add.w	r1, r5, #72	; 0x48
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  201382:	2301      	movs	r3, #1
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
  201384:	8a12      	ldrh	r2, [r2, #16]
    otgp->ie[ep].DIEPCTL = ctl |
  201386:	0149      	lsls	r1, r1, #5
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  201388:	40ab      	lsls	r3, r5
                           DIEPCTL_TXFNUM(ep) |
  20138a:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
  20138e:	433a      	orrs	r2, r7
    otgp->ie[ep].DIEPCTL = ctl |
  201390:	5062      	str	r2, [r4, r1]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  201392:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
  201396:	4313      	orrs	r3, r2
  201398:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
  20139c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
  2013a0:	4f1f      	ldr	r7, [pc, #124]	; (201420 <usbInitEndpointI+0x170>)
  2013a2:	e7a8      	b.n	2012f6 <usbInitEndpointI+0x46>
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
  2013a4:	4f1f      	ldr	r7, [pc, #124]	; (201424 <usbInitEndpointI+0x174>)
  2013a6:	e7a6      	b.n	2012f6 <usbInitEndpointI+0x46>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
  2013a8:	f105 023f 	add.w	r2, r5, #63	; 0x3f
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
  2013ac:	01ab      	lsls	r3, r5, #6
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
  2013ae:	491e      	ldr	r1, [pc, #120]	; (201428 <usbInitEndpointI+0x178>)
  2013b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
  2013b4:	f043 0320 	orr.w	r3, r3, #32
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
  2013b8:	6051      	str	r1, [r2, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
  2013ba:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
  2013bc:	6923      	ldr	r3, [r4, #16]
  2013be:	069b      	lsls	r3, r3, #26
  2013c0:	d4fc      	bmi.n	2013bc <usbInitEndpointI+0x10c>
  2013c2:	2012      	movs	r0, #18
  2013c4:	eb04 1848 	add.w	r8, r4, r8, lsl #5
  2013c8:	f7ff ff62 	bl	201290 <chSysPolledDelayX>
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
  2013cc:	2301      	movs	r3, #1
  2013ce:	fa03 f505 	lsl.w	r5, r3, r5
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
  2013d2:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
  2013d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
  2013da:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
  2013de:	f8d4 381c 	ldr.w	r3, [r4, #2076]	; 0x81c
  2013e2:	ea23 0305 	bic.w	r3, r3, r5
  2013e6:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
  2013ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  2013ee:	eb04 1248 	add.w	r2, r4, r8, lsl #5
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  2013f2:	f105 0910 	add.w	r9, r5, #16
  2013f6:	2101      	movs	r1, #1
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
  2013f8:	f8d2 cb00 	ldr.w	ip, [r2, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  2013fc:	fa01 f109 	lsl.w	r1, r1, r9
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
  201400:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
  201404:	f8c2 cb00 	str.w	ip, [r2, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  201408:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
  20140c:	ea22 0201 	bic.w	r2, r2, r1
  201410:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
  201414:	e78e      	b.n	201334 <usbInitEndpointI+0x84>
  201416:	bf00      	nop
  201418:	10048000 	.word	0x10048000
  20141c:	10008000 	.word	0x10008000
  201420:	10088000 	.word	0x10088000
  201424:	100c8000 	.word	0x100c8000
  201428:	02000400 	.word	0x02000400
  20142c:	00000000 	.word	0x00000000

00201430 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  201430:	b5f0      	push	{r4, r5, r6, r7, lr}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  201432:	4f12      	ldr	r7, [pc, #72]	; (20147c <__init_ram_areas+0x4c>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
  201434:	2600      	movs	r6, #0
void __init_ram_areas(void) {
  201436:	4d12      	ldr	r5, [pc, #72]	; (201480 <__init_ram_areas+0x50>)
  201438:	f107 0e80 	add.w	lr, r7, #128	; 0x80
  20143c:	4c11      	ldr	r4, [pc, #68]	; (201484 <__init_ram_areas+0x54>)
  20143e:	4b12      	ldr	r3, [pc, #72]	; (201488 <__init_ram_areas+0x58>)
  201440:	4912      	ldr	r1, [pc, #72]	; (20148c <__init_ram_areas+0x5c>)
    while (p < rap->clear_area) {
  201442:	429c      	cmp	r4, r3
  201444:	d911      	bls.n	20146a <__init_ram_areas+0x3a>
  201446:	3904      	subs	r1, #4
  201448:	461a      	mov	r2, r3
      *p = *tp;
  20144a:	f851 0f04 	ldr.w	r0, [r1, #4]!
  20144e:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
  201452:	4294      	cmp	r4, r2
  201454:	d8f9      	bhi.n	20144a <__init_ram_areas+0x1a>
  201456:	43da      	mvns	r2, r3
  201458:	4414      	add	r4, r2
  20145a:	f024 0403 	bic.w	r4, r4, #3
  20145e:	3404      	adds	r4, #4
  201460:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
  201462:	429d      	cmp	r5, r3
  201464:	d903      	bls.n	20146e <__init_ram_areas+0x3e>
      *p = 0;
  201466:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
  20146a:	429d      	cmp	r5, r3
  20146c:	d8fb      	bhi.n	201466 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  20146e:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
  201470:	4577      	cmp	r7, lr
  201472:	d202      	bcs.n	20147a <__init_ram_areas+0x4a>
  201474:	e897 003a 	ldmia.w	r7, {r1, r3, r4, r5}
  201478:	e7e3      	b.n	201442 <__init_ram_areas+0x12>
  20147a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20147c:	08003ae8 	.word	0x08003ae8
  201480:	20020008 	.word	0x20020008
  201484:	20020008 	.word	0x20020008
  201488:	20020008 	.word	0x20020008
  20148c:	08003ebc 	.word	0x08003ebc

00201490 <__default_exit>:
void __default_exit(void) {
  201490:	e7fe      	b.n	201490 <__default_exit>
  201492:	bf00      	nop
	...

002014a0 <__late_init>:
void __late_init(void) {}
  2014a0:	4770      	bx	lr
  2014a2:	bf00      	nop
	...

002014b0 <__core_init>:
void __core_init(void) {
  2014b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  2014b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2014b6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  2014ba:	4c1d      	ldr	r4, [pc, #116]	; (201530 <__core_init+0x80>)
  2014bc:	2200      	movs	r2, #0
  2014be:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  2014c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2014c6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  2014ca:	6963      	ldr	r3, [r4, #20]
  2014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  2014d0:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  2014d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  2014d6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  2014da:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  2014de:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  2014e2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  2014e6:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  2014ea:	f3c3 06c9 	ubfx	r6, r3, #3, #10

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  2014ee:	f3c3 334e 	ubfx	r3, r3, #13, #15
  2014f2:	07b7      	lsls	r7, r6, #30
  2014f4:	015d      	lsls	r5, r3, #5
  2014f6:	ea05 000e 	and.w	r0, r5, lr
  2014fa:	4639      	mov	r1, r7
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  2014fc:	4632      	mov	r2, r6
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2014fe:	ea41 0300 	orr.w	r3, r1, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  201502:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  201504:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
  201508:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
      } while (ways-- != 0U);
  20150c:	1c53      	adds	r3, r2, #1
  20150e:	d1f6      	bne.n	2014fe <__core_init+0x4e>
  201510:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
  201512:	f115 0f20 	cmn.w	r5, #32
  201516:	d1ee      	bne.n	2014f6 <__core_init+0x46>
  201518:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  20151c:	6963      	ldr	r3, [r4, #20]
  20151e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  201522:	6163      	str	r3, [r4, #20]
  201524:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  201528:	f3bf 8f6f 	isb	sy
  20152c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  20152e:	bf00      	nop
  201530:	e000ed00 	.word	0xe000ed00
	...

00201540 <adcerrorcallback.lto_priv.57>:
  201540:	4770      	bx	lr
  201542:	bf00      	nop
	...

00201550 <adccallback.lto_priv.56>:

/*
 * ADC streaming callback.
 */
size_t nx = 0, ny = 0, nz = 0;
static void adccallback(ADCDriver *adcp, adcsample_t *buffer, size_t n) {
  201550:	b430      	push	{r4, r5}
                      n * adcp->grpp->num_channels * sizeof (adcsample_t));
#else
  (void)adcp;
#endif

  nz++;
  201552:	4c0e      	ldr	r4, [pc, #56]	; (20158c <adccallback.lto_priv.56+0x3c>)

  /* Updating counters.*/
  if (samples1 == buffer) {
  201554:	4d0e      	ldr	r5, [pc, #56]	; (201590 <adccallback.lto_priv.56+0x40>)
  nz++;
  201556:	6823      	ldr	r3, [r4, #0]
  if (samples1 == buffer) {
  201558:	428d      	cmp	r5, r1
  nz++;
  20155a:	f103 0001 	add.w	r0, r3, #1
    nx += n;
  20155e:	bf0c      	ite	eq
  201560:	490c      	ldreq	r1, [pc, #48]	; (201594 <adccallback.lto_priv.56+0x44>)
  }
  else {
    ny += n;
  201562:	490d      	ldrne	r1, [pc, #52]	; (201598 <adccallback.lto_priv.56+0x48>)
  nz++;
  201564:	6020      	str	r0, [r4, #0]
    ny += n;
  201566:	680b      	ldr	r3, [r1, #0]
  201568:	4413      	add	r3, r2
  }

  if ((nz % 10000) == 0) {
  20156a:	f242 7210 	movw	r2, #10000	; 0x2710
    ny += n;
  20156e:	600b      	str	r3, [r1, #0]
  if ((nz % 10000) == 0) {
  201570:	4b0a      	ldr	r3, [pc, #40]	; (20159c <adccallback.lto_priv.56+0x4c>)
  201572:	fba3 1300 	umull	r1, r3, r3, r0
  201576:	0b5b      	lsrs	r3, r3, #13
  201578:	fb02 0313 	mls	r3, r2, r3, r0
  20157c:	b923      	cbnz	r3, 201588 <adccallback.lto_priv.56+0x38>
      	  palToggleLine(LINE_LED2);
  20157e:	4a08      	ldr	r2, [pc, #32]	; (2015a0 <adccallback.lto_priv.56+0x50>)
  201580:	6953      	ldr	r3, [r2, #20]
  201582:	f083 0380 	eor.w	r3, r3, #128	; 0x80
  201586:	6153      	str	r3, [r2, #20]
        }

}
  201588:	bc30      	pop	{r4, r5}
  20158a:	4770      	bx	lr
  20158c:	2000084c 	.word	0x2000084c
  201590:	20001054 	.word	0x20001054
  201594:	20001050 	.word	0x20001050
  201598:	20000848 	.word	0x20000848
  20159c:	d1b71759 	.word	0xd1b71759
  2015a0:	40020400 	.word	0x40020400
	...

002015b0 <get_descriptor.lto_priv.54>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
  2015b0:	2902      	cmp	r1, #2
  2015b2:	d006      	beq.n	2015c2 <get_descriptor.lto_priv.54+0x12>
  2015b4:	2903      	cmp	r1, #3
  2015b6:	d006      	beq.n	2015c6 <get_descriptor.lto_priv.54+0x16>
  2015b8:	2901      	cmp	r1, #1
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
      return &vcom_strings[dindex];
  }
  return NULL;
  2015ba:	4807      	ldr	r0, [pc, #28]	; (2015d8 <get_descriptor.lto_priv.54+0x28>)
  2015bc:	bf18      	it	ne
  2015be:	2000      	movne	r0, #0
  2015c0:	4770      	bx	lr
    return &vcom_configuration_descriptor;
  2015c2:	4806      	ldr	r0, [pc, #24]	; (2015dc <get_descriptor.lto_priv.54+0x2c>)
  2015c4:	4770      	bx	lr
    if (dindex < 4)
  2015c6:	2a03      	cmp	r2, #3
  2015c8:	d803      	bhi.n	2015d2 <get_descriptor.lto_priv.54+0x22>
      return &vcom_strings[dindex];
  2015ca:	4805      	ldr	r0, [pc, #20]	; (2015e0 <get_descriptor.lto_priv.54+0x30>)
  2015cc:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
  2015d0:	4770      	bx	lr
  return NULL;
  2015d2:	2000      	movs	r0, #0
}
  2015d4:	4770      	bx	lr
  2015d6:	bf00      	nop
  2015d8:	08003c2c 	.word	0x08003c2c
  2015dc:	08003be0 	.word	0x08003be0
  2015e0:	08003cb4 	.word	0x08003cb4
	...

002015f0 <sof_handler.lto_priv.55>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
  2015f0:	b510      	push	{r4, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2015f2:	2320      	movs	r3, #32
  2015f4:	b082      	sub	sp, #8
  2015f6:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
  2015fa:	4c1f      	ldr	r4, [pc, #124]	; (201678 <sof_handler.lto_priv.55+0x88>)
  2015fc:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
  201600:	6813      	ldr	r3, [r2, #0]
  201602:	7819      	ldrb	r1, [r3, #0]
  201604:	2904      	cmp	r1, #4
  201606:	d004      	beq.n	201612 <sof_handler.lto_priv.55+0x22>
  201608:	2300      	movs	r3, #0
  20160a:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
  osalSysUnlockFromISR();
}
  20160e:	b002      	add	sp, #8
  201610:	bd10      	pop	{r4, pc}
  201612:	7a21      	ldrb	r1, [r4, #8]
  201614:	2902      	cmp	r1, #2
  201616:	d1f7      	bne.n	201608 <sof_handler.lto_priv.55+0x18>
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
  201618:	7910      	ldrb	r0, [r2, #4]
  20161a:	2201      	movs	r2, #1
  20161c:	8919      	ldrh	r1, [r3, #8]
  20161e:	fa02 f300 	lsl.w	r3, r2, r0
  201622:	420b      	tst	r3, r1
  201624:	d1f0      	bne.n	201608 <sof_handler.lto_priv.55+0x18>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
  201626:	6d63      	ldr	r3, [r4, #84]	; 0x54
  201628:	6da2      	ldr	r2, [r4, #88]	; 0x58
  20162a:	4293      	cmp	r3, r2
  20162c:	d1ec      	bne.n	201608 <sof_handler.lto_priv.55+0x18>
  20162e:	6d22      	ldr	r2, [r4, #80]	; 0x50
  201630:	2a00      	cmp	r2, #0
  201632:	d0e9      	beq.n	201608 <sof_handler.lto_priv.55+0x18>
  201634:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
  201636:	2a00      	cmp	r2, #0
  201638:	d0e6      	beq.n	201608 <sof_handler.lto_priv.55+0x18>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
  20163a:	3a04      	subs	r2, #4

    if (size > 0U) {
  20163c:	1ad2      	subs	r2, r2, r3
  20163e:	d0e3      	beq.n	201608 <sof_handler.lto_priv.55+0x18>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
  201640:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
  201642:	6e20      	ldr	r0, [r4, #96]	; 0x60
      obqp->bcounter--;
  201644:	6d22      	ldr	r2, [r4, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
  201646:	4403      	add	r3, r0
      if (obqp->bwrptr >= obqp->btop) {
  201648:	6de1      	ldr	r1, [r4, #92]	; 0x5c
      obqp->bcounter--;
  20164a:	3a01      	subs	r2, #1
      if (obqp->bwrptr >= obqp->btop) {
  20164c:	428b      	cmp	r3, r1
      obqp->bwrptr += obqp->bsize;
  20164e:	6563      	str	r3, [r4, #84]	; 0x54
      obqp->bcounter--;
  201650:	6522      	str	r2, [r4, #80]	; 0x50
      if (obqp->bwrptr >= obqp->btop) {
  201652:	d301      	bcc.n	201658 <sof_handler.lto_priv.55+0x68>
        obqp->bwrptr = obqp->buffers;
  201654:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  201656:	6563      	str	r3, [r4, #84]	; 0x54
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
  201658:	2300      	movs	r3, #0
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
  20165a:	a901      	add	r1, sp, #4
  20165c:	4807      	ldr	r0, [pc, #28]	; (20167c <sof_handler.lto_priv.55+0x8c>)
  20165e:	66e3      	str	r3, [r4, #108]	; 0x6c
  201660:	f7ff fc26 	bl	200eb0 <obqGetFullBufferI>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  201664:	f8d4 448c 	ldr.w	r4, [r4, #1164]	; 0x48c
  201668:	4602      	mov	r2, r0
  20166a:	9b01      	ldr	r3, [sp, #4]
  20166c:	7921      	ldrb	r1, [r4, #4]
  20166e:	6820      	ldr	r0, [r4, #0]
  201670:	f7ff fbc6 	bl	200e00 <usbStartTransmitI>
  201674:	e7c8      	b.n	201608 <sof_handler.lto_priv.55+0x18>
  201676:	bf00      	nop
  201678:	200008fc 	.word	0x200008fc
  20167c:	20000940 	.word	0x20000940

00201680 <usb_event.lto_priv.53>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
  201680:	b538      	push	{r3, r4, r5, lr}
  switch (event) {
  201682:	2905      	cmp	r1, #5
  201684:	d812      	bhi.n	2016ac <usb_event.lto_priv.53+0x2c>
  201686:	e8df f001 	tbb	[pc, r1]
  20168a:	1147      	.short	0x1147
  20168c:	03474712 	.word	0x03474712
  201690:	2320      	movs	r3, #32
  201692:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
  201696:	2101      	movs	r1, #1
  201698:	482d      	ldr	r0, [pc, #180]	; (201750 <usb_event.lto_priv.53+0xd0>)
  20169a:	f7ff fcf1 	bl	201080 <chEvtBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
  20169e:	4a2d      	ldr	r2, [pc, #180]	; (201754 <usb_event.lto_priv.53+0xd4>)
  2016a0:	2300      	movs	r3, #0
  2016a2:	7513      	strb	r3, [r2, #20]
  bqResumeX(&sdup->obqueue);
  2016a4:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
  2016a8:	f383 8811 	msr	BASEPRI, r3
  2016ac:	bd38      	pop	{r3, r4, r5, pc}
  2016ae:	4605      	mov	r5, r0
  2016b0:	2320      	movs	r3, #32
  2016b2:	f383 8811 	msr	BASEPRI, r3
  ibqp->bcounter  = 0;
  2016b6:	4c27      	ldr	r4, [pc, #156]	; (201754 <usb_event.lto_priv.53+0xd4>)
    usbInitEndpointI(usbp, USBD2_DATA_REQUEST_EP, &ep1config);
  2016b8:	2101      	movs	r1, #1
  2016ba:	4a27      	ldr	r2, [pc, #156]	; (201758 <usb_event.lto_priv.53+0xd8>)
  2016bc:	f7ff fdf8 	bl	2012b0 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD2_INTERRUPT_REQUEST_EP, &ep2config);
  2016c0:	4628      	mov	r0, r5
  2016c2:	4a26      	ldr	r2, [pc, #152]	; (20175c <usb_event.lto_priv.53+0xdc>)
  2016c4:	2102      	movs	r1, #2
  2016c6:	f7ff fdf3 	bl	2012b0 <usbInitEndpointI>
  2016ca:	2500      	movs	r5, #0
  ibqp->brdptr    = ibqp->buffers;
  2016cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  chThdDequeueAllI(tqp, msg);
  2016ce:	f104 000c 	add.w	r0, r4, #12
  2016d2:	f06f 0101 	mvn.w	r1, #1
  ibqp->bcounter  = 0;
  2016d6:	61a5      	str	r5, [r4, #24]
  ibqp->brdptr    = ibqp->buffers;
  2016d8:	6223      	str	r3, [r4, #32]
  ibqp->bwrptr    = ibqp->buffers;
  2016da:	61e3      	str	r3, [r4, #28]
  ibqp->ptr       = NULL;
  2016dc:	6365      	str	r5, [r4, #52]	; 0x34
  ibqp->top       = NULL;
  2016de:	63a5      	str	r5, [r4, #56]	; 0x38
  2016e0:	f7ff fd96 	bl	201210 <chThdDequeueAllI>
  obqp->brdptr    = obqp->buffers;
  2016e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
  obqp->bcounter  = bqSizeX(obqp);
  2016e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  2016e8:	f104 0044 	add.w	r0, r4, #68	; 0x44
  obqp->brdptr    = obqp->buffers;
  2016ec:	65a3      	str	r3, [r4, #88]	; 0x58
  2016ee:	f06f 0101 	mvn.w	r1, #1
  obqp->bcounter  = bqSizeX(obqp);
  2016f2:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->bwrptr    = obqp->buffers;
  2016f4:	6563      	str	r3, [r4, #84]	; 0x54
  obqp->ptr       = NULL;
  2016f6:	66e5      	str	r5, [r4, #108]	; 0x6c
  obqp->top       = NULL;
  2016f8:	6725      	str	r5, [r4, #112]	; 0x70
  bqResumeX(&sdup->ibqueue);
  2016fa:	7525      	strb	r5, [r4, #20]
  2016fc:	f7ff fd88 	bl	201210 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
  201700:	1d20      	adds	r0, r4, #4
  201702:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
  201704:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  201708:	f7ff fcba 	bl	201080 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
  20170c:	4620      	mov	r0, r4
  20170e:	f7ff fb8f 	bl	200e30 <sdu_start_receive.lto_priv.70>
  201712:	f385 8811 	msr	BASEPRI, r5
  201716:	bd38      	pop	{r3, r4, r5, pc}
  201718:	2320      	movs	r3, #32
  20171a:	f383 8811 	msr	BASEPRI, r3
  bqSuspendI(&sdup->ibqueue);
  20171e:	4c0d      	ldr	r4, [pc, #52]	; (201754 <usb_event.lto_priv.53+0xd4>)
  201720:	2501      	movs	r5, #1
  201722:	2102      	movs	r1, #2
  201724:	1d20      	adds	r0, r4, #4
  201726:	f7ff fcab 	bl	201080 <chEvtBroadcastFlagsI>
  chThdDequeueAllI(tqp, msg);
  20172a:	f104 000c 	add.w	r0, r4, #12
  20172e:	f06f 0101 	mvn.w	r1, #1
  201732:	7525      	strb	r5, [r4, #20]
  201734:	f7ff fd6c 	bl	201210 <chThdDequeueAllI>
  201738:	f104 0044 	add.w	r0, r4, #68	; 0x44
  20173c:	f06f 0101 	mvn.w	r1, #1
  bqSuspendI(&sdup->obqueue);
  201740:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
  201744:	f7ff fd64 	bl	201210 <chThdDequeueAllI>
  201748:	2300      	movs	r3, #0
  20174a:	f383 8811 	msr	BASEPRI, r3
  20174e:	bd38      	pop	{r3, r4, r5, pc}
  201750:	20000900 	.word	0x20000900
  201754:	200008fc 	.word	0x200008fc
  201758:	08003b98 	.word	0x08003b98
  20175c:	08003bbc 	.word	0x08003bbc

00201760 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  201760:	b40e      	push	{r1, r2, r3}
  201762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  201766:	b086      	sub	sp, #24
  int n = 0;
  201768:	f04f 0900 	mov.w	r9, #0
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  20176c:	4682      	mov	sl, r0
  20176e:	ab0f      	add	r3, sp, #60	; 0x3c
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
  201770:	46cb      	mov	fp, r9
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  201772:	f853 5b04 	ldr.w	r5, [r3], #4
  201776:	461e      	mov	r6, r3
  va_start(ap, fmt);
  201778:	9302      	str	r3, [sp, #8]
    c = *fmt++;
  20177a:	7829      	ldrb	r1, [r5, #0]
  20177c:	1c6a      	adds	r2, r5, #1
    if (c == 0)
  20177e:	b169      	cbz	r1, 20179c <chprintf+0x3c>
    if (c != '%') {
  201780:	2925      	cmp	r1, #37	; 0x25
  201782:	d011      	beq.n	2017a8 <chprintf+0x48>
      streamPut(chp, (uint8_t)c);
  201784:	f8da 3000 	ldr.w	r3, [sl]
    c = *fmt++;
  201788:	4615      	mov	r5, r2
      streamPut(chp, (uint8_t)c);
  20178a:	4650      	mov	r0, sl
      n++;
  20178c:	f10b 0b01 	add.w	fp, fp, #1
      streamPut(chp, (uint8_t)c);
  201790:	689b      	ldr	r3, [r3, #8]
  201792:	4798      	blx	r3
    c = *fmt++;
  201794:	7829      	ldrb	r1, [r5, #0]
  201796:	1c6a      	adds	r2, r5, #1
    if (c == 0)
  201798:	2900      	cmp	r1, #0
  20179a:	d1f1      	bne.n	201780 <chprintf+0x20>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
  20179c:	4658      	mov	r0, fp
  20179e:	b006      	add	sp, #24
  2017a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  2017a4:	b003      	add	sp, #12
  2017a6:	4770      	bx	lr
    if (*fmt == '-') {
  2017a8:	7869      	ldrb	r1, [r5, #1]
  2017aa:	292d      	cmp	r1, #45	; 0x2d
  2017ac:	f000 8184 	beq.w	201ab8 <chprintf+0x358>
    left_align = FALSE;
  2017b0:	f04f 0c00 	mov.w	ip, #0
    if (*fmt == '0') {
  2017b4:	2930      	cmp	r1, #48	; 0x30
  2017b6:	f000 817a 	beq.w	201aae <chprintf+0x34e>
    filler = ' ';
  2017ba:	f04f 0820 	mov.w	r8, #32
  2017be:	3201      	adds	r2, #1
    width = 0;
  2017c0:	2400      	movs	r4, #0
  2017c2:	e005      	b.n	2017d0 <chprintf+0x70>
        c = va_arg(ap, int);
  2017c4:	7833      	ldrb	r3, [r6, #0]
  2017c6:	3604      	adds	r6, #4
  2017c8:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
  2017cc:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
  2017d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
      c = *fmt++;
  2017d4:	4615      	mov	r5, r2
      width = width * 10 + c;
  2017d6:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
  2017da:	b2db      	uxtb	r3, r3
  2017dc:	2b09      	cmp	r3, #9
  2017de:	d9f3      	bls.n	2017c8 <chprintf+0x68>
      else if (c == '*')
  2017e0:	292a      	cmp	r1, #42	; 0x2a
  2017e2:	d0ef      	beq.n	2017c4 <chprintf+0x64>
    if (c == '.') {
  2017e4:	292e      	cmp	r1, #46	; 0x2e
  2017e6:	f04f 0200 	mov.w	r2, #0
  2017ea:	d047      	beq.n	20187c <chprintf+0x11c>
    if (c == 'l' || c == 'L') {
  2017ec:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  2017f0:	2b4c      	cmp	r3, #76	; 0x4c
  2017f2:	d152      	bne.n	20189a <chprintf+0x13a>
      if (*fmt)
  2017f4:	782b      	ldrb	r3, [r5, #0]
  2017f6:	b10b      	cbz	r3, 2017fc <chprintf+0x9c>
        c = *fmt++;
  2017f8:	3501      	adds	r5, #1
  2017fa:	4619      	mov	r1, r3
    switch (c) {
  2017fc:	f1a1 0344 	sub.w	r3, r1, #68	; 0x44
  201800:	2b34      	cmp	r3, #52	; 0x34
  201802:	f200 8147 	bhi.w	201a94 <chprintf+0x334>
  201806:	e8df f013 	tbh	[pc, r3, lsl #1]
  20180a:	011d      	.short	0x011d
  20180c:	01450145 	.word	0x01450145
  201810:	01450145 	.word	0x01450145
  201814:	0145011d 	.word	0x0145011d
  201818:	01450145 	.word	0x01450145
  20181c:	01450145 	.word	0x01450145
  201820:	014500f3 	.word	0x014500f3
  201824:	01450145 	.word	0x01450145
  201828:	01450145 	.word	0x01450145
  20182c:	01450084 	.word	0x01450084
  201830:	011a0145 	.word	0x011a0145
  201834:	01450145 	.word	0x01450145
  201838:	01450145 	.word	0x01450145
  20183c:	01450145 	.word	0x01450145
  201840:	01450145 	.word	0x01450145
  201844:	01450145 	.word	0x01450145
  201848:	011d010f 	.word	0x011d010f
  20184c:	01450145 	.word	0x01450145
  201850:	01450145 	.word	0x01450145
  201854:	0145011d 	.word	0x0145011d
  201858:	01450145 	.word	0x01450145
  20185c:	01450145 	.word	0x01450145
  201860:	014500f3 	.word	0x014500f3
  201864:	01450145 	.word	0x01450145
  201868:	014500f6 	.word	0x014500f6
  20186c:	01450084 	.word	0x01450084
  201870:	011a0145 	.word	0x011a0145
          c = va_arg(ap, int);
  201874:	7833      	ldrb	r3, [r6, #0]
  201876:	3604      	adds	r6, #4
        precision += c;
  201878:	eb03 0240 	add.w	r2, r3, r0, lsl #1
        c = *fmt++;
  20187c:	f815 1b01 	ldrb.w	r1, [r5], #1
        precision *= 10;
  201880:	eb02 0082 	add.w	r0, r2, r2, lsl #2
        if (c >= '0' && c <= '9')
  201884:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
  201888:	b2db      	uxtb	r3, r3
  20188a:	2b09      	cmp	r3, #9
  20188c:	d9f4      	bls.n	201878 <chprintf+0x118>
        else if (c == '*')
  20188e:	292a      	cmp	r1, #42	; 0x2a
  201890:	d0f0      	beq.n	201874 <chprintf+0x114>
    if (c == 'l' || c == 'L') {
  201892:	f001 03df 	and.w	r3, r1, #223	; 0xdf
  201896:	2b4c      	cmp	r3, #76	; 0x4c
  201898:	d0ac      	beq.n	2017f4 <chprintf+0x94>
    switch (c) {
  20189a:	f1a1 0044 	sub.w	r0, r1, #68	; 0x44
  20189e:	2834      	cmp	r0, #52	; 0x34
  2018a0:	f200 80f8 	bhi.w	201a94 <chprintf+0x334>
  2018a4:	e8df f010 	tbh	[pc, r0, lsl #1]
  2018a8:	00f600ce 	.word	0x00f600ce
  2018ac:	00f600f6 	.word	0x00f600f6
  2018b0:	00ce00f6 	.word	0x00ce00f6
  2018b4:	00f600f6 	.word	0x00f600f6
  2018b8:	00f600f6 	.word	0x00f600f6
  2018bc:	00a400f6 	.word	0x00a400f6
  2018c0:	00f600f6 	.word	0x00f600f6
  2018c4:	00f600f6 	.word	0x00f600f6
  2018c8:	003500f6 	.word	0x003500f6
  2018cc:	00f600f6 	.word	0x00f600f6
  2018d0:	00f600cb 	.word	0x00f600cb
  2018d4:	00f600f6 	.word	0x00f600f6
  2018d8:	00f600f6 	.word	0x00f600f6
  2018dc:	00f600f6 	.word	0x00f600f6
  2018e0:	00f600f6 	.word	0x00f600f6
  2018e4:	00c000f6 	.word	0x00c000f6
  2018e8:	00f600ce 	.word	0x00f600ce
  2018ec:	00f600f6 	.word	0x00f600f6
  2018f0:	00ce00f6 	.word	0x00ce00f6
  2018f4:	00f600f6 	.word	0x00f600f6
  2018f8:	00f600f6 	.word	0x00f600f6
  2018fc:	00a400f6 	.word	0x00a400f6
  201900:	00f600f6 	.word	0x00f600f6
  201904:	00a700f6 	.word	0x00a700f6
  201908:	003500f6 	.word	0x003500f6
  20190c:	00f600f6 	.word	0x00f600f6
  201910:	00cb      	.short	0x00cb
  201912:	f04f 0e0a 	mov.w	lr, #10
        l = va_arg(ap, unsigned int);
  201916:	6837      	ldr	r7, [r6, #0]
  q = p + MAX_FILLER;
  201918:	f10d 0117 	add.w	r1, sp, #23
        l = va_arg(ap, unsigned int);
  20191c:	3604      	adds	r6, #4
  20191e:	e000      	b.n	201922 <chprintf+0x1c2>
  } while ((ll /= radix) != 0);
  201920:	4601      	mov	r1, r0
    *--q = i;
  201922:	1e48      	subs	r0, r1, #1
    i = (int)(l % radix);
  201924:	fbb7 f2fe 	udiv	r2, r7, lr
  201928:	fb0e 7912 	mls	r9, lr, r2, r7
    l /= radix;
  20192c:	4617      	mov	r7, r2
    i += '0';
  20192e:	f109 0330 	add.w	r3, r9, #48	; 0x30
    if (i > '9')
  201932:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
  201934:	bfc8      	it	gt
  201936:	f109 0337 	addgt.w	r3, r9, #55	; 0x37
    *--q = i;
  20193a:	b2db      	uxtb	r3, r3
  20193c:	f801 3c01 	strb.w	r3, [r1, #-1]
  } while ((ll /= radix) != 0);
  201940:	2a00      	cmp	r2, #0
  201942:	d1ed      	bne.n	201920 <chprintf+0x1c0>
  i = (int)(p + MAX_FILLER - q);
  201944:	f10d 0217 	add.w	r2, sp, #23
  201948:	af03      	add	r7, sp, #12
  20194a:	1a12      	subs	r2, r2, r0
  20194c:	46be      	mov	lr, r7
  20194e:	4410      	add	r0, r2
  201950:	e001      	b.n	201956 <chprintf+0x1f6>
  201952:	f811 3b01 	ldrb.w	r3, [r1], #1
  while (--i);
  201956:	4288      	cmp	r0, r1
    *p++ = *q++;
  201958:	f80e 3b01 	strb.w	r3, [lr], #1
  while (--i);
  20195c:	d1f9      	bne.n	201952 <chprintf+0x1f2>
  20195e:	1e53      	subs	r3, r2, #1
  201960:	9301      	str	r3, [sp, #4]
    if ((width -= i) < 0)
  201962:	1aa4      	subs	r4, r4, r2
  201964:	d43e      	bmi.n	2019e4 <chprintf+0x284>
    if (left_align == FALSE)
  201966:	f1bc 0f00 	cmp.w	ip, #0
  20196a:	f040 809b 	bne.w	201aa4 <chprintf+0x344>
  20196e:	f1c4 0900 	rsb	r9, r4, #0
    if (width < 0) {
  201972:	2c00      	cmp	r4, #0
  201974:	f000 8095 	beq.w	201aa2 <chprintf+0x342>
      if (*s == '-' && filler == '0') {
  201978:	783b      	ldrb	r3, [r7, #0]
  20197a:	2b2d      	cmp	r3, #45	; 0x2d
  20197c:	d103      	bne.n	201986 <chprintf+0x226>
  20197e:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
  201982:	f000 80ae 	beq.w	201ae2 <chprintf+0x382>
        streamPut(chp, (uint8_t)filler);
  201986:	f8da 3000 	ldr.w	r3, [sl]
  20198a:	4641      	mov	r1, r8
  20198c:	4650      	mov	r0, sl
  20198e:	689b      	ldr	r3, [r3, #8]
  201990:	4798      	blx	r3
      } while (++width != 0);
  201992:	f119 0901 	adds.w	r9, r9, #1
  201996:	d1f6      	bne.n	201986 <chprintf+0x226>
    while (--i >= 0) {
  201998:	9b01      	ldr	r3, [sp, #4]
  20199a:	44a3      	add	fp, r4
  20199c:	2b00      	cmp	r3, #0
  20199e:	f6ff aeec 	blt.w	20177a <chprintf+0x1a>
  2019a2:	464c      	mov	r4, r9
  2019a4:	f8dd 9004 	ldr.w	r9, [sp, #4]
      streamPut(chp, (uint8_t)*s++);
  2019a8:	f8da 3000 	ldr.w	r3, [sl]
    while (--i >= 0) {
  2019ac:	f109 39ff 	add.w	r9, r9, #4294967295
      streamPut(chp, (uint8_t)*s++);
  2019b0:	f817 1b01 	ldrb.w	r1, [r7], #1
  2019b4:	4650      	mov	r0, sl
  2019b6:	689b      	ldr	r3, [r3, #8]
  2019b8:	4798      	blx	r3
    while (--i >= 0) {
  2019ba:	f1b9 3fff 	cmp.w	r9, #4294967295
  2019be:	d1f3      	bne.n	2019a8 <chprintf+0x248>
  2019c0:	f10b 0b01 	add.w	fp, fp, #1
  2019c4:	9b01      	ldr	r3, [sp, #4]
  2019c6:	449b      	add	fp, r3
    while (width) {
  2019c8:	2c00      	cmp	r4, #0
  2019ca:	f43f aed6 	beq.w	20177a <chprintf+0x1a>
  2019ce:	4627      	mov	r7, r4
      streamPut(chp, (uint8_t)filler);
  2019d0:	f8da 3000 	ldr.w	r3, [sl]
  2019d4:	4641      	mov	r1, r8
  2019d6:	4650      	mov	r0, sl
  2019d8:	689b      	ldr	r3, [r3, #8]
  2019da:	4798      	blx	r3
    while (width) {
  2019dc:	3f01      	subs	r7, #1
  2019de:	d1f7      	bne.n	2019d0 <chprintf+0x270>
  2019e0:	44a3      	add	fp, r4
  2019e2:	e6ca      	b.n	20177a <chprintf+0x1a>
    while (--i >= 0) {
  2019e4:	9b01      	ldr	r3, [sp, #4]
  2019e6:	2b00      	cmp	r3, #0
  2019e8:	f6ff aec7 	blt.w	20177a <chprintf+0x1a>
      width = 0;
  2019ec:	2400      	movs	r4, #0
  2019ee:	e7d9      	b.n	2019a4 <chprintf+0x244>
    switch (c) {
  2019f0:	f04f 0e08 	mov.w	lr, #8
  2019f4:	e78f      	b.n	201916 <chprintf+0x1b6>
      if ((s = va_arg(ap, char *)) == 0)
  2019f6:	6837      	ldr	r7, [r6, #0]
  2019f8:	3604      	adds	r6, #4
  2019fa:	2f00      	cmp	r7, #0
  2019fc:	d06c      	beq.n	201ad8 <chprintf+0x378>
      for (p = s; *p && (--precision >= 0); p++)
  2019fe:	783b      	ldrb	r3, [r7, #0]
      if (precision == 0)
  201a00:	2a00      	cmp	r2, #0
  201a02:	d15e      	bne.n	201ac2 <chprintf+0x362>
      for (p = s; *p && (--precision >= 0); p++)
  201a04:	2b00      	cmp	r3, #0
  201a06:	d079      	beq.n	201afc <chprintf+0x39c>
  201a08:	f647 73fe 	movw	r3, #32766	; 0x7ffe
  201a0c:	463a      	mov	r2, r7
  201a0e:	e001      	b.n	201a14 <chprintf+0x2b4>
  201a10:	3b01      	subs	r3, #1
  201a12:	d403      	bmi.n	201a1c <chprintf+0x2bc>
  201a14:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  201a18:	2900      	cmp	r1, #0
  201a1a:	d1f9      	bne.n	201a10 <chprintf+0x2b0>
  201a1c:	1bd2      	subs	r2, r2, r7
      filler = ' ';
  201a1e:	f04f 0820 	mov.w	r8, #32
  201a22:	1e53      	subs	r3, r2, #1
  201a24:	9301      	str	r3, [sp, #4]
  201a26:	e79c      	b.n	201962 <chprintf+0x202>
      *p++ = va_arg(ap, int);
  201a28:	6833      	ldr	r3, [r6, #0]
  201a2a:	2200      	movs	r2, #0
  201a2c:	af06      	add	r7, sp, #24
  201a2e:	3604      	adds	r6, #4
  201a30:	9201      	str	r2, [sp, #4]
      filler = ' ';
  201a32:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
  201a36:	f807 3d0c 	strb.w	r3, [r7, #-12]!
  201a3a:	2201      	movs	r2, #1
  201a3c:	e791      	b.n	201962 <chprintf+0x202>
    switch (c) {
  201a3e:	f04f 0e10 	mov.w	lr, #16
  201a42:	e768      	b.n	201916 <chprintf+0x1b6>
        l = va_arg(ap, int);
  201a44:	6831      	ldr	r1, [r6, #0]
  201a46:	3604      	adds	r6, #4
      if (l < 0) {
  201a48:	2900      	cmp	r1, #0
  201a4a:	db3d      	blt.n	201ac8 <chprintf+0x368>
    p = tmpbuf;
  201a4c:	af03      	add	r7, sp, #12
  201a4e:	463a      	mov	r2, r7
  q = p + MAX_FILLER;
  201a50:	f102 030b 	add.w	r3, r2, #11
  201a54:	4618      	mov	r0, r3
  201a56:	9301      	str	r3, [sp, #4]
    i = (int)(l % radix);
  201a58:	4b2b      	ldr	r3, [pc, #172]	; (201b08 <chprintf+0x3a8>)
  201a5a:	fba3 e301 	umull	lr, r3, r3, r1
  201a5e:	08db      	lsrs	r3, r3, #3
  201a60:	eb03 0983 	add.w	r9, r3, r3, lsl #2
  201a64:	469e      	mov	lr, r3
  201a66:	eba1 0349 	sub.w	r3, r1, r9, lsl #1
  } while ((ll /= radix) != 0);
  201a6a:	4671      	mov	r1, lr
    i += '0';
  201a6c:	3330      	adds	r3, #48	; 0x30
    *--q = i;
  201a6e:	b2db      	uxtb	r3, r3
  201a70:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
  201a74:	2900      	cmp	r1, #0
  201a76:	d1ef      	bne.n	201a58 <chprintf+0x2f8>
  i = (int)(p + MAX_FILLER - q);
  201a78:	9901      	ldr	r1, [sp, #4]
  201a7a:	1a09      	subs	r1, r1, r0
  201a7c:	4411      	add	r1, r2
  201a7e:	e001      	b.n	201a84 <chprintf+0x324>
  201a80:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
  201a84:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
  201a88:	428a      	cmp	r2, r1
  201a8a:	d1f9      	bne.n	201a80 <chprintf+0x320>
  201a8c:	1bd2      	subs	r2, r2, r7
  201a8e:	1e53      	subs	r3, r2, #1
  201a90:	9301      	str	r3, [sp, #4]
  201a92:	e766      	b.n	201962 <chprintf+0x202>
      *p++ = c;
  201a94:	af06      	add	r7, sp, #24
  201a96:	2300      	movs	r3, #0
  201a98:	2201      	movs	r2, #1
  201a9a:	9301      	str	r3, [sp, #4]
  201a9c:	f807 1d0c 	strb.w	r1, [r7, #-12]!
  201aa0:	e75f      	b.n	201962 <chprintf+0x202>
    if (width < 0) {
  201aa2:	464c      	mov	r4, r9
    while (--i >= 0) {
  201aa4:	9b01      	ldr	r3, [sp, #4]
  201aa6:	2b00      	cmp	r3, #0
  201aa8:	f6bf af7c 	bge.w	2019a4 <chprintf+0x244>
  201aac:	e78c      	b.n	2019c8 <chprintf+0x268>
  201aae:	7851      	ldrb	r1, [r2, #1]
      filler = '0';
  201ab0:	f04f 0830 	mov.w	r8, #48	; 0x30
      fmt++;
  201ab4:	3201      	adds	r2, #1
  201ab6:	e682      	b.n	2017be <chprintf+0x5e>
      fmt++;
  201ab8:	1caa      	adds	r2, r5, #2
  201aba:	78a9      	ldrb	r1, [r5, #2]
      left_align = TRUE;
  201abc:	f04f 0c01 	mov.w	ip, #1
  201ac0:	e678      	b.n	2017b4 <chprintf+0x54>
      for (p = s; *p && (--precision >= 0); p++)
  201ac2:	b1db      	cbz	r3, 201afc <chprintf+0x39c>
  201ac4:	1e53      	subs	r3, r2, #1
  201ac6:	e7a1      	b.n	201a0c <chprintf+0x2ac>
        *p++ = '-';
  201ac8:	232d      	movs	r3, #45	; 0x2d
        l = -l;
  201aca:	4249      	negs	r1, r1
        *p++ = '-';
  201acc:	f10d 020d 	add.w	r2, sp, #13
  201ad0:	af03      	add	r7, sp, #12
  201ad2:	f88d 300c 	strb.w	r3, [sp, #12]
  201ad6:	e7bb      	b.n	201a50 <chprintf+0x2f0>
      if (precision == 0)
  201ad8:	b90a      	cbnz	r2, 201ade <chprintf+0x37e>
        precision = 32767;
  201ada:	f647 72ff 	movw	r2, #32767	; 0x7fff
        s = "(null)";
  201ade:	4f0b      	ldr	r7, [pc, #44]	; (201b0c <chprintf+0x3ac>)
  201ae0:	e7f0      	b.n	201ac4 <chprintf+0x364>
  201ae2:	9a01      	ldr	r2, [sp, #4]
        streamPut(chp, (uint8_t)*s++);
  201ae4:	212d      	movs	r1, #45	; 0x2d
  201ae6:	f8da 3000 	ldr.w	r3, [sl]
  201aea:	4650      	mov	r0, sl
  201aec:	3a01      	subs	r2, #1
  201aee:	3701      	adds	r7, #1
  201af0:	689b      	ldr	r3, [r3, #8]
        n++;
  201af2:	f10b 0b01 	add.w	fp, fp, #1
  201af6:	9201      	str	r2, [sp, #4]
        streamPut(chp, (uint8_t)*s++);
  201af8:	4798      	blx	r3
  201afa:	e744      	b.n	201986 <chprintf+0x226>
      for (p = s; *p && (--precision >= 0); p++)
  201afc:	f04f 33ff 	mov.w	r3, #4294967295
  201b00:	f04f 0820 	mov.w	r8, #32
  201b04:	9301      	str	r3, [sp, #4]
  201b06:	e72e      	b.n	201966 <chprintf+0x206>
  201b08:	cccccccd 	.word	0xcccccccd
  201b0c:	08003b6c 	.word	0x08003b6c

00201b10 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
  201b10:	4a91      	ldr	r2, [pc, #580]	; (201d58 <__early_init+0x248>)
  201b12:	2300      	movs	r3, #0
  gpiop->ODR     = config->odr;
  201b14:	f64f 70ff 	movw	r0, #65535	; 0xffff
  201b18:	f64b 7c7e 	movw	ip, #49022	; 0xbf7e
  gpiop->OTYPER  = config->otyper;
  201b1c:	498f      	ldr	r1, [pc, #572]	; (201d5c <__early_init+0x24c>)
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
  201b1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
  201b22:	6915      	ldr	r5, [r2, #16]
  201b24:	f240 7eff 	movw	lr, #2047	; 0x7ff
  gpiop->OTYPER  = config->otyper;
  201b28:	4c8d      	ldr	r4, [pc, #564]	; (201d60 <__early_init+0x250>)
  gpiop->OSPEEDR = config->ospeedr;
  201b2a:	f04f 36ff 	mov.w	r6, #4294967295
  rccResetAHB1(STM32_GPIO_EN_MASK);
  201b2e:	ea45 050e 	orr.w	r5, r5, lr
  gpiop->AFRH    = config->afrh;
  201b32:	f8df 8274 	ldr.w	r8, [pc, #628]	; 201da8 <__early_init+0x298>
  201b36:	f44f 0730 	mov.w	r7, #11534336	; 0xb00000
  gpiop->OSPEEDR = config->ospeedr;
  201b3a:	f06f 4970 	mvn.w	r9, #4026531840	; 0xf0000000
  rccResetAHB1(STM32_GPIO_EN_MASK);
  201b3e:	6115      	str	r5, [r2, #16]
  201b40:	6113      	str	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
  201b42:	6b15      	ldr	r5, [r2, #48]	; 0x30
  201b44:	ea45 050e 	orr.w	r5, r5, lr
  201b48:	6315      	str	r5, [r2, #48]	; 0x30
  201b4a:	6d15      	ldr	r5, [r2, #80]	; 0x50
  201b4c:	ea45 050e 	orr.w	r5, r5, lr
  gpiop->PUPDR   = config->pupdr;
  201b50:	f8df e258 	ldr.w	lr, [pc, #600]	; 201dac <__early_init+0x29c>
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
  201b54:	6515      	str	r5, [r2, #80]	; 0x50
  gpiop->MODER   = config->moder;
  201b56:	f640 2508 	movw	r5, #2568	; 0xa08
  gpiop->OTYPER  = config->otyper;
  201b5a:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201b5c:	60a6      	str	r6, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  201b5e:	f8c4 e00c 	str.w	lr, [r4, #12]
  gpiop->AFRL    = config->afrl;
  201b62:	f8df e24c 	ldr.w	lr, [pc, #588]	; 201db0 <__early_init+0x2a0>
  gpiop->ODR     = config->odr;
  201b66:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  201b68:	f8c4 e020 	str.w	lr, [r4, #32]
  gpiop->OSPEEDR = config->ospeedr;
  201b6c:	f46f 1e40 	mvn.w	lr, #3145728	; 0x300000
  gpiop->AFRH    = config->afrh;
  201b70:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201b74:	f8df 823c 	ldr.w	r8, [pc, #572]	; 201db4 <__early_init+0x2a4>
  201b78:	f8c4 8000 	str.w	r8, [r4]
  gpiop->AFRH    = config->afrh;
  201b7c:	f04f 0877 	mov.w	r8, #119	; 0x77
  gpiop->OTYPER  = config->otyper;
  201b80:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201b84:	f8c4 6408 	str.w	r6, [r4, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  201b88:	f106 468a 	add.w	r6, r6, #1157627904	; 0x45000000
  201b8c:	f106 1655 	add.w	r6, r6, #5570645	; 0x550055
  201b90:	f506 56a8 	add.w	r6, r6, #5376	; 0x1500
  201b94:	f8c4 640c 	str.w	r6, [r4, #1036]	; 0x40c
  gpiop->MODER   = config->moder;
  201b98:	4e72      	ldr	r6, [pc, #456]	; (201d64 <__early_init+0x254>)
  gpiop->ODR     = config->odr;
  201b9a:	f8c4 c414 	str.w	ip, [r4, #1044]	; 0x414
  gpiop->MODER   = config->moder;
  201b9e:	f44f 2c20 	mov.w	ip, #655360	; 0xa0000
  gpiop->AFRL    = config->afrl;
  201ba2:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201ba6:	f8c4 7424 	str.w	r7, [r4, #1060]	; 0x424
  gpiop->PUPDR   = config->pupdr;
  201baa:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
  gpiop->MODER   = config->moder;
  201bae:	f8c4 6400 	str.w	r6, [r4, #1024]	; 0x400
  201bb2:	f04f 6608 	mov.w	r6, #142606336	; 0x8800000
  gpiop->OTYPER  = config->otyper;
  201bb6:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
  201bba:	f8c4 9808 	str.w	r9, [r4, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
  201bbe:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 201db8 <__early_init+0x2a8>
  201bc2:	f8c4 980c 	str.w	r9, [r4, #2060]	; 0x80c
  gpiop->AFRL    = config->afrl;
  201bc6:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 201dbc <__early_init+0x2ac>
  gpiop->ODR     = config->odr;
  201bca:	f8c4 0814 	str.w	r0, [r4, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
  201bce:	f8c4 9820 	str.w	r9, [r4, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
  201bd2:	f8c4 3824 	str.w	r3, [r4, #2084]	; 0x824
  gpiop->MODER   = config->moder;
  201bd6:	f8c4 5800 	str.w	r5, [r4, #2048]	; 0x800
  gpiop->OSPEEDR = config->ospeedr;
  201bda:	250f      	movs	r5, #15
  gpiop->PUPDR   = config->pupdr;
  201bdc:	4c62      	ldr	r4, [pc, #392]	; (201d68 <__early_init+0x258>)
  gpiop->OTYPER  = config->otyper;
  201bde:	604b      	str	r3, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201be0:	f8c1 e008 	str.w	lr, [r1, #8]
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  201be4:	f44f 4e40 	mov.w	lr, #49152	; 0xc000
  gpiop->PUPDR   = config->pupdr;
  201be8:	60cc      	str	r4, [r1, #12]
  gpiop->OSPEEDR = config->ospeedr;
  201bea:	4c60      	ldr	r4, [pc, #384]	; (201d6c <__early_init+0x25c>)
  gpiop->ODR     = config->odr;
  201bec:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
  201bee:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
  201bf0:	f8c1 8024 	str.w	r8, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201bf4:	f8c1 c000 	str.w	ip, [r1]
  gpiop->OTYPER  = config->otyper;
  201bf8:	f8c1 3404 	str.w	r3, [r1, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
  201bfc:	f8c1 4408 	str.w	r4, [r1, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
  201c00:	f8c1 740c 	str.w	r7, [r1, #1036]	; 0x40c
  gpiop->OTYPER  = config->otyper;
  201c04:	4c5a      	ldr	r4, [pc, #360]	; (201d70 <__early_init+0x260>)
  gpiop->ODR     = config->odr;
  201c06:	f8c1 0414 	str.w	r0, [r1, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
  201c0a:	f8c1 3420 	str.w	r3, [r1, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
  201c0e:	f8c1 3424 	str.w	r3, [r1, #1060]	; 0x424
  gpiop->MODER   = config->moder;
  201c12:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
  201c16:	4957      	ldr	r1, [pc, #348]	; (201d74 <__early_init+0x264>)
  gpiop->OTYPER  = config->otyper;
  201c18:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201c1a:	60a1      	str	r1, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
  201c1c:	60e7      	str	r7, [r4, #12]
  gpiop->OTYPER  = config->otyper;
  201c1e:	4956      	ldr	r1, [pc, #344]	; (201d78 <__early_init+0x268>)
  gpiop->ODR     = config->odr;
  201c20:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  201c22:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  201c24:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201c26:	6023      	str	r3, [r4, #0]
  gpiop->OSPEEDR = config->ospeedr;
  201c28:	4c54      	ldr	r4, [pc, #336]	; (201d7c <__early_init+0x26c>)
  gpiop->OTYPER  = config->otyper;
  201c2a:	604b      	str	r3, [r1, #4]
  gpiop->PUPDR   = config->pupdr;
  201c2c:	f8df c190 	ldr.w	ip, [pc, #400]	; 201dc0 <__early_init+0x2b0>
  gpiop->OSPEEDR = config->ospeedr;
  201c30:	608c      	str	r4, [r1, #8]
  gpiop->AFRH    = config->afrh;
  201c32:	4c53      	ldr	r4, [pc, #332]	; (201d80 <__early_init+0x270>)
  gpiop->PUPDR   = config->pupdr;
  201c34:	f8c1 c00c 	str.w	ip, [r1, #12]
  gpiop->ODR     = config->odr;
  201c38:	6148      	str	r0, [r1, #20]
  gpiop->AFRL    = config->afrl;
  201c3a:	620b      	str	r3, [r1, #32]
  gpiop->AFRH    = config->afrh;
  201c3c:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->OTYPER  = config->otyper;
  201c3e:	4c51      	ldr	r4, [pc, #324]	; (201d84 <__early_init+0x274>)
  gpiop->MODER   = config->moder;
  201c40:	600e      	str	r6, [r1, #0]

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  while (!(RCC->CR & RCC_CR_HSIRDY))
  201c42:	4611      	mov	r1, r2
  gpiop->PUPDR   = config->pupdr;
  201c44:	4e50      	ldr	r6, [pc, #320]	; (201d88 <__early_init+0x278>)
  gpiop->OTYPER  = config->otyper;
  201c46:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201c48:	60a5      	str	r5, [r4, #8]
  gpiop->OTYPER  = config->otyper;
  201c4a:	4d50      	ldr	r5, [pc, #320]	; (201d8c <__early_init+0x27c>)
  gpiop->PUPDR   = config->pupdr;
  201c4c:	60e6      	str	r6, [r4, #12]
  gpiop->OTYPER  = config->otyper;
  201c4e:	4e50      	ldr	r6, [pc, #320]	; (201d90 <__early_init+0x280>)
  gpiop->ODR     = config->odr;
  201c50:	6160      	str	r0, [r4, #20]
  gpiop->AFRL    = config->afrl;
  201c52:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
  201c54:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201c56:	6023      	str	r3, [r4, #0]
  gpiop->OTYPER  = config->otyper;
  201c58:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  201c5a:	60b3      	str	r3, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
  201c5c:	60f7      	str	r7, [r6, #12]
  gpiop->ODR     = config->odr;
  201c5e:	6170      	str	r0, [r6, #20]
  gpiop->AFRL    = config->afrl;
  201c60:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
  201c62:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201c64:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
  201c66:	606b      	str	r3, [r5, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  201c68:	4e4a      	ldr	r6, [pc, #296]	; (201d94 <__early_init+0x284>)
  gpiop->OSPEEDR = config->ospeedr;
  201c6a:	60ab      	str	r3, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
  201c6c:	60ef      	str	r7, [r5, #12]
  gpiop->ODR     = config->odr;
  201c6e:	6168      	str	r0, [r5, #20]
  gpiop->AFRL    = config->afrl;
  201c70:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
  201c72:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
  201c74:	602b      	str	r3, [r5, #0]
  PWR->CR1 = STM32_VOS;
  201c76:	f5a5 35da 	sub.w	r5, r5, #111616	; 0x1b400
  gpiop->OTYPER  = config->otyper;
  201c7a:	f8c4 3c04 	str.w	r3, [r4, #3076]	; 0xc04
  gpiop->OSPEEDR = config->ospeedr;
  201c7e:	f8c4 3c08 	str.w	r3, [r4, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
  201c82:	f8c4 7c0c 	str.w	r7, [r4, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
  201c86:	f8c4 0c14 	str.w	r0, [r4, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
  201c8a:	f8c4 3c20 	str.w	r3, [r4, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
  201c8e:	f8c4 3c24 	str.w	r3, [r4, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
  201c92:	f8c4 3c00 	str.w	r3, [r4, #3072]	; 0xc00
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
  201c96:	6416      	str	r6, [r2, #64]	; 0x40
  PWR->CR1 = STM32_VOS;
  201c98:	f8c5 e000 	str.w	lr, [r5]
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  201c9c:	6813      	ldr	r3, [r2, #0]
  201c9e:	f043 0301 	orr.w	r3, r3, #1
  201ca2:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  201ca4:	680b      	ldr	r3, [r1, #0]
  201ca6:	079e      	lsls	r6, r3, #30
  201ca8:	d5fc      	bpl.n	201ca4 <__early_init+0x194>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201caa:	688b      	ldr	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  201cac:	4a2a      	ldr	r2, [pc, #168]	; (201d58 <__early_init+0x248>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
  201cae:	f023 0303 	bic.w	r3, r3, #3
  201cb2:	608b      	str	r3, [r1, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  201cb4:	688b      	ldr	r3, [r1, #8]
  201cb6:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  201cb8:	6893      	ldr	r3, [r2, #8]
  201cba:	f013 030c 	ands.w	r3, r3, #12
  201cbe:	d1fb      	bne.n	201cb8 <__early_init+0x1a8>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  201cc0:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  201cc2:	4925      	ldr	r1, [pc, #148]	; (201d58 <__early_init+0x248>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  201cc4:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
  201cc8:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  201cca:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  201ccc:	6813      	ldr	r3, [r2, #0]
  201cce:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  201cd2:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  201cd4:	680b      	ldr	r3, [r1, #0]
  201cd6:	039d      	lsls	r5, r3, #14
  201cd8:	d5fc      	bpl.n	201cd4 <__early_init+0x1c4>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201cda:	4b2f      	ldr	r3, [pc, #188]	; (201d98 <__early_init+0x288>)
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  201cdc:	482f      	ldr	r0, [pc, #188]	; (201d9c <__early_init+0x28c>)
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201cde:	604b      	str	r3, [r1, #4]
  RCC->CR |= RCC_CR_PLLON;
  201ce0:	680b      	ldr	r3, [r1, #0]
  201ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  201ce6:	600b      	str	r3, [r1, #0]
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  201ce8:	6843      	ldr	r3, [r0, #4]
  201cea:	045c      	lsls	r4, r3, #17
  201cec:	d5fc      	bpl.n	201ce8 <__early_init+0x1d8>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  201cee:	6803      	ldr	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  201cf0:	4a2a      	ldr	r2, [pc, #168]	; (201d9c <__early_init+0x28c>)
  PWR->CR1 |= PWR_CR1_ODEN;
  201cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  201cf6:	6003      	str	r3, [r0, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  201cf8:	6853      	ldr	r3, [r2, #4]
  201cfa:	03d9      	lsls	r1, r3, #15
  201cfc:	d5fc      	bpl.n	201cf8 <__early_init+0x1e8>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201cfe:	6813      	ldr	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  201d00:	4926      	ldr	r1, [pc, #152]	; (201d9c <__early_init+0x28c>)
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  201d06:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  201d08:	684b      	ldr	r3, [r1, #4]
  201d0a:	039a      	lsls	r2, r3, #14
  201d0c:	d5fc      	bpl.n	201d08 <__early_init+0x1f8>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  201d0e:	4a12      	ldr	r2, [pc, #72]	; (201d58 <__early_init+0x248>)
  201d10:	6813      	ldr	r3, [r2, #0]
  201d12:	019b      	lsls	r3, r3, #6
  201d14:	d5fc      	bpl.n	201d10 <__early_init+0x200>
                  STM32_UART8SEL  | STM32_UART7SEL  | STM32_USART6SEL |
                  STM32_UART5SEL  | STM32_UART4SEL  | STM32_USART3SEL |
                  STM32_USART2SEL | STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  201d16:	4b22      	ldr	r3, [pc, #136]	; (201da0 <__early_init+0x290>)
  201d18:	f240 3109 	movw	r1, #777	; 0x309
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  201d1c:	4d21      	ldr	r5, [pc, #132]	; (201da4 <__early_init+0x294>)
    RCC->DCKCFGR1 = dckcfgr1;
  201d1e:	f240 1401 	movw	r4, #257	; 0x101
  RCC->DCKCFGR2 = STM32_SDMMC2SEL | STM32_SDMMC1SEL | STM32_CK48MSEL  |
  201d22:	2000      	movs	r0, #0
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  201d24:	6095      	str	r5, [r2, #8]
    RCC->DCKCFGR1 = dckcfgr1;
  201d26:	f8c2 408c 	str.w	r4, [r2, #140]	; 0x8c
  RCC->DCKCFGR2 = STM32_SDMMC2SEL | STM32_SDMMC1SEL | STM32_CK48MSEL  |
  201d2a:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  201d2e:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201d30:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201d32:	4909      	ldr	r1, [pc, #36]	; (201d58 <__early_init+0x248>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201d34:	f043 0302 	orr.w	r3, r3, #2
  201d38:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201d3a:	688b      	ldr	r3, [r1, #8]
  201d3c:	f003 030c 	and.w	r3, r3, #12
  201d40:	2b08      	cmp	r3, #8
  201d42:	d1fa      	bne.n	201d3a <__early_init+0x22a>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
  201d44:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  201d46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  201d4a:	644b      	str	r3, [r1, #68]	; 0x44
  201d4c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  201d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  201d52:	664b      	str	r3, [r1, #100]	; 0x64
  201d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  201d58:	40023800 	.word	0x40023800
  201d5c:	40020c00 	.word	0x40020c00
  201d60:	40020000 	.word	0x40020000
  201d64:	18004001 	.word	0x18004001
  201d68:	55505555 	.word	0x55505555
  201d6c:	cffffff3 	.word	0xcffffff3
  201d70:	40021400 	.word	0x40021400
  201d74:	003fcfff 	.word	0x003fcfff
  201d78:	40021800 	.word	0x40021800
  201d7c:	3cccf000 	.word	0x3cccf000
  201d80:	00b0b000 	.word	0x00b0b000
  201d84:	40021c00 	.word	0x40021c00
  201d88:	55555550 	.word	0x55555550
  201d8c:	40022400 	.word	0x40022400
  201d90:	40022000 	.word	0x40022000
  201d94:	10000400 	.word	0x10000400
  201d98:	09406c08 	.word	0x09406c08
  201d9c:	40007000 	.word	0x40007000
  201da0:	40023c00 	.word	0x40023c00
  201da4:	30999400 	.word	0x30999400
  201da8:	000aaa0a 	.word	0x000aaa0a
  201dac:	40005551 	.word	0x40005551
  201db0:	b0000bb0 	.word	0xb0000bb0
  201db4:	2aae8028 	.word	0x2aae8028
  201db8:	01555051 	.word	0x01555051
  201dbc:	00bb00b0 	.word	0x00bb00b0
  201dc0:	51155555 	.word	0x51155555
	...

00201dd0 <Vector118>:
/**
 * @brief   TIM6 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM6_HANDLER) {
  201dd0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->tim->SR = 0;
  201dd2:	4b0b      	ldr	r3, [pc, #44]	; (201e00 <Vector118+0x30>)
  201dd4:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  201dd6:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  201dd8:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  201dda:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  201ddc:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  201dde:	d107      	bne.n	201df0 <Vector118+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  201de0:	2002      	movs	r0, #2
  201de2:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  201de4:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  201de6:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  201de8:	68d1      	ldr	r1, [r2, #12]
  201dea:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  201dee:	60d1      	str	r1, [r2, #12]
    gpt_lld_stop_timer(gptp);               /* Timer automatically stopped. */
  }
  gptp->config->callback(gptp);
  201df0:	685b      	ldr	r3, [r3, #4]
  201df2:	4803      	ldr	r0, [pc, #12]	; (201e00 <Vector118+0x30>)
  201df4:	685b      	ldr	r3, [r3, #4]
  201df6:	4798      	blx	r3
}
  201df8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201dfc:	f7ff b890 	b.w	200f20 <_port_irq_epilogue>
  201e00:	200008ec 	.word	0x200008ec
	...

00201e10 <VectorB8>:
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
  201e10:	b508      	push	{r3, lr}
  gptp->tim->SR = 0;
  201e12:	4b0b      	ldr	r3, [pc, #44]	; (201e40 <VectorB8+0x30>)
  201e14:	2100      	movs	r1, #0
  if (gptp->state == GPT_ONESHOT) {
  201e16:	7818      	ldrb	r0, [r3, #0]
  gptp->tim->SR = 0;
  201e18:	68da      	ldr	r2, [r3, #12]
  if (gptp->state == GPT_ONESHOT) {
  201e1a:	2804      	cmp	r0, #4
  gptp->tim->SR = 0;
  201e1c:	6111      	str	r1, [r2, #16]
  if (gptp->state == GPT_ONESHOT) {
  201e1e:	d107      	bne.n	201e30 <VectorB8+0x20>
    gptp->state = GPT_READY;                /* Back in GPT_READY state.     */
  201e20:	2002      	movs	r0, #2
  201e22:	7018      	strb	r0, [r3, #0]
  gptp->tim->CR1 = 0;                           /* Initially stopped.       */
  201e24:	6011      	str	r1, [r2, #0]
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  201e26:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  201e28:	68d1      	ldr	r1, [r2, #12]
  201e2a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
  201e2e:	60d1      	str	r1, [r2, #12]
  gptp->config->callback(gptp);
  201e30:	685b      	ldr	r3, [r3, #4]
  201e32:	4803      	ldr	r0, [pc, #12]	; (201e40 <VectorB8+0x30>)
  201e34:	685b      	ldr	r3, [r3, #4]
  201e36:	4798      	blx	r3
}
  201e38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  201e3c:	f7ff b870 	b.w	200f20 <_port_irq_epilogue>
  201e40:	200008dc 	.word	0x200008dc
	...

00201e50 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
  201e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
  201e54:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
  201e58:	6933      	ldr	r3, [r6, #16]
  201e5a:	079b      	lsls	r3, r3, #30
  201e5c:	d403      	bmi.n	201e66 <VectorB0+0x16>
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
  201e5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
  201e62:	f7ff b85d 	b.w	200f20 <_port_irq_epilogue>
    STM32_ST_TIM->SR = 0U;
  201e66:	2300      	movs	r3, #0
  201e68:	2220      	movs	r2, #32
  201e6a:	6133      	str	r3, [r6, #16]
  201e6c:	f382 8811 	msr	BASEPRI, r2
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
  201e70:	4c1e      	ldr	r4, [pc, #120]	; (201eec <VectorB0+0x9c>)
  201e72:	46b1      	mov	r9, r6
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
  201e74:	4698      	mov	r8, r3
  vtp = ch.vtlist.next;
  201e76:	4626      	mov	r6, r4
  201e78:	f856 3f1c 	ldr.w	r3, [r6, #28]!
  201e7c:	689a      	ldr	r2, [r3, #8]
  201e7e:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
  201e82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  201e84:	1a47      	subs	r7, r0, r1
    if (nowdelta < vtp->delta) {
  201e86:	4297      	cmp	r7, r2
  201e88:	d31a      	bcc.n	201ec0 <VectorB0+0x70>
  201e8a:	2520      	movs	r5, #32
  201e8c:	e00a      	b.n	201ea4 <VectorB0+0x54>
  201e8e:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
  201e92:	6918      	ldr	r0, [r3, #16]
  201e94:	4790      	blx	r2
  201e96:	f385 8811 	msr	BASEPRI, r5
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
  201e9a:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
  201e9c:	689a      	ldr	r2, [r3, #8]
  201e9e:	4297      	cmp	r7, r2
  201ea0:	d3ed      	bcc.n	201e7e <VectorB0+0x2e>
  201ea2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  201ea4:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
  201ea6:	4411      	add	r1, r2
      nowdelta -= vtp->delta;
  201ea8:	1abf      	subs	r7, r7, r2
      fn = vtp->func;
  201eaa:	68da      	ldr	r2, [r3, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  201eac:	42b0      	cmp	r0, r6
      ch.vtlist.lasttime += vtp->delta;
  201eae:	62a1      	str	r1, [r4, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
  201eb0:	6046      	str	r6, [r0, #4]
      ch.vtlist.next = vtp->next;
  201eb2:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
  201eb4:	f8c3 800c 	str.w	r8, [r3, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  201eb8:	d1e9      	bne.n	201e8e <VectorB0+0x3e>
  STM32_ST_TIM->DIER = 0;
  201eba:	f8c9 800c 	str.w	r8, [r9, #12]
  201ebe:	e7e6      	b.n	201e8e <VectorB0+0x3e>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
  201ec0:	69e2      	ldr	r2, [r4, #28]
  201ec2:	42b2      	cmp	r2, r6
  201ec4:	d00a      	beq.n	201edc <VectorB0+0x8c>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
  201ec6:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
  201ec8:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
  201eca:	1bcf      	subs	r7, r1, r7
  201ecc:	6097      	str	r7, [r2, #8]
  return systime + (systime_t)interval;
  201ece:	689b      	ldr	r3, [r3, #8]
  201ed0:	2b02      	cmp	r3, #2
  201ed2:	bf2c      	ite	cs
  201ed4:	18c0      	addcs	r0, r0, r3
  201ed6:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  201ed8:	f8c9 0034 	str.w	r0, [r9, #52]	; 0x34
  201edc:	2300      	movs	r3, #0
  201ede:	f383 8811 	msr	BASEPRI, r3
}
  201ee2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
  201ee6:	f7ff b81b 	b.w	200f20 <_port_irq_epilogue>
  201eea:	bf00      	nop
  201eec:	20001248 	.word	0x20001248

00201ef0 <usb_lld_start_in>:
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
  201ef0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  201ef4:	b4f0      	push	{r4, r5, r6, r7}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
  201ef6:	68dc      	ldr	r4, [r3, #12]
  201ef8:	6962      	ldr	r2, [r4, #20]
  isp->totsize = isp->txsize;
  201efa:	6813      	ldr	r3, [r2, #0]
  201efc:	60d3      	str	r3, [r2, #12]
  if (isp->txsize == 0) {
  201efe:	b34b      	cbz	r3, 201f54 <usb_lld_start_in+0x64>
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
  201f00:	2900      	cmp	r1, #0
  201f02:	d146      	bne.n	201f92 <usb_lld_start_in+0xa2>
  201f04:	2b40      	cmp	r3, #64	; 0x40
  201f06:	d944      	bls.n	201f92 <usb_lld_start_in+0xa2>
      isp->txsize = EP0_MAX_INSIZE;
  201f08:	2640      	movs	r6, #64	; 0x40
  201f0a:	4d23      	ldr	r5, [pc, #140]	; (201f98 <usb_lld_start_in+0xa8>)
  201f0c:	4633      	mov	r3, r6
  201f0e:	6016      	str	r6, [r2, #0]
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
  201f10:	8a26      	ldrh	r6, [r4, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
  201f12:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
  201f14:	1e70      	subs	r0, r6, #1
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
  201f16:	eb02 1741 	add.w	r7, r2, r1, lsl #5
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
  201f1a:	4403      	add	r3, r0
  201f1c:	fbb3 f3f6 	udiv	r3, r3, r6
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
  201f20:	ea45 43c3 	orr.w	r3, r5, r3, lsl #19
  201f24:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
  201f28:	6823      	ldr	r3, [r4, #0]
  201f2a:	f003 0303 	and.w	r3, r3, #3
  201f2e:	2b01      	cmp	r3, #1
  201f30:	d11c      	bne.n	201f6c <usb_lld_start_in+0x7c>
  201f32:	b208      	sxth	r0, r1
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
  201f34:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
  201f38:	eb02 1440 	add.w	r4, r2, r0, lsl #5
  201f3c:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
  201f40:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
  201f44:	bf14      	ite	ne
  201f46:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  201f4a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
  201f4e:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
  201f52:	e00c      	b.n	201f6e <usb_lld_start_in+0x7e>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  201f54:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  201f56:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  201f5a:	eb02 1341 	add.w	r3, r2, r1, lsl #5
  201f5e:	f8c3 0910 	str.w	r0, [r3, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
  201f62:	6823      	ldr	r3, [r4, #0]
  201f64:	f003 0303 	and.w	r3, r3, #3
  201f68:	2b01      	cmp	r3, #1
  201f6a:	d0e2      	beq.n	201f32 <usb_lld_start_in+0x42>
  201f6c:	b208      	sxth	r0, r1
  201f6e:	eb02 1040 	add.w	r0, r2, r0, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
  201f72:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  201f74:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
  201f78:	fa03 f101 	lsl.w	r1, r3, r1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  201f7c:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
  201f80:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
  201f84:	f8d2 3834 	ldr.w	r3, [r2, #2100]	; 0x834
  201f88:	4319      	orrs	r1, r3
}
  201f8a:	bcf0      	pop	{r4, r5, r6, r7}
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
  201f8c:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
  201f90:	4770      	bx	lr
  201f92:	f043 5500 	orr.w	r5, r3, #536870912	; 0x20000000
  201f96:	e7bb      	b.n	201f10 <usb_lld_start_in+0x20>
  201f98:	20000040 	.word	0x20000040
  201f9c:	00000000 	.word	0x00000000

00201fa0 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
  201fa0:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  201fa4:	b470      	push	{r4, r5, r6}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
  201fa6:	68dc      	ldr	r4, [r3, #12]
  201fa8:	69a3      	ldr	r3, [r4, #24]
  osp->totsize = osp->rxsize;
  201faa:	681e      	ldr	r6, [r3, #0]
  201fac:	60de      	str	r6, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
  201fae:	b921      	cbnz	r1, 201fba <usb_lld_start_out+0x1a>
  201fb0:	2e40      	cmp	r6, #64	; 0x40
  201fb2:	d902      	bls.n	201fba <usb_lld_start_out+0x1a>
      osp->rxsize = EP0_MAX_OUTSIZE;
  201fb4:	2240      	movs	r2, #64	; 0x40
  201fb6:	4616      	mov	r6, r2
  201fb8:	601a      	str	r2, [r3, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
  201fba:	8a63      	ldrh	r3, [r4, #18]
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
  201fbc:	6824      	ldr	r4, [r4, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
  201fbe:	1e5a      	subs	r2, r3, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
  201fc0:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
  201fc2:	f004 0403 	and.w	r4, r4, #3
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
  201fc6:	4432      	add	r2, r6
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
  201fc8:	eb00 1541 	add.w	r5, r0, r1, lsl #5
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
  201fcc:	2c01      	cmp	r4, #1
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
  201fce:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
  201fd2:	fb02 f303 	mul.w	r3, r2, r3
  201fd6:	f103 0303 	add.w	r3, r3, #3
  201fda:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
  201fde:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
  201fe2:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
  201fe6:	f8c5 3b10 	str.w	r3, [r5, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
  201fea:	d00a      	beq.n	202002 <usb_lld_start_out+0x62>
  201fec:	b209      	sxth	r1, r1
  201fee:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
  201ff2:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
  201ff6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
}
  201ffa:	bc70      	pop	{r4, r5, r6}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
  201ffc:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
  202000:	4770      	bx	lr
  202002:	b209      	sxth	r1, r1
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
  202004:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  202008:	eb00 1241 	add.w	r2, r0, r1, lsl #5
  20200c:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
  202010:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
  202014:	bf14      	ite	ne
  202016:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
  20201a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
  20201e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  202022:	e7e4      	b.n	201fee <usb_lld_start_out+0x4e>
	...

00202030 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
  202030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stm32_otg_t *otgp = usbp->otg;
  202034:	4e93      	ldr	r6, [pc, #588]	; (202284 <Vector14C+0x254>)
  202036:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  sts  = otgp->GINTSTS;
  202038:	696f      	ldr	r7, [r5, #20]
  sts &= otgp->GINTMSK;
  20203a:	69ab      	ldr	r3, [r5, #24]
  20203c:	401f      	ands	r7, r3
  if (sts & GINTSTS_USBRST) {
  20203e:	f417 5a80 	ands.w	sl, r7, #4096	; 0x1000
  otgp->GINTSTS = sts;
  202042:	616f      	str	r7, [r5, #20]
  if (sts & GINTSTS_USBRST) {
  202044:	f040 8120 	bne.w	202288 <Vector14C+0x258>
  if (sts & GINTSTS_WKUPINT) {
  202048:	2f00      	cmp	r7, #0
  20204a:	f2c0 80fe 	blt.w	20224a <Vector14C+0x21a>
  if (sts & GINTSTS_USBSUSP) {
  20204e:	0539      	lsls	r1, r7, #20
  202050:	f100 80ed 	bmi.w	20222e <Vector14C+0x1fe>
  if (sts & GINTSTS_ENUMDNE) {
  202054:	04ba      	lsls	r2, r7, #18
  202056:	d50c      	bpl.n	202072 <Vector14C+0x42>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
  202058:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
  20205c:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
  202060:	68eb      	ldr	r3, [r5, #12]
  202062:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
  202066:	bf0c      	ite	eq
  202068:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
  20206c:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
  202070:	60eb      	str	r3, [r5, #12]
  if (sts & GINTSTS_SOF) {
  202072:	073b      	lsls	r3, r7, #28
  202074:	d434      	bmi.n	2020e0 <Vector14C+0xb0>
  if (sts & GINTSTS_IISOIXFR) {
  202076:	02fc      	lsls	r4, r7, #11
  202078:	d43a      	bmi.n	2020f0 <Vector14C+0xc0>
  if (sts & GINTSTS_IISOOXFR) {
  20207a:	02b8      	lsls	r0, r7, #10
  20207c:	f100 80a9 	bmi.w	2021d2 <Vector14C+0x1a2>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
  202080:	06fb      	lsls	r3, r7, #27
  202082:	d479      	bmi.n	202178 <Vector14C+0x148>
  if (sts & GINTSTS_OEPINT) {
  202084:	033b      	lsls	r3, r7, #12
  src = otgp->DAINT;
  202086:	f8d5 4818 	ldr.w	r4, [r5, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
  20208a:	d511      	bpl.n	2020b0 <Vector14C+0x80>
    if (src & (1 << 16))
  20208c:	03e6      	lsls	r6, r4, #15
  20208e:	f100 81ca 	bmi.w	202426 <Vector14C+0x3f6>
    if (src & (1 << 17))
  202092:	03a5      	lsls	r5, r4, #14
  202094:	f100 81c3 	bmi.w	20241e <Vector14C+0x3ee>
    if (src & (1 << 18))
  202098:	0360      	lsls	r0, r4, #13
  20209a:	f100 81bc 	bmi.w	202416 <Vector14C+0x3e6>
    if (src & (1 << 19))
  20209e:	0321      	lsls	r1, r4, #12
  2020a0:	f100 81b5 	bmi.w	20240e <Vector14C+0x3de>
    if (src & (1 << 20))
  2020a4:	02e2      	lsls	r2, r4, #11
  2020a6:	f100 81ae 	bmi.w	202406 <Vector14C+0x3d6>
    if (src & (1 << 21))
  2020aa:	02a3      	lsls	r3, r4, #10
  2020ac:	f100 8166 	bmi.w	20237c <Vector14C+0x34c>
  if (sts & GINTSTS_IEPINT) {
  2020b0:	037f      	lsls	r7, r7, #13
  2020b2:	d511      	bpl.n	2020d8 <Vector14C+0xa8>
    if (src & (1 << 0))
  2020b4:	07e6      	lsls	r6, r4, #31
  2020b6:	f100 81a2 	bmi.w	2023fe <Vector14C+0x3ce>
    if (src & (1 << 1))
  2020ba:	07a5      	lsls	r5, r4, #30
  2020bc:	f100 819b 	bmi.w	2023f6 <Vector14C+0x3c6>
    if (src & (1 << 2))
  2020c0:	0760      	lsls	r0, r4, #29
  2020c2:	f100 8194 	bmi.w	2023ee <Vector14C+0x3be>
    if (src & (1 << 3))
  2020c6:	0721      	lsls	r1, r4, #28
  2020c8:	f100 8187 	bmi.w	2023da <Vector14C+0x3aa>
    if (src & (1 << 4))
  2020cc:	06e2      	lsls	r2, r4, #27
  2020ce:	f100 818a 	bmi.w	2023e6 <Vector14C+0x3b6>
    if (src & (1 << 5))
  2020d2:	06a3      	lsls	r3, r4, #26
  2020d4:	f100 814b 	bmi.w	20236e <Vector14C+0x33e>
}
  2020d8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
  2020dc:	f7fe bf20 	b.w	200f20 <_port_irq_epilogue>
    _usb_isr_invoke_sof_cb(usbp);
  2020e0:	6873      	ldr	r3, [r6, #4]
  2020e2:	68db      	ldr	r3, [r3, #12]
  2020e4:	2b00      	cmp	r3, #0
  2020e6:	d0c6      	beq.n	202076 <Vector14C+0x46>
  2020e8:	4866      	ldr	r0, [pc, #408]	; (202284 <Vector14C+0x254>)
  2020ea:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
  2020ec:	02fc      	lsls	r4, r7, #11
  2020ee:	d5c4      	bpl.n	20207a <Vector14C+0x4a>
  stm32_otg_t *otgp = usbp->otg;
  2020f0:	f8d6 b06c 	ldr.w	fp, [r6, #108]	; 0x6c
  2020f4:	2400      	movs	r4, #0
      _usb_isr_invoke_in_cb(usbp, ep);
  2020f6:	f04f 0801 	mov.w	r8, #1
  2020fa:	f8df 9188 	ldr.w	r9, [pc, #392]	; 202284 <Vector14C+0x254>
  2020fe:	e006      	b.n	20210e <Vector14C+0xde>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
  202100:	3401      	adds	r4, #1
  202102:	6f33      	ldr	r3, [r6, #112]	; 0x70
  202104:	b2e4      	uxtb	r4, r4
  202106:	689b      	ldr	r3, [r3, #8]
  202108:	429c      	cmp	r4, r3
  20210a:	46a2      	mov	sl, r4
  20210c:	d8b5      	bhi.n	20207a <Vector14C+0x4a>
  20210e:	eb0b 1244 	add.w	r2, fp, r4, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
  202112:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
  202116:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  20211a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
  20211e:	d1ef      	bne.n	202100 <Vector14C+0xd0>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
  202120:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
  202124:	2b00      	cmp	r3, #0
  202126:	daeb      	bge.n	202100 <Vector14C+0xd0>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
  202128:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
  20212c:	f043 4390 	orr.w	r3, r3, #1207959552	; 0x48000000
  202130:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
  202134:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
  202138:	2b00      	cmp	r3, #0
  20213a:	dbfb      	blt.n	202134 <Vector14C+0x104>
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
  20213c:	ea4f 1a8a 	mov.w	sl, sl, lsl #6
  202140:	6ef2      	ldr	r2, [r6, #108]	; 0x6c
  202142:	f04a 0320 	orr.w	r3, sl, #32
  202146:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
  202148:	6913      	ldr	r3, [r2, #16]
  20214a:	0699      	lsls	r1, r3, #26
  20214c:	d4fc      	bmi.n	202148 <Vector14C+0x118>
  chSysPolledDelayX(cycles);
  20214e:	2012      	movs	r0, #18
  202150:	f7ff f89e 	bl	201290 <chSysPolledDelayX>
      _usb_isr_invoke_in_cb(usbp, ep);
  202154:	8932      	ldrh	r2, [r6, #8]
  202156:	eb06 0184 	add.w	r1, r6, r4, lsl #2
  20215a:	fa08 f304 	lsl.w	r3, r8, r4
  20215e:	68c9      	ldr	r1, [r1, #12]
  202160:	ea22 0303 	bic.w	r3, r2, r3
  202164:	688a      	ldr	r2, [r1, #8]
  202166:	8133      	strh	r3, [r6, #8]
  202168:	b112      	cbz	r2, 202170 <Vector14C+0x140>
  20216a:	4621      	mov	r1, r4
  20216c:	4648      	mov	r0, r9
  20216e:	4790      	blx	r2
    otg_txfifo_handler(usbp, ep);
  202170:	4620      	mov	r0, r4
  202172:	f001 fbbd 	bl	2038f0 <otg_txfifo_handler.constprop.6>
  202176:	e7c3      	b.n	202100 <Vector14C+0xd0>
  sts = usbp->otg->GRXSTSP;
  202178:	f8d6 e06c 	ldr.w	lr, [r6, #108]	; 0x6c
  20217c:	f8de 3020 	ldr.w	r3, [lr, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
  202180:	f403 11f0 	and.w	r1, r3, #1966080	; 0x1e0000
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
  202184:	f3c3 120a 	ubfx	r2, r3, #4, #11
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
  202188:	f003 030f 	and.w	r3, r3, #15
  switch (sts & GRXSTSP_PKTSTS_MASK) {
  20218c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
  202190:	f000 80fb 	beq.w	20238a <Vector14C+0x35a>
  202194:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
  202198:	f47f af74 	bne.w	202084 <Vector14C+0x54>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
  20219c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  2021a0:	68db      	ldr	r3, [r3, #12]
  2021a2:	6a18      	ldr	r0, [r3, #32]
  while (i < n) {
  2021a4:	2a00      	cmp	r2, #0
  2021a6:	f43f af6d 	beq.w	202084 <Vector14C+0x54>
  2021aa:	2100      	movs	r1, #0
      w = *fifop;
  2021ac:	f50e 5e80 	add.w	lr, lr, #4096	; 0x1000
  while (i < n) {
  2021b0:	460b      	mov	r3, r1
  2021b2:	e002      	b.n	2021ba <Vector14C+0x18a>
  2021b4:	429a      	cmp	r2, r3
  2021b6:	f43f af65 	beq.w	202084 <Vector14C+0x54>
    if ((i & 3) == 0){
  2021ba:	079e      	lsls	r6, r3, #30
  2021bc:	d101      	bne.n	2021c2 <Vector14C+0x192>
      w = *fifop;
  2021be:	f8de 1000 	ldr.w	r1, [lr]
    if (i < max) {
  2021c2:	2b07      	cmp	r3, #7
    i++;
  2021c4:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
  2021c8:	d8f4      	bhi.n	2021b4 <Vector14C+0x184>
      *buf++ = (uint8_t)w;
  2021ca:	7001      	strb	r1, [r0, #0]
      w >>= 8;
  2021cc:	0a09      	lsrs	r1, r1, #8
      *buf++ = (uint8_t)w;
  2021ce:	3001      	adds	r0, #1
  2021d0:	e7f0      	b.n	2021b4 <Vector14C+0x184>
  stm32_otg_t *otgp = usbp->otg;
  2021d2:	f8d6 806c 	ldr.w	r8, [r6, #108]	; 0x6c
  2021d6:	2400      	movs	r4, #0
      _usb_isr_invoke_out_cb(usbp, ep);
  2021d8:	f04f 0a01 	mov.w	sl, #1
  2021dc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 202284 <Vector14C+0x254>
  2021e0:	e006      	b.n	2021f0 <Vector14C+0x1c0>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
  2021e2:	3401      	adds	r4, #1
  2021e4:	6f33      	ldr	r3, [r6, #112]	; 0x70
  2021e6:	b2e4      	uxtb	r4, r4
  2021e8:	689b      	ldr	r3, [r3, #8]
  2021ea:	429c      	cmp	r4, r3
  2021ec:	f63f af48 	bhi.w	202080 <Vector14C+0x50>
  2021f0:	eb08 1244 	add.w	r2, r8, r4, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
  2021f4:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
  2021f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
  2021fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
  202200:	d1ef      	bne.n	2021e2 <Vector14C+0x1b2>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
  202202:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
  202206:	2b00      	cmp	r3, #0
  202208:	daeb      	bge.n	2021e2 <Vector14C+0x1b2>
      _usb_isr_invoke_out_cb(usbp, ep);
  20220a:	eb06 0084 	add.w	r0, r6, r4, lsl #2
  20220e:	8972      	ldrh	r2, [r6, #10]
  202210:	fa0a f304 	lsl.w	r3, sl, r4
  202214:	4621      	mov	r1, r4
  202216:	f8d0 e00c 	ldr.w	lr, [r0, #12]
  20221a:	4648      	mov	r0, r9
  20221c:	ea22 0303 	bic.w	r3, r2, r3
  202220:	f8de 200c 	ldr.w	r2, [lr, #12]
  202224:	8173      	strh	r3, [r6, #10]
  202226:	2a00      	cmp	r2, #0
  202228:	d0db      	beq.n	2021e2 <Vector14C+0x1b2>
  20222a:	4790      	blx	r2
  20222c:	e7d9      	b.n	2021e2 <Vector14C+0x1b2>
  usbp->saved_state = usbp->state;
  20222e:	7831      	ldrb	r1, [r6, #0]
  usbp->state       = USB_SUSPENDED;
  202230:	2205      	movs	r2, #5
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
  202232:	6873      	ldr	r3, [r6, #4]
  usbp->saved_state = usbp->state;
  202234:	f886 1068 	strb.w	r1, [r6, #104]	; 0x68
  usbp->state       = USB_SUSPENDED;
  202238:	7032      	strb	r2, [r6, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
  20223a:	681b      	ldr	r3, [r3, #0]
  20223c:	2b00      	cmp	r3, #0
  20223e:	f43f af09 	beq.w	202054 <Vector14C+0x24>
  202242:	2104      	movs	r1, #4
  202244:	480f      	ldr	r0, [pc, #60]	; (202284 <Vector14C+0x254>)
  202246:	4798      	blx	r3
  202248:	e704      	b.n	202054 <Vector14C+0x24>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
  20224a:	f8d5 3e00 	ldr.w	r3, [r5, #3584]	; 0xe00
  20224e:	0798      	lsls	r0, r3, #30
  202250:	d005      	beq.n	20225e <Vector14C+0x22e>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
  202252:	f8d5 3e00 	ldr.w	r3, [r5, #3584]	; 0xe00
  202256:	f023 0303 	bic.w	r3, r3, #3
  20225a:	f8c5 3e00 	str.w	r3, [r5, #3584]	; 0xe00
    otgp->DCTL &= ~DCTL_RWUSIG;
  20225e:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
  usbp->state = usbp->saved_state;
  202262:	f896 1068 	ldrb.w	r1, [r6, #104]	; 0x68
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
  202266:	6872      	ldr	r2, [r6, #4]
  202268:	f023 0301 	bic.w	r3, r3, #1
  usbp->state = usbp->saved_state;
  20226c:	7031      	strb	r1, [r6, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
  20226e:	6812      	ldr	r2, [r2, #0]
  202270:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
  202274:	2a00      	cmp	r2, #0
  202276:	f43f aeea 	beq.w	20204e <Vector14C+0x1e>
  20227a:	2105      	movs	r1, #5
  20227c:	4801      	ldr	r0, [pc, #4]	; (202284 <Vector14C+0x254>)
  20227e:	4790      	blx	r2
  202280:	e6e5      	b.n	20204e <Vector14C+0x1e>
  202282:	bf00      	nop
  202284:	200011d0 	.word	0x200011d0
  usbp->status        = 0;
  202288:	2300      	movs	r3, #0
  usbp->state         = USB_READY;
  20228a:	2102      	movs	r1, #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
  20228c:	2220      	movs	r2, #32
  usbp->status        = 0;
  20228e:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
  usbp->address       = 0;
  202292:	f886 3066 	strb.w	r3, [r6, #102]	; 0x66
  usbp->configuration = 0;
  202296:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
    usbp->epc[i] = NULL;
  20229a:	60f3      	str	r3, [r6, #12]
  20229c:	6133      	str	r3, [r6, #16]
  20229e:	6173      	str	r3, [r6, #20]
  2022a0:	61b3      	str	r3, [r6, #24]
  2022a2:	61f3      	str	r3, [r6, #28]
  2022a4:	6233      	str	r3, [r6, #32]
  usbp->ep0state = USB_EP0_STP_WAITING;
  2022a6:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
  usbp->transmitting  = 0;
  2022aa:	8133      	strh	r3, [r6, #8]
  usbp->receiving     = 0;
  2022ac:	8173      	strh	r3, [r6, #10]
  usbp->state         = USB_READY;
  2022ae:	7031      	strb	r1, [r6, #0]
  2022b0:	612a      	str	r2, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
  2022b2:	692c      	ldr	r4, [r5, #16]
  2022b4:	f014 0420 	ands.w	r4, r4, #32
  2022b8:	d1fb      	bne.n	2022b2 <Vector14C+0x282>
  2022ba:	2012      	movs	r0, #18
  2022bc:	f7fe ffe8 	bl	201290 <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  2022c0:	6f37      	ldr	r7, [r6, #112]	; 0x70
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
  2022c2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
  2022c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
  2022ca:	f04f 32ff 	mov.w	r2, #4294967295
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  2022ce:	68b8      	ldr	r0, [r7, #8]
  otgp->DIEPEMPMSK = 0;
  2022d0:	f8c5 4834 	str.w	r4, [r5, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
  2022d4:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
  2022d8:	eb05 1344 	add.w	r3, r5, r4, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  2022dc:	3401      	adds	r4, #1
  2022de:	4284      	cmp	r4, r0
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
  2022e0:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
  2022e4:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
  2022e8:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  2022ec:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  2022f0:	d9f2      	bls.n	2022d8 <Vector14C+0x2a8>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
  2022f2:	6839      	ldr	r1, [r7, #0]
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
  2022f4:	2210      	movs	r2, #16
  2022f6:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
  2022f8:	6771      	str	r1, [r6, #116]	; 0x74
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  2022fa:	6839      	ldr	r1, [r7, #0]
  2022fc:	6269      	str	r1, [r5, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
  2022fe:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
  202300:	691c      	ldr	r4, [r3, #16]
  202302:	f014 0410 	ands.w	r4, r4, #16
  202306:	d1fb      	bne.n	202300 <Vector14C+0x2d0>
  202308:	2012      	movs	r0, #18
  20230a:	f7fe ffc1 	bl	201290 <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
  20230e:	f8d5 1800 	ldr.w	r1, [r5, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  202312:	4a47      	ldr	r2, [pc, #284]	; (202430 <Vector14C+0x400>)
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  202314:	2009      	movs	r0, #9
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
  202316:	f421 61fe 	bic.w	r1, r1, #2032	; 0x7f0
  next = usbp->pmnext;
  20231a:	6f73      	ldr	r3, [r6, #116]	; 0x74
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
  20231c:	6877      	ldr	r7, [r6, #4]
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
  20231e:	f04f 4ec0 	mov.w	lr, #1610612736	; 0x60000000
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
  202322:	f8c5 1800 	str.w	r1, [r5, #2048]	; 0x800
  usbp->pmnext += size;
  202326:	f103 0c10 	add.w	ip, r3, #16
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  20232a:	69a9      	ldr	r1, [r5, #24]
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
  20232c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  202330:	683f      	ldr	r7, [r7, #0]
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  202332:	430a      	orrs	r2, r1
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
  202334:	493f      	ldr	r1, [pc, #252]	; (202434 <Vector14C+0x404>)
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  202336:	61aa      	str	r2, [r5, #24]
  usbp->epc[0] = &ep0config;
  202338:	4a3f      	ldr	r2, [pc, #252]	; (202438 <Vector14C+0x408>)
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  20233a:	f8c5 0810 	str.w	r0, [r5, #2064]	; 0x810
  usbp->pmnext += size;
  20233e:	f8c6 c074 	str.w	ip, [r6, #116]	; 0x74
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
  202342:	f8c5 0814 	str.w	r0, [r5, #2068]	; 0x814
  usbp->epc[0] = &ep0config;
  202346:	60f2      	str	r2, [r6, #12]
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
  202348:	f8c5 eb10 	str.w	lr, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
  20234c:	f8c5 1b00 	str.w	r1, [r5, #2816]	; 0xb00
  otgp->ie[0].DIEPTSIZ = 0;
  202350:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
  202354:	f8c5 1900 	str.w	r1, [r5, #2304]	; 0x900
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
  202358:	62ab      	str	r3, [r5, #40]	; 0x28
  20235a:	2f00      	cmp	r7, #0
  20235c:	f43f aebc 	beq.w	2020d8 <Vector14C+0xa8>
  202360:	4621      	mov	r1, r4
  202362:	4836      	ldr	r0, [pc, #216]	; (20243c <Vector14C+0x40c>)
  202364:	47b8      	blx	r7
}
  202366:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
  20236a:	f7fe bdd9 	b.w	200f20 <_port_irq_epilogue>
      otg_epin_handler(usbp, 5);
  20236e:	2005      	movs	r0, #5
  202370:	f001 fb66 	bl	203a40 <otg_epin_handler.constprop.2>
}
  202374:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
  202378:	f7fe bdd2 	b.w	200f20 <_port_irq_epilogue>
      otg_epout_handler(usbp, 5);
  20237c:	2005      	movs	r0, #5
  20237e:	f001 fb0f 	bl	2039a0 <otg_epout_handler.constprop.3>
  if (sts & GINTSTS_IEPINT) {
  202382:	037f      	lsls	r7, r7, #13
  202384:	f57f aea8 	bpl.w	2020d8 <Vector14C+0xa8>
  202388:	e694      	b.n	2020b4 <Vector14C+0x84>
                            usbp->epc[ep]->out_state->rxbuf,
  20238a:	f103 0802 	add.w	r8, r3, #2
  20238e:	eb06 0388 	add.w	r3, r6, r8, lsl #2
  202392:	685b      	ldr	r3, [r3, #4]
  202394:	6999      	ldr	r1, [r3, #24]
                            usbp->epc[ep]->out_state->rxcnt);
  202396:	684b      	ldr	r3, [r1, #4]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
  202398:	680c      	ldr	r4, [r1, #0]
  20239a:	6888      	ldr	r0, [r1, #8]
  20239c:	eba4 0c03 	sub.w	ip, r4, r3
  while (i < n) {
  2023a0:	b1b2      	cbz	r2, 2023d0 <Vector14C+0x3a0>
  2023a2:	2100      	movs	r1, #0
      w = *fifop;
  2023a4:	f50e 5e80 	add.w	lr, lr, #4096	; 0x1000
  while (i < n) {
  2023a8:	460b      	mov	r3, r1
    if ((i & 3) == 0){
  2023aa:	079c      	lsls	r4, r3, #30
  2023ac:	d101      	bne.n	2023b2 <Vector14C+0x382>
      w = *fifop;
  2023ae:	f8de 1000 	ldr.w	r1, [lr]
    if (i < max) {
  2023b2:	459c      	cmp	ip, r3
    i++;
  2023b4:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
  2023b8:	d902      	bls.n	2023c0 <Vector14C+0x390>
      *buf++ = (uint8_t)w;
  2023ba:	7001      	strb	r1, [r0, #0]
      w >>= 8;
  2023bc:	0a09      	lsrs	r1, r1, #8
      *buf++ = (uint8_t)w;
  2023be:	3001      	adds	r0, #1
  while (i < n) {
  2023c0:	429a      	cmp	r2, r3
  2023c2:	d1f2      	bne.n	2023aa <Vector14C+0x37a>
  2023c4:	eb06 0688 	add.w	r6, r6, r8, lsl #2
  2023c8:	6873      	ldr	r3, [r6, #4]
  2023ca:	6999      	ldr	r1, [r3, #24]
  2023cc:	6888      	ldr	r0, [r1, #8]
  2023ce:	684b      	ldr	r3, [r1, #4]
    usbp->epc[ep]->out_state->rxbuf += cnt;
  2023d0:	4410      	add	r0, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
  2023d2:	441a      	add	r2, r3
    usbp->epc[ep]->out_state->rxbuf += cnt;
  2023d4:	6088      	str	r0, [r1, #8]
    usbp->epc[ep]->out_state->rxcnt += cnt;
  2023d6:	604a      	str	r2, [r1, #4]
  2023d8:	e654      	b.n	202084 <Vector14C+0x54>
      otg_epin_handler(usbp, 3);
  2023da:	2003      	movs	r0, #3
  2023dc:	f001 fb30 	bl	203a40 <otg_epin_handler.constprop.2>
    if (src & (1 << 4))
  2023e0:	06e2      	lsls	r2, r4, #27
  2023e2:	f57f ae76 	bpl.w	2020d2 <Vector14C+0xa2>
      otg_epin_handler(usbp, 4);
  2023e6:	2004      	movs	r0, #4
  2023e8:	f001 fb2a 	bl	203a40 <otg_epin_handler.constprop.2>
  2023ec:	e671      	b.n	2020d2 <Vector14C+0xa2>
      otg_epin_handler(usbp, 2);
  2023ee:	2002      	movs	r0, #2
  2023f0:	f001 fb26 	bl	203a40 <otg_epin_handler.constprop.2>
  2023f4:	e667      	b.n	2020c6 <Vector14C+0x96>
      otg_epin_handler(usbp, 1);
  2023f6:	2001      	movs	r0, #1
  2023f8:	f001 fb22 	bl	203a40 <otg_epin_handler.constprop.2>
  2023fc:	e660      	b.n	2020c0 <Vector14C+0x90>
      otg_epin_handler(usbp, 0);
  2023fe:	2000      	movs	r0, #0
  202400:	f001 fb1e 	bl	203a40 <otg_epin_handler.constprop.2>
  202404:	e659      	b.n	2020ba <Vector14C+0x8a>
      otg_epout_handler(usbp, 4);
  202406:	2004      	movs	r0, #4
  202408:	f001 faca 	bl	2039a0 <otg_epout_handler.constprop.3>
  20240c:	e64d      	b.n	2020aa <Vector14C+0x7a>
      otg_epout_handler(usbp, 3);
  20240e:	2003      	movs	r0, #3
  202410:	f001 fac6 	bl	2039a0 <otg_epout_handler.constprop.3>
  202414:	e646      	b.n	2020a4 <Vector14C+0x74>
      otg_epout_handler(usbp, 2);
  202416:	2002      	movs	r0, #2
  202418:	f001 fac2 	bl	2039a0 <otg_epout_handler.constprop.3>
  20241c:	e63f      	b.n	20209e <Vector14C+0x6e>
      otg_epout_handler(usbp, 1);
  20241e:	2001      	movs	r0, #1
  202420:	f001 fabe 	bl	2039a0 <otg_epout_handler.constprop.3>
  202424:	e638      	b.n	202098 <Vector14C+0x68>
      otg_epout_handler(usbp, 0);
  202426:	2000      	movs	r0, #0
  202428:	f001 faba 	bl	2039a0 <otg_epout_handler.constprop.3>
  20242c:	e631      	b.n	202092 <Vector14C+0x62>
  20242e:	bf00      	nop
  202430:	000c0010 	.word	0x000c0010
  202434:	10008040 	.word	0x10008040
  202438:	08003b74 	.word	0x08003b74
  20243c:	200011d0 	.word	0x200011d0

00202440 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  202440:	4b08      	ldr	r3, [pc, #32]	; (202464 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
  202442:	4809      	ldr	r0, [pc, #36]	; (202468 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  202444:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
  202446:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  202448:	0d89      	lsrs	r1, r1, #22
  20244a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  20244e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22U;
  202450:	058c      	lsls	r4, r1, #22
  202452:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
  202454:	b10a      	cbz	r2, 20245a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
  202456:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
  202458:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
  20245a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20245e:	f7fe bd5f 	b.w	200f20 <_port_irq_epilogue>
  202462:	bf00      	nop
  202464:	40026400 	.word	0x40026400
  202468:	20000fcc 	.word	0x20000fcc
  20246c:	00000000 	.word	0x00000000

00202470 <Vector154>:
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  202470:	4b08      	ldr	r3, [pc, #32]	; (202494 <Vector154+0x24>)
  if (dma_isr_redir[14].dma_func)
  202472:	4809      	ldr	r0, [pc, #36]	; (202498 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  202474:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
  202476:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  202478:	0c09      	lsrs	r1, r1, #16
  20247a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  20247e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16U;
  202480:	040c      	lsls	r4, r1, #16
  202482:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
  202484:	b10a      	cbz	r2, 20248a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
  202486:	6f40      	ldr	r0, [r0, #116]	; 0x74
  202488:	4790      	blx	r2
}
  20248a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20248e:	f7fe bd47 	b.w	200f20 <_port_irq_epilogue>
  202492:	bf00      	nop
  202494:	40026400 	.word	0x40026400
  202498:	20000fcc 	.word	0x20000fcc
  20249c:	00000000 	.word	0x00000000

002024a0 <Thread1>:
/*
 * This is a periodic thread that does absolutely nothing except flashing
 * a LED attached to TP1.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
  2024a0:	b508      	push	{r3, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
  2024a2:	4b07      	ldr	r3, [pc, #28]	; (2024c0 <Thread1+0x20>)
  2024a4:	4a07      	ldr	r2, [pc, #28]	; (2024c4 <Thread1+0x24>)
  2024a6:	699b      	ldr	r3, [r3, #24]

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
	  	palToggleLine(LINE_LED1);
  2024a8:	4c07      	ldr	r4, [pc, #28]	; (2024c8 <Thread1+0x28>)
  2024aa:	619a      	str	r2, [r3, #24]
  2024ac:	6963      	ldr	r3, [r4, #20]
	    chThdSleepMilliseconds(200);
  2024ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
	  	palToggleLine(LINE_LED1);
  2024b2:	f083 0301 	eor.w	r3, r3, #1
  2024b6:	6163      	str	r3, [r4, #20]
	    chThdSleepMilliseconds(200);
  2024b8:	f7fe fd9a 	bl	200ff0 <chThdSleep>
  2024bc:	e7f6      	b.n	2024ac <Thread1+0xc>
  2024be:	bf00      	nop
  2024c0:	20001248 	.word	0x20001248
  2024c4:	08003cd4 	.word	0x08003cd4
  2024c8:	40020400 	.word	0x40020400
  2024cc:	00000000 	.word	0x00000000

002024d0 <main>:
  rccResetAHB1(~STM32_GPIO_EN_MASK);
  2024d0:	4b1d      	ldr	r3, [pc, #116]	; (202548 <main+0x78>)
  2024d2:	2200      	movs	r2, #0
  2024d4:	491d      	ldr	r1, [pc, #116]	; (20254c <main+0x7c>)
  rccResetAHB2(~0);
  2024d6:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
  2024da:	691d      	ldr	r5, [r3, #16]
  PWR->CR1 |= PWR_CR1_DBP;
  2024dc:	481c      	ldr	r0, [pc, #112]	; (202550 <main+0x80>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
  2024de:	4329      	orrs	r1, r5


/*
 * Application entry point.
 */
int main(void) {
  2024e0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  2024e4:	6119      	str	r1, [r3, #16]
  2024e6:	b089      	sub	sp, #36	; 0x24
  2024e8:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
  2024ea:	6959      	ldr	r1, [r3, #20]
  2024ec:	615c      	str	r4, [r3, #20]
  2024ee:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  2024f0:	6a19      	ldr	r1, [r3, #32]
  2024f2:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
  2024f6:	6219      	str	r1, [r3, #32]
  2024f8:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
  2024fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
  2024fc:	625c      	str	r4, [r3, #36]	; 0x24
  2024fe:	625a      	str	r2, [r3, #36]	; 0x24
  PWR->CR1 |= PWR_CR1_DBP;
  202500:	6801      	ldr	r1, [r0, #0]
  202502:	f441 7180 	orr.w	r1, r1, #256	; 0x100
  202506:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  202508:	6f19      	ldr	r1, [r3, #112]	; 0x70
  20250a:	f401 7140 	and.w	r1, r1, #768	; 0x300
  20250e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
  202512:	d003      	beq.n	20251c <main+0x4c>
    RCC->BDCR = RCC_BDCR_BDRST;
  202514:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  202518:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  20251a:	671a      	str	r2, [r3, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  20251c:	4b0a      	ldr	r3, [pc, #40]	; (202548 <main+0x78>)
  20251e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  202520:	4619      	mov	r1, r3
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  202522:	f042 0219 	orr.w	r2, r2, #25
  202526:	671a      	str	r2, [r3, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  202528:	6f0b      	ldr	r3, [r1, #112]	; 0x70
  20252a:	079e      	lsls	r6, r3, #30
  20252c:	d5fc      	bpl.n	202528 <main+0x58>
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  20252e:	4c08      	ldr	r4, [pc, #32]	; (202550 <main+0x80>)
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  202530:	2000      	movs	r0, #0
  202532:	4908      	ldr	r1, [pc, #32]	; (202554 <main+0x84>)
  202534:	6862      	ldr	r2, [r4, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  202536:	4603      	mov	r3, r0
    _stm32_dma_streams[i].stream->CR = 0U;
  202538:	4606      	mov	r6, r0
  dma_streams_mask = 0U;
  20253a:	4d07      	ldr	r5, [pc, #28]	; (202558 <main+0x88>)
  20253c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  202540:	6062      	str	r2, [r4, #4]
  202542:	4a06      	ldr	r2, [pc, #24]	; (20255c <main+0x8c>)
  202544:	6010      	str	r0, [r2, #0]
  202546:	e00d      	b.n	202564 <main+0x94>
  202548:	40023800 	.word	0x40023800
  20254c:	fffff800 	.word	0xfffff800
  202550:	40007000 	.word	0x40007000
  202554:	08003ce8 	.word	0x08003ce8
  202558:	40026010 	.word	0x40026010
  20255c:	2000104c 	.word	0x2000104c
  202560:	f851 5c0c 	ldr.w	r5, [r1, #-12]
    dma_isr_redir[i].dma_func = NULL;
  202564:	4ab6      	ldr	r2, [pc, #728]	; (202840 <main+0x370>)
  202566:	310c      	adds	r1, #12
    _stm32_dma_streams[i].stream->CR = 0U;
  202568:	602e      	str	r6, [r5, #0]
    dma_isr_redir[i].dma_func = NULL;
  20256a:	f842 6033 	str.w	r6, [r2, r3, lsl #3]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  20256e:	3301      	adds	r3, #1
  202570:	2b10      	cmp	r3, #16
  202572:	d1f5      	bne.n	202560 <main+0x90>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  202574:	f04f 32ff 	mov.w	r2, #4294967295
  202578:	4cb2      	ldr	r4, [pc, #712]	; (202844 <main+0x374>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  20257a:	4eb3      	ldr	r6, [pc, #716]	; (202848 <main+0x378>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20257c:	2060      	movs	r0, #96	; 0x60
  DMA1->LIFCR = 0xFFFFFFFFU;
  20257e:	60a2      	str	r2, [r4, #8]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202580:	2540      	movs	r5, #64	; 0x40
  DMA1->HIFCR = 0xFFFFFFFFU;
  202582:	60e2      	str	r2, [r4, #12]
  202584:	2780      	movs	r7, #128	; 0x80
  DMA2->LIFCR = 0xFFFFFFFFU;
  202586:	60b2      	str	r2, [r6, #8]
  202588:	f44f 7480 	mov.w	r4, #256	; 0x100
  DMA2->HIFCR = 0xFFFFFFFFU;
  20258c:	60f2      	str	r2, [r6, #12]
  20258e:	f44f 7200 	mov.w	r2, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202592:	4bae      	ldr	r3, [pc, #696]	; (20284c <main+0x37c>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202594:	f44f 6680 	mov.w	r6, #1024	; 0x400
  202598:	49ad      	ldr	r1, [pc, #692]	; (202850 <main+0x380>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20259a:	f883 0306 	strb.w	r0, [r3, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20259e:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025a2:	601d      	str	r5, [r3, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025a4:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025a8:	f883 0307 	strb.w	r0, [r3, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025ac:	f8c3 7180 	str.w	r7, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025b0:	601f      	str	r7, [r3, #0]
  2025b2:	190f      	adds	r7, r1, r4
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025b4:	f883 0308 	strb.w	r0, [r3, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025b8:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025bc:	601c      	str	r4, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025be:	f883 0309 	strb.w	r0, [r3, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025c6:	601a      	str	r2, [r3, #0]

#if PAL_USE_CALLBACKS || PAL_USE_WAIT || defined(__DOXYGEN__)
  unsigned i;

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  2025c8:	2200      	movs	r2, #0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025ca:	f883 030a 	strb.w	r0, [r3, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025ce:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025d2:	601e      	str	r6, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025d4:	f883 0317 	strb.w	r0, [r3, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025d8:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025dc:	601d      	str	r5, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2025de:	f883 0328 	strb.w	r0, [r3, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025e2:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  2025e6:	605c      	str	r4, [r3, #4]
  2025e8:	608a      	str	r2, [r1, #8]
  2025ea:	60ca      	str	r2, [r1, #12]
  tqp->next = (thread_t *)tqp;
  2025ec:	6009      	str	r1, [r1, #0]
  tqp->prev = (thread_t *)tqp;
  2025ee:	6049      	str	r1, [r1, #4]
  2025f0:	3110      	adds	r1, #16
  for (i = 0; i < 16; i++) {
  2025f2:	428f      	cmp	r7, r1
  2025f4:	d1f8      	bne.n	2025e8 <main+0x118>
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  2025f6:	4e97      	ldr	r6, [pc, #604]	; (202854 <main+0x384>)
  2025f8:	2001      	movs	r0, #1
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  2025fa:	4c97      	ldr	r4, [pc, #604]	; (202858 <main+0x388>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2025fc:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 *
 * @init
 */
void dacObjectInit(DACDriver *dacp) {

  dacp->state = DAC_STOP;
  202600:	4b96      	ldr	r3, [pc, #600]	; (20285c <main+0x38c>)
  tqp->next = (thread_t *)tqp;
  202602:	f106 0e18 	add.w	lr, r6, #24
  202606:	62b4      	str	r4, [r6, #40]	; 0x28
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202608:	f04f 0c60 	mov.w	ip, #96	; 0x60
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  20260c:	4c94      	ldr	r4, [pc, #592]	; (202860 <main+0x390>)
  20260e:	4995      	ldr	r1, [pc, #596]	; (202864 <main+0x394>)
  202610:	62f4      	str	r4, [r6, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
  202612:	4c95      	ldr	r4, [pc, #596]	; (202868 <main+0x398>)
  202614:	f8c6 e018 	str.w	lr, [r6, #24]
  202618:	6334      	str	r4, [r6, #48]	; 0x30
  20261a:	4c8c      	ldr	r4, [pc, #560]	; (20284c <main+0x37c>)
  tqp->prev = (thread_t *)tqp;
  20261c:	f8c6 e01c 	str.w	lr, [r6, #28]
  tqp->next = (thread_t *)tqp;
  202620:	f103 0e18 	add.w	lr, r3, #24
  adcp->config   = NULL;
  202624:	6072      	str	r2, [r6, #4]
  adcp->samples  = NULL;
  202626:	60b2      	str	r2, [r6, #8]
  adcp->depth    = 0;
  202628:	60f2      	str	r2, [r6, #12]
  adcp->grpp     = NULL;
  20262a:	6132      	str	r2, [r6, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
  20262c:	6172      	str	r2, [r6, #20]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
  20262e:	6232      	str	r2, [r6, #32]
  adcp->state    = ADC_STOP;
  202630:	7030      	strb	r0, [r6, #0]
  202632:	f884 c312 	strb.w	ip, [r4, #786]	; 0x312
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202636:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
  dacp->config = NULL;
  20263a:	611a      	str	r2, [r3, #16]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20263c:	6025      	str	r5, [r4, #0]
  20263e:	f101 0418 	add.w	r4, r1, #24
 */
void dac_lld_init(void) {

#if STM32_DAC_USE_DAC1_CH1
  dacObjectInit(&DACD1);
  DACD1.params  = &dma1_ch1_params;
  202642:	4d8a      	ldr	r5, [pc, #552]	; (20286c <main+0x39c>)
  202644:	f8c3 e018 	str.w	lr, [r3, #24]
  202648:	629d      	str	r5, [r3, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
  20264a:	f8c3 e01c 	str.w	lr, [r3, #28]
  dacp->state = DAC_STOP;
  20264e:	7018      	strb	r0, [r3, #0]
#if DAC_USE_WAIT
  dacp->thread = NULL;
  202650:	615a      	str	r2, [r3, #20]
  202652:	621a      	str	r2, [r3, #32]
#endif

#if STM32_DAC_USE_DAC1_CH2
  dacObjectInit(&DACD2);
  DACD2.params  = &dma1_ch2_params;
  202654:	4b86      	ldr	r3, [pc, #536]	; (202870 <main+0x3a0>)
  usbp->state        = USB_STOP;
  202656:	4f87      	ldr	r7, [pc, #540]	; (202874 <main+0x3a4>)
  202658:	628b      	str	r3, [r1, #40]	; 0x28
  GPTD4.tim = STM32_TIM4;
  20265a:	f8df 825c 	ldr.w	r8, [pc, #604]	; 2028b8 <main+0x3e8>
  20265e:	f107 0524 	add.w	r5, r7, #36	; 0x24
  tqp->next = (thread_t *)tqp;
  202662:	618c      	str	r4, [r1, #24]
  202664:	f107 0e38 	add.w	lr, r7, #56	; 0x38
  tqp->prev = (thread_t *)tqp;
  202668:	61cc      	str	r4, [r1, #28]
    usbp->in_params[i]  = NULL;
  20266a:	2400      	movs	r4, #0
  dacp->state = DAC_STOP;
  20266c:	7008      	strb	r0, [r1, #0]
  dacp->config = NULL;
  20266e:	610a      	str	r2, [r1, #16]
  dacp->thread = NULL;
  202670:	614a      	str	r2, [r1, #20]
  202672:	620a      	str	r2, [r1, #32]
  202674:	4980      	ldr	r1, [pc, #512]	; (202878 <main+0x3a8>)
  GPTD6.tim = STM32_TIM6;
  202676:	4b81      	ldr	r3, [pc, #516]	; (20287c <main+0x3ac>)
  GPTD4.tim = STM32_TIM4;
  202678:	f8c8 100c 	str.w	r1, [r8, #12]
  GPTD6.tim = STM32_TIM6;
  20267c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
  202680:	f888 0000 	strb.w	r0, [r8]
  gptp->config = NULL;
  202684:	f8c8 2004 	str.w	r2, [r8, #4]
  202688:	60d9      	str	r1, [r3, #12]
  gptp->state  = GPT_STOP;
  20268a:	7018      	strb	r0, [r3, #0]
  gptp->config = NULL;
  20268c:	605a      	str	r2, [r3, #4]
  usbp->state        = USB_STOP;
  20268e:	7038      	strb	r0, [r7, #0]
  usbp->config       = NULL;
  202690:	607a      	str	r2, [r7, #4]
    usbp->in_params[i]  = NULL;
  202692:	f845 4b04 	str.w	r4, [r5], #4
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
  202696:	45ae      	cmp	lr, r5
    usbp->out_params[i] = NULL;
  202698:	612c      	str	r4, [r5, #16]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
  20269a:	d1fa      	bne.n	202692 <main+0x1c2>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
  20269c:	f8df 921c 	ldr.w	r9, [pc, #540]	; 2028bc <main+0x3ec>
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  2026a0:	f04f 0a01 	mov.w	sl, #1
  tqp->next = (thread_t *)tqp;
  2026a4:	4d76      	ldr	r5, [pc, #472]	; (202880 <main+0x3b0>)
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  2026a6:	f04f 31ff 	mov.w	r1, #4294967295
  ST_ENABLE_CLOCK();
  2026aa:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  2026ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  ST_ENABLE_STOP();
  2026b2:	f8df e20c 	ldr.w	lr, [pc, #524]	; 2028c0 <main+0x3f0>
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  2026b6:	2380      	movs	r3, #128	; 0x80
  ST_ENABLE_CLOCK();
  2026b8:	f040 0001 	orr.w	r0, r0, #1
  2026bc:	f8df b18c 	ldr.w	fp, [pc, #396]	; 20284c <main+0x37c>
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2026c0:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  2026c4:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
  2026c8:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
  ch.vtlist.delta = (sysinterval_t)-1;
  2026cc:	6269      	str	r1, [r5, #36]	; 0x24
  2026ce:	ea40 000a 	orr.w	r0, r0, sl
  usbp->transmitting = 0;
  2026d2:	813c      	strh	r4, [r7, #8]
  usbp->receiving    = 0;
  2026d4:	817c      	strh	r4, [r7, #10]
  2026d6:	f8c9 0060 	str.w	r0, [r9, #96]	; 0x60
  ST_ENABLE_STOP();
  2026da:	f8de 0008 	ldr.w	r0, [lr, #8]
  tqp->prev = (thread_t *)tqp;
  2026de:	606d      	str	r5, [r5, #4]
  2026e0:	ea40 000a 	orr.w	r0, r0, sl
  ch.rlist.prio = NOPRIO;
  2026e4:	60ac      	str	r4, [r5, #8]
  ch.rlist.newer = (thread_t *)&ch.rlist;
  2026e6:	612d      	str	r5, [r5, #16]
  2026e8:	f8ce 0008 	str.w	r0, [lr, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  2026ec:	f642 202f 	movw	r0, #10799	; 0x2a2f
  USBD1.otg       = OTG_FS;
  2026f0:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
  2026f4:	6290      	str	r0, [r2, #40]	; 0x28
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  2026f6:	f105 001c 	add.w	r0, r5, #28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  2026fa:	62d1      	str	r1, [r2, #44]	; 0x2c
  ch.rlist.older = (thread_t *)&ch.rlist;
  2026fc:	616d      	str	r5, [r5, #20]
  STM32_ST_TIM->CCMR1  = 0;
  2026fe:	6194      	str	r4, [r2, #24]
  ch.vtlist.lasttime = (systime_t)0;
  202700:	62ac      	str	r4, [r5, #40]	; 0x28
  STM32_ST_TIM->CCR[0] = 0;
  202702:	6354      	str	r4, [r2, #52]	; 0x34
  ch.tm.offset = (rtcnt_t)0;
  202704:	676c      	str	r4, [r5, #116]	; 0x74
  STM32_ST_TIM->DIER   = 0;
  202706:	60d4      	str	r4, [r2, #12]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  202708:	61e8      	str	r0, [r5, #28]
  STM32_ST_TIM->CR2    = 0;
  20270a:	6054      	str	r4, [r2, #4]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  20270c:	6228      	str	r0, [r5, #32]
  chTMStartMeasurementX(&tm);
  20270e:	a802      	add	r0, sp, #8
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  202710:	f8c2 a014 	str.w	sl, [r2, #20]
  202714:	f8c7 e06c 	str.w	lr, [r7, #108]	; 0x6c
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
  202718:	f8c2 a000 	str.w	sl, [r2]
  tmp->cumulative = (rttime_t)0;
  20271c:	2200      	movs	r2, #0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  20271e:	f88b 331c 	strb.w	r3, [fp, #796]	; 0x31c
  202722:	9301      	str	r3, [sp, #4]
  USBD1.otgparams = &fsparams;
  202724:	4b57      	ldr	r3, [pc, #348]	; (202884 <main+0x3b4>)
  202726:	673b      	str	r3, [r7, #112]	; 0x70
  202728:	2300      	movs	r3, #0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20272a:	f8cb c180 	str.w	ip, [fp, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  20272e:	f8cb c000 	str.w	ip, [fp]
  tmp->best       = (rtcnt_t)-1;
  202732:	9102      	str	r1, [sp, #8]
  tqp->next = (thread_t *)tqp;
  202734:	602d      	str	r5, [r5, #0]
  tmp->worst      = (rtcnt_t)0;
  202736:	9403      	str	r4, [sp, #12]
  tmp->last       = (rtcnt_t)0;
  202738:	9404      	str	r4, [sp, #16]
  tmp->n          = (ucnt_t)0;
  20273a:	9405      	str	r4, [sp, #20]
  tmp->cumulative = (rttime_t)0;
  20273c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  chTMStartMeasurementX(&tm);
  202740:	f001 f8ce 	bl	2038e0 <chTMStartMeasurementX.constprop.43>
  chTMStopMeasurementX(&tm);
  202744:	a802      	add	r0, sp, #8
  202746:	f7fe fc2b 	bl	200fa0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
  20274a:	484f      	ldr	r0, [pc, #316]	; (202888 <main+0x3b8>)
  20274c:	494f      	ldr	r1, [pc, #316]	; (20288c <main+0x3bc>)
  REG_INSERT(tp);
  20274e:	f105 0e30 	add.w	lr, r5, #48	; 0x30
  202752:	f100 020c 	add.w	r2, r0, #12
  tp->prio      = prio;
  202756:	9b01      	ldr	r3, [sp, #4]
  H_NEXT(&default_heap.header) = NULL;
  202758:	6044      	str	r4, [r0, #4]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
  20275a:	f101 0c10 	add.w	ip, r1, #16
  20275e:	60c2      	str	r2, [r0, #12]
  tqp->prev = (thread_t *)tqp;
  202760:	6102      	str	r2, [r0, #16]
                             unsigned align, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
  mp->object_size = size;
  202762:	2214      	movs	r2, #20
  202764:	63ab      	str	r3, [r5, #56]	; 0x38
  tp->realprio  = prio;
  202766:	66eb      	str	r3, [r5, #108]	; 0x6c
  202768:	618a      	str	r2, [r1, #24]
  20276a:	f101 0224 	add.w	r2, r1, #36	; 0x24
  ch.tm.offset = tm.last;
  20276e:	9b04      	ldr	r3, [sp, #16]
  202770:	624a      	str	r2, [r1, #36]	; 0x24
  202772:	f101 0228 	add.w	r2, r1, #40	; 0x28
  202776:	676b      	str	r3, [r5, #116]	; 0x74
  default_heap.provider = chCoreAllocAlignedWithOffset;
  202778:	4b45      	ldr	r3, [pc, #276]	; (202890 <main+0x3c0>)
  H_PAGES(&default_heap.header) = 0;
  20277a:	6084      	str	r4, [r0, #8]
  20277c:	6144      	str	r4, [r0, #20]
  default_heap.provider = chCoreAllocAlignedWithOffset;
  20277e:	6003      	str	r3, [r0, #0]
  202780:	f101 003c 	add.w	r0, r1, #60	; 0x3c
  202784:	628a      	str	r2, [r1, #40]	; 0x28
  202786:	221c      	movs	r2, #28
  mp->align = align;
  202788:	2304      	movs	r3, #4
  20278a:	63c8      	str	r0, [r1, #60]	; 0x3c
  mp->object_size = size;
  20278c:	630a      	str	r2, [r1, #48]	; 0x30
  20278e:	f101 0240 	add.w	r2, r1, #64	; 0x40
  mp->provider = provider;
  202792:	4840      	ldr	r0, [pc, #256]	; (202894 <main+0x3c4>)
  202794:	608c      	str	r4, [r1, #8]
  mp->next = NULL;
  202796:	614c      	str	r4, [r1, #20]
  202798:	62cc      	str	r4, [r1, #44]	; 0x2c
  20279a:	f8c1 c010 	str.w	ip, [r1, #16]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  20279e:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  2027a2:	640a      	str	r2, [r1, #64]	; 0x40
  tlp->next = (thread_t *)tlp;
  2027a4:	f105 0258 	add.w	r2, r5, #88	; 0x58
  mp->align = align;
  2027a8:	61cb      	str	r3, [r1, #28]
  2027aa:	634b      	str	r3, [r1, #52]	; 0x34
  mp->provider = provider;
  2027ac:	6208      	str	r0, [r1, #32]
  2027ae:	6388      	str	r0, [r1, #56]	; 0x38
  tqp->next = (thread_t *)tqp;
  2027b0:	6009      	str	r1, [r1, #0]
  tqp->prev = (thread_t *)tqp;
  2027b2:	6049      	str	r1, [r1, #4]
  ch_memcore.nextmem = __heap_base__;
  2027b4:	4b38      	ldr	r3, [pc, #224]	; (202898 <main+0x3c8>)
  2027b6:	4839      	ldr	r0, [pc, #228]	; (20289c <main+0x3cc>)
  ch_memcore.endmem  = __heap_end__;
  2027b8:	4939      	ldr	r1, [pc, #228]	; (2028a0 <main+0x3d0>)
  tp->flags     = CH_FLAG_MODE_STATIC;
  2027ba:	f885 4051 	strb.w	r4, [r5, #81]	; 0x51
  tp->mtxlist   = NULL;
  2027be:	66ac      	str	r4, [r5, #104]	; 0x68
  tp->epending  = (eventmask_t)0;
  2027c0:	666c      	str	r4, [r5, #100]	; 0x64
  tp->refs      = (trefs_t)1;
  2027c2:	f885 a052 	strb.w	sl, [r5, #82]	; 0x52
  2027c6:	e883 0003 	stmia.w	r3, {r0, r1}
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  2027ca:	4b36      	ldr	r3, [pc, #216]	; (2028a4 <main+0x3d4>)
  tp->name      = name;
  2027cc:	4936      	ldr	r1, [pc, #216]	; (2028a8 <main+0x3d8>)
  2027ce:	68d8      	ldr	r0, [r3, #12]
  2027d0:	64a9      	str	r1, [r5, #72]	; 0x48
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  2027d2:	ea00 000c 	and.w	r0, r0, ip
  reg_value  =  (reg_value                                   |
  2027d6:	4935      	ldr	r1, [pc, #212]	; (2028ac <main+0x3dc>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  2027d8:	f10c 4c60 	add.w	ip, ip, #3758096384	; 0xe0000000
  REG_INSERT(tp);
  2027dc:	642d      	str	r5, [r5, #64]	; 0x40
  2027de:	4301      	orrs	r1, r0
  2027e0:	6968      	ldr	r0, [r5, #20]
  2027e2:	f6ac 3c0f 	subw	ip, ip, #2831	; 0xb0f
  2027e6:	6468      	str	r0, [r5, #68]	; 0x44
  2027e8:	f8c0 e010 	str.w	lr, [r0, #16]
  SCB->AIRCR =  reg_value;
  2027ec:	60d9      	str	r1, [r3, #12]
  2027ee:	f8dc 000c 	ldr.w	r0, [ip, #12]
  DWT->LAR = 0xC5ACCE55U;
  2027f2:	492f      	ldr	r1, [pc, #188]	; (2028b0 <main+0x3e0>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  2027f4:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
  2027f8:	f8c5 e014 	str.w	lr, [r5, #20]
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
  2027fc:	f8c5 e018 	str.w	lr, [r5, #24]
  currp->wabase = NULL;
  202800:	64ec      	str	r4, [r5, #76]	; 0x4c
  202802:	f8cc 000c 	str.w	r0, [ip, #12]
  DWT->LAR = 0xC5ACCE55U;
  202806:	482b      	ldr	r0, [pc, #172]	; (2028b4 <main+0x3e4>)
  currp->state = CH_STATE_CURRENT;
  202808:	f885 a050 	strb.w	sl, [r5, #80]	; 0x50
  20280c:	f8c1 0fb0 	str.w	r0, [r1, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  202810:	6808      	ldr	r0, [r1, #0]
  tlp->next = (thread_t *)tlp;
  202812:	65aa      	str	r2, [r5, #88]	; 0x58
  tqp->next = (thread_t *)tqp;
  202814:	f105 025c 	add.w	r2, r5, #92	; 0x5c
  202818:	ea40 000a 	orr.w	r0, r0, sl
  20281c:	65ea      	str	r2, [r5, #92]	; 0x5c
  tqp->prev = (thread_t *)tqp;
  20281e:	662a      	str	r2, [r5, #96]	; 0x60
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  202820:	f04f 0210 	mov.w	r2, #16
  202824:	6008      	str	r0, [r1, #0]
  202826:	77da      	strb	r2, [r3, #31]
  202828:	f04f 0220 	mov.w	r2, #32
  20282c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  202830:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
  202834:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202836:	2320      	movs	r3, #32
  202838:	f383 8811 	msr	BASEPRI, r3
  20283c:	e042      	b.n	2028c4 <main+0x3f4>
  20283e:	bf00      	nop
  202840:	20000fcc 	.word	0x20000fcc
  202844:	40026000 	.word	0x40026000
  202848:	40026400 	.word	0x40026400
  20284c:	e000e100 	.word	0xe000e100
  202850:	20000d8c 	.word	0x20000d8c
  202854:	20000850 	.word	0x20000850
  202858:	40012000 	.word	0x40012000
  20285c:	20000884 	.word	0x20000884
  202860:	08003d6c 	.word	0x08003d6c
  202864:	200008b0 	.word	0x200008b0
  202868:	00022c16 	.word	0x00022c16
  20286c:	08003ddc 	.word	0x08003ddc
  202870:	08003df8 	.word	0x08003df8
  202874:	200011d0 	.word	0x200011d0
  202878:	40000800 	.word	0x40000800
  20287c:	200008ec 	.word	0x200008ec
  202880:	20001248 	.word	0x20001248
  202884:	08003e14 	.word	0x08003e14
  202888:	20000fb0 	.word	0x20000fb0
  20288c:	20000e8c 	.word	0x20000e8c
  202890:	002003b1 	.word	0x002003b1
  202894:	00200381 	.word	0x00200381
  202898:	20000fa8 	.word	0x20000fa8
  20289c:	20020008 	.word	0x20020008
  2028a0:	20080000 	.word	0x20080000
  2028a4:	e000ed00 	.word	0xe000ed00
  2028a8:	08003dc4 	.word	0x08003dc4
  2028ac:	05fa0300 	.word	0x05fa0300
  2028b0:	e0001000 	.word	0xe0001000
  2028b4:	c5acce55 	.word	0xc5acce55
  2028b8:	200008dc 	.word	0x200008dc
  2028bc:	40023800 	.word	0x40023800
  2028c0:	e0042000 	.word	0xe0042000
  tp->wabase = tdp->wbase;
  2028c4:	4bc7      	ldr	r3, [pc, #796]	; (202be4 <main+0x714>)
  tp->state     = CH_STATE_WTSTART;
  2028c6:	2102      	movs	r1, #2
  REG_INSERT(tp);
  2028c8:	696a      	ldr	r2, [r5, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  2028ca:	f103 006c 	add.w	r0, r3, #108	; 0x6c
  tp->state     = CH_STATE_WTSTART;
  2028ce:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
  REG_INSERT(tp);
  2028d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  2028d6:	f103 0e90 	add.w	lr, r3, #144	; 0x90
  tp->state     = CH_STATE_WTSTART;
  2028da:	9101      	str	r1, [sp, #4]
  tlp->next = (thread_t *)tlp;
  2028dc:	f103 0cb8 	add.w	ip, r3, #184	; 0xb8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  2028e0:	4ac1      	ldr	r2, [pc, #772]	; (202be8 <main+0x718>)
  2028e2:	49c2      	ldr	r1, [pc, #776]	; (202bec <main+0x71c>)
  2028e4:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
  2028e8:	66da      	str	r2, [r3, #108]	; 0x6c
  tqp->next = (thread_t *)tqp;
  2028ea:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
  2028ee:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
  tp->name      = name;
  2028f2:	48bf      	ldr	r0, [pc, #764]	; (202bf0 <main+0x720>)
  REG_INSERT(tp);
  2028f4:	6969      	ldr	r1, [r5, #20]
  tp->name      = name;
  2028f6:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
  chSchWakeupS(tp, MSG_OK);
  2028fa:	4670      	mov	r0, lr
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
  2028fc:	671c      	str	r4, [r3, #112]	; 0x70
  tp->prio      = prio;
  2028fe:	f8c3 a098 	str.w	sl, [r3, #152]	; 0x98
  tp->flags     = CH_FLAG_MODE_STATIC;
  202902:	f883 40b1 	strb.w	r4, [r3, #177]	; 0xb1
  tp->realprio  = prio;
  202906:	f8c3 a0cc 	str.w	sl, [r3, #204]	; 0xcc
  tp->mtxlist   = NULL;
  20290a:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
  tp->epending  = (eventmask_t)0;
  20290e:	f8c3 40c4 	str.w	r4, [r3, #196]	; 0xc4
  tp->refs      = (trefs_t)1;
  202912:	f883 a0b2 	strb.w	sl, [r3, #178]	; 0xb2
  REG_INSERT(tp);
  202916:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
  20291a:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  REG_INSERT(tp);
  20291e:	f8c1 e010 	str.w	lr, [r1, #16]
  tlp->next = (thread_t *)tlp;
  202922:	f8c3 c0b8 	str.w	ip, [r3, #184]	; 0xb8
  tqp->next = (thread_t *)tqp;
  202926:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
  20292a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  20292e:	f8c5 e014 	str.w	lr, [r5, #20]
  chSchWakeupS(tp, MSG_OK);
  202932:	f000 ffa5 	bl	203880 <chSchWakeupS.constprop.48>
  202936:	f384 8811 	msr	BASEPRI, r4
  sdup->vmt = &vmt;
  20293a:	4bae      	ldr	r3, [pc, #696]	; (202bf4 <main+0x724>)
  ibqp->notify    = infy;
  20293c:	48ae      	ldr	r0, [pc, #696]	; (202bf8 <main+0x728>)
  obqp->notify    = onfy;
  20293e:	4aaf      	ldr	r2, [pc, #700]	; (202bfc <main+0x72c>)
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
  202940:	f203 4c8c 	addw	ip, r3, #1164	; 0x48c
  ibqp->notify    = infy;
  202944:	63d8      	str	r0, [r3, #60]	; 0x3c
  202946:	4618      	mov	r0, r3
  obqp->notify    = onfy;
  202948:	675a      	str	r2, [r3, #116]	; 0x74
  ibqp->brdptr    = bp;
  20294a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  20294e:	4aac      	ldr	r2, [pc, #688]	; (202c00 <main+0x730>)
  ibqp->bn        = n;
  202950:	9901      	ldr	r1, [sp, #4]
  202952:	f840 2b04 	str.w	r2, [r0], #4
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  202956:	f503 7221 	add.w	r2, r3, #644	; 0x284
  sdup->state = SDU_STOP;
  20295a:	f883 a008 	strb.w	sl, [r3, #8]
  ibqp->suspended = suspended;
  20295e:	f883 a014 	strb.w	sl, [r3, #20]
  obqp->suspended = suspended;
  202962:	f883 a04c 	strb.w	sl, [r3, #76]	; 0x4c
  tqp->next = (thread_t *)tqp;
  202966:	f103 0a0c 	add.w	sl, r3, #12
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
  20296a:	f8c3 c05c 	str.w	ip, [r3, #92]	; 0x5c
  20296e:	f103 0c44 	add.w	ip, r3, #68	; 0x44
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  202972:	625a      	str	r2, [r3, #36]	; 0x24
  obqp->brdptr    = bp;
  202974:	659a      	str	r2, [r3, #88]	; 0x58
  obqp->bwrptr    = bp;
  202976:	655a      	str	r2, [r3, #84]	; 0x54
  obqp->buffers   = bp;
  202978:	669a      	str	r2, [r3, #104]	; 0x68
  ibqp->bsize     = size + sizeof (size_t);
  20297a:	f44f 7282 	mov.w	r2, #260	; 0x104
  ibqp->bcounter  = 0;
  20297e:	619c      	str	r4, [r3, #24]
  ibqp->bsize     = size + sizeof (size_t);
  202980:	629a      	str	r2, [r3, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
  202982:	661a      	str	r2, [r3, #96]	; 0x60
  202984:	2220      	movs	r2, #32
  ibqp->bn        = n;
  202986:	62d9      	str	r1, [r3, #44]	; 0x2c
  ibqp->ptr       = NULL;
  202988:	635c      	str	r4, [r3, #52]	; 0x34
  ibqp->top       = NULL;
  20298a:	639c      	str	r4, [r3, #56]	; 0x38
  obqp->bcounter  = n;
  20298c:	6519      	str	r1, [r3, #80]	; 0x50
  obqp->bn        = n;
  20298e:	6659      	str	r1, [r3, #100]	; 0x64
  obqp->ptr       = NULL;
  202990:	66dc      	str	r4, [r3, #108]	; 0x6c
  obqp->top       = NULL;
  202992:	671c      	str	r4, [r3, #112]	; 0x70
  ibqp->link      = link;
  202994:	641b      	str	r3, [r3, #64]	; 0x40
  obqp->link      = link;
  202996:	679b      	str	r3, [r3, #120]	; 0x78
  202998:	f8c3 a00c 	str.w	sl, [r3, #12]
  tqp->prev = (thread_t *)tqp;
  20299c:	f8c3 a010 	str.w	sl, [r3, #16]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
  2029a0:	6058      	str	r0, [r3, #4]
  ibqp->brdptr    = bp;
  2029a2:	f8c3 e020 	str.w	lr, [r3, #32]
  ibqp->bwrptr    = bp;
  2029a6:	f8c3 e01c 	str.w	lr, [r3, #28]
  ibqp->buffers   = bp;
  2029aa:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
  tqp->next = (thread_t *)tqp;
  2029ae:	f8c3 c044 	str.w	ip, [r3, #68]	; 0x44
  tqp->prev = (thread_t *)tqp;
  2029b2:	f8c3 c048 	str.w	ip, [r3, #72]	; 0x48
  2029b6:	f382 8811 	msr	BASEPRI, r2
  sdup->config = config;
  2029ba:	4892      	ldr	r0, [pc, #584]	; (202c04 <main+0x734>)
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  2029bc:	627b      	str	r3, [r7, #36]	; 0x24
  usbp->out_params[config->bulk_out - 1U] = sdup;
  2029be:	63bb      	str	r3, [r7, #56]	; 0x38
    usbp->in_params[config->int_in - 1U]  = sdup;
  2029c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sdup->state = SDU_READY;
  2029c2:	7219      	strb	r1, [r3, #8]
  sdup->config = config;
  2029c4:	f8c3 048c 	str.w	r0, [r3, #1164]	; 0x48c
  2029c8:	f384 8811 	msr	BASEPRI, r4
    /*
     * Activates the USB driver and then the USB bus pull-up on D+.
     * Note, a delay is inserted in order to not have to disconnect the cable
     * after a reset.
     */
    usbDisconnectBus(serusbcfg.usbp);
  2029cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
    chThdSleepMilliseconds(1000);
  2029ce:	f242 7010 	movw	r0, #10000	; 0x2710
    usbDisconnectBus(serusbcfg.usbp);
  2029d2:	f8d1 3804 	ldr.w	r3, [r1, #2052]	; 0x804
  2029d6:	f043 0302 	orr.w	r3, r3, #2
  2029da:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
    chThdSleepMilliseconds(1000);
  2029de:	f7fe fb07 	bl	200ff0 <chThdSleep>
  2029e2:	2320      	movs	r3, #32
  2029e4:	f383 8811 	msr	BASEPRI, r3
  if (usbp->state == USB_STOP) {
  2029e8:	783a      	ldrb	r2, [r7, #0]
  usbp->config = config;
  2029ea:	4b87      	ldr	r3, [pc, #540]	; (202c08 <main+0x738>)
  2029ec:	2a01      	cmp	r2, #1
  2029ee:	9201      	str	r2, [sp, #4]
    usbp->epc[i] = NULL;
  2029f0:	60fc      	str	r4, [r7, #12]
  2029f2:	613c      	str	r4, [r7, #16]
  2029f4:	617c      	str	r4, [r7, #20]
  2029f6:	61bc      	str	r4, [r7, #24]
  2029f8:	61fc      	str	r4, [r7, #28]
  2029fa:	623c      	str	r4, [r7, #32]
  usbp->config = config;
  2029fc:	607b      	str	r3, [r7, #4]
  stm32_otg_t *otgp = usbp->otg;
  2029fe:	f8d7 a06c 	ldr.w	sl, [r7, #108]	; 0x6c
  if (usbp->state == USB_STOP) {
  202a02:	f000 81ed 	beq.w	202de0 <main+0x910>
  usbp->state = USB_READY;
  202a06:	2302      	movs	r3, #2
  202a08:	f04f 0e00 	mov.w	lr, #0
  202a0c:	703b      	strb	r3, [r7, #0]
  202a0e:	f38e 8811 	msr	BASEPRI, lr
    usbStart(serusbcfg.usbp, &usbcfg);
    usbConnectBus(serusbcfg.usbp);
  202a12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
  202a14:	2120      	movs	r1, #32
  202a16:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
  202a1a:	f023 0302 	bic.w	r3, r3, #2
  202a1e:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
  202a22:	f381 8811 	msr	BASEPRI, r1
  if (gptp->state == GPT_STOP) {
  202a26:	f898 3000 	ldrb.w	r3, [r8]
  osalDbgCheck((gptp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
              "invalid state");
  gptp->config = config;
  202a2a:	4a78      	ldr	r2, [pc, #480]	; (202c0c <main+0x73c>)
  202a2c:	2b01      	cmp	r3, #1
  202a2e:	f8c8 2004 	str.w	r2, [r8, #4]
  202a32:	f000 81b8 	beq.w	202da6 <main+0x8d6>
  202a36:	f8d8 3008 	ldr.w	r3, [r8, #8]
  202a3a:	4a75      	ldr	r2, [pc, #468]	; (202c10 <main+0x740>)
  202a3c:	fba2 2303 	umull	r2, r3, r2, r3
  202a40:	0c9b      	lsrs	r3, r3, #18
  202a42:	3b01      	subs	r3, #1
  202a44:	b29b      	uxth	r3, r3
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  202a46:	f8d8 200c 	ldr.w	r2, [r8, #12]
  202a4a:	2100      	movs	r1, #0
  gptp->tim->CR2  = gptp->config->cr2;
  202a4c:	2020      	movs	r0, #32
  gpt_lld_start(gptp);
  gptp->state = GPT_READY;
  202a4e:	2402      	movs	r4, #2
  gptp->tim->CR1  = 0;                          /* Initially stopped.       */
  202a50:	6011      	str	r1, [r2, #0]
  gptp->tim->CR2  = gptp->config->cr2;
  202a52:	6050      	str	r0, [r2, #4]
  202a54:	f888 4000 	strb.w	r4, [r8]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  202a58:	6293      	str	r3, [r2, #40]	; 0x28
  gptp->tim->SR   = 0;                          /* Clear pending IRQs.      */
  202a5a:	6111      	str	r1, [r2, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  202a5c:	60d1      	str	r1, [r2, #12]
  202a5e:	f381 8811 	msr	BASEPRI, r1

     /*
      * Fixed an errata on the STM32F7xx, the DAC clock is required for ADC
      * triggering.
      */
     rccEnableDAC1(false);
  202a62:	4a6c      	ldr	r2, [pc, #432]	; (202c14 <main+0x744>)
  202a64:	6c13      	ldr	r3, [r2, #64]	; 0x40
  202a66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  202a6a:	6413      	str	r3, [r2, #64]	; 0x40
  202a6c:	6e13      	ldr	r3, [r2, #96]	; 0x60
  202a6e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
  202a72:	6613      	str	r3, [r2, #96]	; 0x60
  202a74:	f380 8811 	msr	BASEPRI, r0
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
  202a78:	7833      	ldrb	r3, [r6, #0]
  osalDbgCheck(adcp != NULL);

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
  202a7a:	6071      	str	r1, [r6, #4]
  202a7c:	2b01      	cmp	r3, #1
  202a7e:	f000 8125 	beq.w	202ccc <main+0x7fc>
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
  202a82:	2302      	movs	r3, #2
  202a84:	2200      	movs	r2, #0
  202a86:	7033      	strb	r3, [r6, #0]
  202a88:	f382 8811 	msr	BASEPRI, r2
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32EnableTSVREFE(void) {

  ADC->CCR |= ADC_CCR_TSVREFE;
  202a8c:	4962      	ldr	r1, [pc, #392]	; (202c18 <main+0x748>)
  202a8e:	2420      	movs	r4, #32
  202a90:	684b      	ldr	r3, [r1, #4]
  202a92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  202a96:	604b      	str	r3, [r1, #4]
  202a98:	f384 8811 	msr	BASEPRI, r4
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
  202a9c:	2003      	movs	r0, #3
  mode = adcp->dmamode;
  202a9e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  202aa0:	6af1      	ldr	r1, [r6, #44]	; 0x2c
  adcp->depth    = depth;
  202aa2:	f04f 0c08 	mov.w	ip, #8
  adcp->state    = ADC_ACTIVE;
  202aa6:	7030      	strb	r0, [r6, #0]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
  202aa8:	2718      	movs	r7, #24
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  202aaa:	6809      	ldr	r1, [r1, #0]
      mode |= STM32_DMA_CR_HTIE;
  202aac:	f443 7384 	orr.w	r3, r3, #264	; 0x108
  adcp->samples  = samples;
  202ab0:	f8df a184 	ldr.w	sl, [pc, #388]	; 202c38 <main+0x768>
  adcp->grpp     = grpp;
  202ab4:	f8df e184 	ldr.w	lr, [pc, #388]	; 202c3c <main+0x76c>
  adcp->depth    = depth;
  202ab8:	f8c6 c00c 	str.w	ip, [r6, #12]
  adcp->adc->SMPR1 = grpp->smpr1;
  202abc:	f04f 6cdb 	mov.w	ip, #114819072	; 0x6d80000
  adcp->grpp     = grpp;
  202ac0:	f8c6 e010 	str.w	lr, [r6, #16]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
  202ac4:	f44f 1e00 	mov.w	lr, #2097152	; 0x200000
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  202ac8:	f8c1 a00c 	str.w	sl, [r1, #12]
  adcp->samples  = samples;
  202acc:	f8c6 a008 	str.w	sl, [r6, #8]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
  202ad0:	604f      	str	r7, [r1, #4]
  adcp->adc->SQR3  = grpp->sqr3;
  202ad2:	f644 2730 	movw	r7, #18992	; 0x4a30
  dmaStreamSetMode(adcp->dmastp, mode);
  202ad6:	600b      	str	r3, [r1, #0]
  dmaStreamEnable(adcp->dmastp);
  202ad8:	f8d1 9000 	ldr.w	r9, [r1]
  adcp->adc->SR    = 0;
  202adc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  dmaStreamEnable(adcp->dmastp);
  202ade:	f049 0901 	orr.w	r9, r9, #1
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
  202ae2:	4e4e      	ldr	r6, [pc, #312]	; (202c1c <main+0x74c>)
  dmaStreamEnable(adcp->dmastp);
  202ae4:	f8c1 9000 	str.w	r9, [r1]
    adcp->adc->CR2 = cr2;
  202ae8:	494d      	ldr	r1, [pc, #308]	; (202c20 <main+0x750>)
  adcp->adc->SR    = 0;
  202aea:	601a      	str	r2, [r3, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
  202aec:	f8c3 c00c 	str.w	ip, [r3, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
  202af0:	611a      	str	r2, [r3, #16]
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
  202af2:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
  202af6:	631a      	str	r2, [r3, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
  202af8:	635f      	str	r7, [r3, #52]	; 0x34
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
  202afa:	605e      	str	r6, [r3, #4]
    adcp->adc->CR2 = cr2;
  202afc:	6099      	str	r1, [r3, #8]
  202afe:	f382 8811 	msr	BASEPRI, r2
  202b02:	f384 8811 	msr	BASEPRI, r4
  if (NULL != gptp->config->callback)
  202b06:	f8d8 1004 	ldr.w	r1, [r8, #4]
  gptp->tim->ARR = (uint32_t)interval;          /* Time constant.           */
  202b0a:	2664      	movs	r6, #100	; 0x64
  202b0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  202b10:	2401      	movs	r4, #1
  if (NULL != gptp->config->callback)
  202b12:	6849      	ldr	r1, [r1, #4]
  osalDbgCheckClassI();
  osalDbgCheck(gptp != NULL);
  osalDbgAssert(gptp->state == GPT_READY,
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
  202b14:	f888 0000 	strb.w	r0, [r8]
  gptp->tim->ARR = (uint32_t)interval;          /* Time constant.           */
  202b18:	62de      	str	r6, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  202b1a:	615c      	str	r4, [r3, #20]
  gptp->tim->CNT = 0;                           /* Reset counter.           */
  202b1c:	625a      	str	r2, [r3, #36]	; 0x24
  gptp->tim->SR = 0;                            /* Clear pending IRQs.      */
  202b1e:	611a      	str	r2, [r3, #16]
  if (NULL != gptp->config->callback)
  202b20:	b111      	cbz	r1, 202b28 <main+0x658>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
  202b22:	68da      	ldr	r2, [r3, #12]
  202b24:	4322      	orrs	r2, r4
  202b26:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  202b28:	2285      	movs	r2, #133	; 0x85
  202b2a:	2400      	movs	r4, #0
  202b2c:	601a      	str	r2, [r3, #0]
  202b2e:	f384 8811 	msr	BASEPRI, r4
  202b32:	2320      	movs	r3, #32
  202b34:	f383 8811 	msr	BASEPRI, r3
  tp->wabase = (stkalign_t *)wsp;
  202b38:	4b3a      	ldr	r3, [pc, #232]	; (202c24 <main+0x754>)
  tp->state     = CH_STATE_WTSTART;
  202b3a:	2202      	movs	r2, #2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202b3c:	492b      	ldr	r1, [pc, #172]	; (202bec <main+0x71c>)
  tp->prio      = prio;
  202b3e:	2780      	movs	r7, #128	; 0x80
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202b40:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 202c40 <main+0x770>
  REG_INSERT(tp);
  202b44:	f503 7680 	add.w	r6, r3, #256	; 0x100
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202b48:	f8c3 10fc 	str.w	r1, [r3, #252]	; 0xfc
  202b4c:	f103 0cdc 	add.w	ip, r3, #220	; 0xdc
  tp->name      = name;
  202b50:	4935      	ldr	r1, [pc, #212]	; (202c28 <main+0x758>)
  tp->refs      = (trefs_t)1;
  202b52:	2001      	movs	r0, #1
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202b54:	f8c3 e0dc 	str.w	lr, [r3, #220]	; 0xdc
  tlp->next = (thread_t *)tlp;
  202b58:	f503 7e94 	add.w	lr, r3, #296	; 0x128
  tp->state     = CH_STATE_WTSTART;
  202b5c:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
  tqp->next = (thread_t *)tqp;
  202b60:	f503 7296 	add.w	r2, r3, #300	; 0x12c
  tp->name      = name;
  202b64:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
  REG_INSERT(tp);
  202b68:	6969      	ldr	r1, [r5, #20]
  tp->refs      = (trefs_t)1;
  202b6a:	f883 0122 	strb.w	r0, [r3, #290]	; 0x122
  chSchWakeupS(tp, MSG_OK);
  202b6e:	4630      	mov	r0, r6
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202b70:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
  tp->flags     = CH_FLAG_MODE_STATIC;
  202b74:	f883 4121 	strb.w	r4, [r3, #289]	; 0x121
  tp->mtxlist   = NULL;
  202b78:	f8c3 4138 	str.w	r4, [r3, #312]	; 0x138
  tp->epending  = (eventmask_t)0;
  202b7c:	f8c3 4134 	str.w	r4, [r3, #308]	; 0x134
  REG_INSERT(tp);
  202b80:	f8c3 5110 	str.w	r5, [r3, #272]	; 0x110
  tp->wabase = (stkalign_t *)wsp;
  202b84:	f8c3 311c 	str.w	r3, [r3, #284]	; 0x11c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
  202b88:	f8c3 c10c 	str.w	ip, [r3, #268]	; 0x10c
  tp->prio      = prio;
  202b8c:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
  REG_INSERT(tp);
  202b90:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
  tp->realprio  = prio;
  202b94:	f8c3 713c 	str.w	r7, [r3, #316]	; 0x13c
  REG_INSERT(tp);
  202b98:	610e      	str	r6, [r1, #16]
  tlp->next = (thread_t *)tlp;
  202b9a:	f8c3 e128 	str.w	lr, [r3, #296]	; 0x128
  tqp->next = (thread_t *)tqp;
  202b9e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
  tqp->prev = (thread_t *)tqp;
  202ba2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
  202ba6:	616e      	str	r6, [r5, #20]
  chSchWakeupS(tp, MSG_OK);
  202ba8:	f000 fe6a 	bl	203880 <chSchWakeupS.constprop.48>
  202bac:	f384 8811 	msr	BASEPRI, r4

  //int u=0;
  while (true) {
	  chThdSleepMilliseconds(250);
	    //chprintf(chp, "\r\n(%8u,%8u): [%4u,%4u,%4u,%4u]\r\n", nx, ny, samples[0],samples[3],samples[6],samples[9]);
	  	chprintf(chp, "\r\n(%8u): ", nx);
  202bb0:	4c10      	ldr	r4, [pc, #64]	; (202bf4 <main+0x724>)

	  	 for (ch = 0; ch < ADC_GRP1_NUM_CHANNELS; ch++)
	  	 {
	  		 chprintf(chp, "\r\nchannel %2u: ",ch);
  202bb2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 202c44 <main+0x774>
	  chThdSleepMilliseconds(250);
  202bb6:	f640 10c4 	movw	r0, #2500	; 0x9c4
	  	chprintf(chp, "\r\n(%8u): ", nx);
  202bba:	46d3      	mov	fp, sl
	  chThdSleepMilliseconds(250);
  202bbc:	f7fe fa18 	bl	200ff0 <chThdSleep>
	  	chprintf(chp, "\r\n(%8u): ", nx);
  202bc0:	4b1a      	ldr	r3, [pc, #104]	; (202c2c <main+0x75c>)
  202bc2:	491b      	ldr	r1, [pc, #108]	; (202c30 <main+0x760>)
  202bc4:	4620      	mov	r0, r4
  202bc6:	681a      	ldr	r2, [r3, #0]
	  	 for (ch = 0; ch < ADC_GRP1_NUM_CHANNELS; ch++)
  202bc8:	f04f 0800 	mov.w	r8, #0
	  		 for (n = 0; n < ADC_GRP1_BUF_DEPTH; n++) {
	  			 chprintf(chp, "%4u,", samples1[ch + n * ADC_GRP1_NUM_CHANNELS]);
  202bcc:	4f19      	ldr	r7, [pc, #100]	; (202c34 <main+0x764>)
	  	chprintf(chp, "\r\n(%8u): ", nx);
  202bce:	f7fe fdc7 	bl	201760 <chprintf>
  202bd2:	f10b 0630 	add.w	r6, fp, #48	; 0x30
	  		 chprintf(chp, "\r\nchannel %2u: ",ch);
  202bd6:	465d      	mov	r5, fp
  202bd8:	4642      	mov	r2, r8
  202bda:	4649      	mov	r1, r9
  202bdc:	4620      	mov	r0, r4
  202bde:	f7fe fdbf 	bl	201760 <chprintf>
  202be2:	e031      	b.n	202c48 <main+0x778>
  202be4:	20000ed0 	.word	0x20000ed0
  202be8:	00200471 	.word	0x00200471
  202bec:	002002f1 	.word	0x002002f1
  202bf0:	08003e30 	.word	0x08003e30
  202bf4:	200008fc 	.word	0x200008fc
  202bf8:	00200ea1 	.word	0x00200ea1
  202bfc:	00200ed1 	.word	0x00200ed1
  202c00:	08003e90 	.word	0x08003e90
  202c04:	08003e78 	.word	0x08003e78
  202c08:	08003e80 	.word	0x08003e80
  202c0c:	08003e20 	.word	0x08003e20
  202c10:	431bde83 	.word	0x431bde83
  202c14:	40023800 	.word	0x40023800
  202c18:	40012300 	.word	0x40012300
  202c1c:	04000100 	.word	0x04000100
  202c20:	1c000301 	.word	0x1c000301
  202c24:	20001088 	.word	0x20001088
  202c28:	08003e38 	.word	0x08003e38
  202c2c:	20001050 	.word	0x20001050
  202c30:	08003e40 	.word	0x08003e40
  202c34:	08003e5c 	.word	0x08003e5c
  202c38:	20001054 	.word	0x20001054
  202c3c:	08003d9c 	.word	0x08003d9c
  202c40:	002024a1 	.word	0x002024a1
  202c44:	08003e4c 	.word	0x08003e4c
	  			 chprintf(chp, "%4u,", samples1[ch + n * ADC_GRP1_NUM_CHANNELS]);
  202c48:	f835 2b06 	ldrh.w	r2, [r5], #6
  202c4c:	4639      	mov	r1, r7
  202c4e:	4620      	mov	r0, r4
  202c50:	f7fe fd86 	bl	201760 <chprintf>
	  		 for (n = 0; n < ADC_GRP1_BUF_DEPTH; n++) {
  202c54:	42b5      	cmp	r5, r6
  202c56:	d1f7      	bne.n	202c48 <main+0x778>
	  	 for (ch = 0; ch < ADC_GRP1_NUM_CHANNELS; ch++)
  202c58:	f108 0801 	add.w	r8, r8, #1
  202c5c:	f10b 0b02 	add.w	fp, fp, #2
  202c60:	f1b8 0f03 	cmp.w	r8, #3
  202c64:	d1b5      	bne.n	202bd2 <main+0x702>
	  		 }
	  	 }

	    chprintf(chp, "\r\n%4u degC", Temp_calc(samples1[0]));
  202c66:	4b9a      	ldr	r3, [pc, #616]	; (202ed0 <main+0xa00>)
  temperature = ((raw_data * VDD_APPLI / VDD_CALIB) - (int32_t) *TEMP30_CAL_ADDR ) ;
  202c68:	f44f 7596 	mov.w	r5, #300	; 0x12c
  202c6c:	4e99      	ldr	r6, [pc, #612]	; (202ed4 <main+0xa04>)
	    chprintf(chp, "\r\n%4u degC", Temp_calc(samples1[0]));
  202c6e:	4620      	mov	r0, r4
  202c70:	881a      	ldrh	r2, [r3, #0]
  temperature = ((raw_data * VDD_APPLI / VDD_CALIB) - (int32_t) *TEMP30_CAL_ADDR ) ;
  202c72:	4b99      	ldr	r3, [pc, #612]	; (202ed8 <main+0xa08>)
  202c74:	fb05 f502 	mul.w	r5, r5, r2
  temperature = temperature / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
  202c78:	4a98      	ldr	r2, [pc, #608]	; (202edc <main+0xa0c>)
  temperature = ((raw_data * VDD_APPLI / VDD_CALIB) - (int32_t) *TEMP30_CAL_ADDR ) ;
  202c7a:	881b      	ldrh	r3, [r3, #0]
  temperature = temperature / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
  202c7c:	8812      	ldrh	r2, [r2, #0]
  temperature = ((raw_data * VDD_APPLI / VDD_CALIB) - (int32_t) *TEMP30_CAL_ADDR ) ;
  202c7e:	fba6 6505 	umull	r6, r5, r6, r5
	    chprintf(chp, "\r\n%4u degC", Temp_calc(samples1[0]));
  202c82:	4997      	ldr	r1, [pc, #604]	; (202ee0 <main+0xa10>)
  temperature = temperature / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
  202c84:	1ad6      	subs	r6, r2, r3
  temperature = ((raw_data * VDD_APPLI / VDD_CALIB) - (int32_t) *TEMP30_CAL_ADDR ) ;
  202c86:	ebc3 13d5 	rsb	r3, r3, r5, lsr #7
  temperature = temperature * (int32_t)(110 - 30);
  202c8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  202c8e:	011a      	lsls	r2, r3, #4
  temperature = temperature / (int32_t)(*TEMP110_CAL_ADDR - *TEMP30_CAL_ADDR);
  202c90:	fb92 f2f6 	sdiv	r2, r2, r6
	    chprintf(chp, "\r\n%4u degC", Temp_calc(samples1[0]));
  202c94:	321e      	adds	r2, #30
  202c96:	f7fe fd63 	bl	201760 <chprintf>
  202c9a:	4892      	ldr	r0, [pc, #584]	; (202ee4 <main+0xa14>)
    while (*s) ITM_SendChar(*s++);
  202c9c:	2168      	movs	r1, #104	; 0x68
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
  202c9e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
  202ca2:	e003      	b.n	202cac <main+0x7dc>
  202ca4:	f810 1f01 	ldrb.w	r1, [r0, #1]!
  202ca8:	2900      	cmp	r1, #0
  202caa:	d084      	beq.n	202bb6 <main+0x6e6>
  202cac:	f8d2 3e80 	ldr.w	r3, [r2, #3712]	; 0xe80
  202cb0:	07dd      	lsls	r5, r3, #31
  202cb2:	d5f7      	bpl.n	202ca4 <main+0x7d4>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
  202cb4:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
  202cb8:	07db      	lsls	r3, r3, #31
  202cba:	d5f3      	bpl.n	202ca4 <main+0x7d4>
  {
    while (ITM->PORT[0U].u32 == 0UL)
  202cbc:	6813      	ldr	r3, [r2, #0]
  202cbe:	b91b      	cbnz	r3, 202cc8 <main+0x7f8>
    {
      __NOP();
  202cc0:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
  202cc2:	6813      	ldr	r3, [r2, #0]
  202cc4:	2b00      	cmp	r3, #0
  202cc6:	d0fb      	beq.n	202cc0 <main+0x7f0>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
  202cc8:	7011      	strb	r1, [r2, #0]
  202cca:	e7eb      	b.n	202ca4 <main+0x7d4>
                       void *param) {

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
  202ccc:	4886      	ldr	r0, [pc, #536]	; (202ee8 <main+0xa18>)
      b = dmaStreamAllocate(adcp->dmastp,
  202cce:	6af1      	ldr	r1, [r6, #44]	; 0x2c
  202cd0:	6804      	ldr	r4, [r0, #0]
  202cd2:	7a48      	ldrb	r0, [r1, #9]
  202cd4:	4083      	lsls	r3, r0
  202cd6:	4223      	tst	r3, r4
  202cd8:	d14a      	bne.n	202d70 <main+0x8a0>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
  202cda:	4323      	orrs	r3, r4
  202cdc:	4f82      	ldr	r7, [pc, #520]	; (202ee8 <main+0xa18>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  202cde:	4c83      	ldr	r4, [pc, #524]	; (202eec <main+0xa1c>)
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  202ce0:	f8df e228 	ldr.w	lr, [pc, #552]	; 202f0c <main+0xa3c>

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
  202ce4:	f013 0fff 	tst.w	r3, #255	; 0xff
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  202ce8:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);
  202cec:	603b      	str	r3, [r7, #0]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  202cee:	4f7f      	ldr	r7, [pc, #508]	; (202eec <main+0xa1c>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  202cf0:	6066      	str	r6, [r4, #4]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  202cf2:	f847 e030 	str.w	lr, [r7, r0, lsl #3]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
  202cf6:	d007      	beq.n	202d08 <main+0x838>
    rccEnableDMA1(true);
  202cf8:	6b10      	ldr	r0, [r2, #48]	; 0x30
  202cfa:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
  202cfe:	6310      	str	r0, [r2, #48]	; 0x30
  202d00:	6d10      	ldr	r0, [r2, #80]	; 0x50
  202d02:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
  202d06:	6510      	str	r0, [r2, #80]	; 0x50
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
  202d08:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
  202d0c:	d008      	beq.n	202d20 <main+0x850>
    rccEnableDMA2(true);
  202d0e:	4b78      	ldr	r3, [pc, #480]	; (202ef0 <main+0xa20>)
  202d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  202d12:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  202d16:	631a      	str	r2, [r3, #48]	; 0x30
  202d18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  202d1a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
  202d1e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
  202d20:	680a      	ldr	r2, [r1, #0]
  202d22:	6813      	ldr	r3, [r2, #0]
  202d24:	f023 031f 	bic.w	r3, r3, #31
  202d28:	6013      	str	r3, [r2, #0]
  202d2a:	6813      	ldr	r3, [r2, #0]
  202d2c:	f013 0e01 	ands.w	lr, r3, #1
  202d30:	d1fb      	bne.n	202d2a <main+0x85a>
  202d32:	7a08      	ldrb	r0, [r1, #8]
  202d34:	243d      	movs	r4, #61	; 0x3d
  202d36:	684b      	ldr	r3, [r1, #4]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
  202d38:	f04f 0921 	mov.w	r9, #33	; 0x21
  dmaStreamDisable(dmastp);
  202d3c:	4084      	lsls	r4, r0
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202d3e:	4f6d      	ldr	r7, [pc, #436]	; (202ef4 <main+0xa24>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202d40:	2001      	movs	r0, #1
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202d42:	f04f 0c60 	mov.w	ip, #96	; 0x60
  202d46:	601c      	str	r4, [r3, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  202d48:	f8c2 e000 	str.w	lr, [r2]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
  202d4c:	f8c2 9014 	str.w	r9, [r2, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
  202d50:	7a8b      	ldrb	r3, [r1, #10]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202d52:	095c      	lsrs	r4, r3, #5
  202d54:	f003 011f 	and.w	r1, r3, #31
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202d58:	443b      	add	r3, r7
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202d5a:	fa00 f101 	lsl.w	r1, r0, r1
  202d5e:	eb07 0084 	add.w	r0, r7, r4, lsl #2
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202d62:	f883 c300 	strb.w	ip, [r3, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202d66:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202d6a:	f847 1024 	str.w	r1, [r7, r4, lsl #2]
  202d6e:	e000      	b.n	202d72 <main+0x8a2>
  202d70:	680a      	ldr	r2, [r1, #0]
      rccEnableADC1(true);
  202d72:	4b5f      	ldr	r3, [pc, #380]	; (202ef0 <main+0xa20>)
    adcp->adc->CR1 = 0;
  202d74:	2100      	movs	r1, #0
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
  202d76:	4860      	ldr	r0, [pc, #384]	; (202ef8 <main+0xa28>)
    adcp->adc->CR2 = ADC_CR2_ADON;
  202d78:	2401      	movs	r4, #1
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
  202d7a:	6090      	str	r0, [r2, #8]
      rccEnableADC1(true);
  202d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  202d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  202d82:	645a      	str	r2, [r3, #68]	; 0x44
  202d84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  202d86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  202d8a:	665a      	str	r2, [r3, #100]	; 0x64
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
  202d8c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
    adcp->adc->CR1 = 0;
  202d90:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
  202d92:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
  202d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  202d9a:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
    adcp->adc->CR1 = 0;
  202d9e:	6051      	str	r1, [r2, #4]
    adcp->adc->CR2 = 0;
  202da0:	6091      	str	r1, [r2, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
  202da2:	6094      	str	r4, [r2, #8]
  202da4:	e66d      	b.n	202a82 <main+0x5b2>
      rccEnableTIM4(true);
  202da6:	4a52      	ldr	r2, [pc, #328]	; (202ef0 <main+0xa20>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202da8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202dac:	4951      	ldr	r1, [pc, #324]	; (202ef4 <main+0xa24>)
  202dae:	2770      	movs	r7, #112	; 0x70
  202db0:	6c13      	ldr	r3, [r2, #64]	; 0x40
  202db2:	f043 0304 	orr.w	r3, r3, #4
  202db6:	6413      	str	r3, [r2, #64]	; 0x40
  202db8:	6e13      	ldr	r3, [r2, #96]	; 0x60
  202dba:	f043 0304 	orr.w	r3, r3, #4
  202dbe:	6613      	str	r3, [r2, #96]	; 0x60
      gptp->clock = STM32_TIMCLK1;
  202dc0:	236b      	movs	r3, #107	; 0x6b
      rccResetTIM4();
  202dc2:	6a10      	ldr	r0, [r2, #32]
  202dc4:	f040 0004 	orr.w	r0, r0, #4
  202dc8:	6210      	str	r0, [r2, #32]
  202dca:	f8c2 e020 	str.w	lr, [r2, #32]
      gptp->clock = STM32_TIMCLK1;
  202dce:	4a4b      	ldr	r2, [pc, #300]	; (202efc <main+0xa2c>)
  202dd0:	f881 731e 	strb.w	r7, [r1, #798]	; 0x31e
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202dd4:	f8c1 4180 	str.w	r4, [r1, #384]	; 0x180
  202dd8:	f8c8 2008 	str.w	r2, [r8, #8]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202ddc:	600c      	str	r4, [r1, #0]
  202dde:	e632      	b.n	202a46 <main+0x576>
      rccEnableOTG_FS(true);
  202de0:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202de4:	2208      	movs	r2, #8
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
  202de6:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
  202dea:	21c0      	movs	r1, #192	; 0xc0
      rccEnableOTG_FS(true);
  202dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
  202df0:	f8df e11c 	ldr.w	lr, [pc, #284]	; 202f10 <main+0xa40>
  202df4:	2020      	movs	r0, #32
      rccEnableOTG_FS(true);
  202df6:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
  202dfa:	f8d9 3054 	ldr.w	r3, [r9, #84]	; 0x54
  202dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  202e02:	f8c9 3054 	str.w	r3, [r9, #84]	; 0x54
      rccResetOTG_FS();
  202e06:	f8d9 3014 	ldr.w	r3, [r9, #20]
  202e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  202e0e:	f8c9 3014 	str.w	r3, [r9, #20]
    otgp->GCCFG = GCCFG_INIT_VALUE;
  202e12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
      rccResetOTG_FS();
  202e16:	f8c9 4014 	str.w	r4, [r9, #20]
  202e1a:	f88b c343 	strb.w	ip, [fp, #835]	; 0x343
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
  202e1e:	f8cb 2188 	str.w	r2, [fp, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
  202e22:	f8cb 2008 	str.w	r2, [fp, #8]
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
  202e26:	4a36      	ldr	r2, [pc, #216]	; (202f00 <main+0xa30>)
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
  202e28:	f8ca e00c 	str.w	lr, [sl, #12]
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
  202e2c:	f8ca 2800 	str.w	r2, [sl, #2048]	; 0x800
    otgp->PCGCCTL = 0;
  202e30:	f8ca 4e00 	str.w	r4, [sl, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
  202e34:	f8ca 1000 	str.w	r1, [sl]
    otgp->GCCFG = GCCFG_INIT_VALUE;
  202e38:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
  202e3c:	f7fe fa28 	bl	201290 <chSysPolledDelayX>
  otgp->GRSTCTL = GRSTCTL_CSRST;
  202e40:	9b01      	ldr	r3, [sp, #4]
  202e42:	f8ca 3010 	str.w	r3, [sl, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
  202e46:	f8da 4010 	ldr.w	r4, [sl, #16]
  202e4a:	f014 0401 	ands.w	r4, r4, #1
  202e4e:	d1fa      	bne.n	202e46 <main+0x976>
  202e50:	2012      	movs	r0, #18
  202e52:	f7fe fa1d 	bl	201290 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
  202e56:	f8da 3010 	ldr.w	r3, [sl, #16]
  202e5a:	2b00      	cmp	r3, #0
  202e5c:	dafb      	bge.n	202e56 <main+0x986>
    otgp->GAHBCFG = 0;
  202e5e:	2000      	movs	r0, #0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  202e60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
  202e62:	f04f 3eff 	mov.w	lr, #4294967295
  202e66:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
    otgp->ie[i].DIEPCTL = 0;
  202e68:	4602      	mov	r2, r0
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  202e6a:	689b      	ldr	r3, [r3, #8]
    otgp->GAHBCFG = 0;
  202e6c:	f8ca 0008 	str.w	r0, [sl, #8]
  202e70:	eb01 1044 	add.w	r0, r1, r4, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  202e74:	3401      	adds	r4, #1
  202e76:	429c      	cmp	r4, r3
    otgp->ie[i].DIEPCTL = 0;
  202e78:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    otgp->ie[i].DIEPTSIZ = 0;
  202e7c:	f8c0 2910 	str.w	r2, [r0, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
  202e80:	f8c0 e908 	str.w	lr, [r0, #2312]	; 0x908
    otgp->oe[i].DOEPCTL = 0;
  202e84:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
  202e88:	f8c0 2b10 	str.w	r2, [r0, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  202e8c:	f8c0 eb08 	str.w	lr, [r0, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
  202e90:	d9ee      	bls.n	202e70 <main+0x9a0>
    if (usbp->config->sof_cb == NULL)
  202e92:	687b      	ldr	r3, [r7, #4]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
  202e94:	f04f 1001 	mov.w	r0, #65537	; 0x10001
    if (usbp->config->sof_cb == NULL)
  202e98:	68db      	ldr	r3, [r3, #12]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
  202e9a:	f8c1 081c 	str.w	r0, [r1, #2076]	; 0x81c
    otgp->DIEPMSK  = 0;
  202e9e:	f8ca 2810 	str.w	r2, [sl, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
  202ea2:	f8ca 2814 	str.w	r2, [sl, #2068]	; 0x814
    otgp->DAINTMSK = 0;
  202ea6:	f8ca 281c 	str.w	r2, [sl, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
  202eaa:	b16b      	cbz	r3, 202ec8 <main+0x9f8>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
  202eac:	4b15      	ldr	r3, [pc, #84]	; (202f04 <main+0xa34>)
  202eae:	f8ca 3018 	str.w	r3, [sl, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
  202eb2:	f04f 33ff 	mov.w	r3, #4294967295
  202eb6:	f8ca 3014 	str.w	r3, [sl, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
  202eba:	f8da 3008 	ldr.w	r3, [sl, #8]
  202ebe:	f043 0301 	orr.w	r3, r3, #1
  202ec2:	f8ca 3008 	str.w	r3, [sl, #8]
  202ec6:	e59e      	b.n	202a06 <main+0x536>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
  202ec8:	4b0f      	ldr	r3, [pc, #60]	; (202f08 <main+0xa38>)
  202eca:	f8ca 3018 	str.w	r3, [sl, #24]
  202ece:	e7f0      	b.n	202eb2 <main+0x9e2>
  202ed0:	20001054 	.word	0x20001054
  202ed4:	634c0635 	.word	0x634c0635
  202ed8:	1ff0f44c 	.word	0x1ff0f44c
  202edc:	1ff0f44e 	.word	0x1ff0f44e
  202ee0:	08003e64 	.word	0x08003e64
  202ee4:	08003e70 	.word	0x08003e70
  202ee8:	2000104c 	.word	0x2000104c
  202eec:	20000fcc 	.word	0x20000fcc
  202ef0:	40023800 	.word	0x40023800
  202ef4:	e000e100 	.word	0xe000e100
  202ef8:	4001204c 	.word	0x4001204c
  202efc:	066ff300 	.word	0x066ff300
  202f00:	02200003 	.word	0x02200003
  202f04:	c0303c08 	.word	0xc0303c08
  202f08:	c0303c00 	.word	0xc0303c00
  202f0c:	00202f61 	.word	0x00202f61
  202f10:	40001440 	.word	0x40001440
	...

00202f20 <adc_lld_stop_conversion>:
void adc_lld_stop_conversion(ADCDriver *adcp) {
  202f20:	b430      	push	{r4, r5}
  dmaStreamDisable(adcp->dmastp);
  202f22:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  202f24:	6822      	ldr	r2, [r4, #0]
  202f26:	6813      	ldr	r3, [r2, #0]
  202f28:	f023 031f 	bic.w	r3, r3, #31
  202f2c:	6013      	str	r3, [r2, #0]
  202f2e:	6813      	ldr	r3, [r2, #0]
  202f30:	f013 0301 	ands.w	r3, r3, #1
  202f34:	d1fb      	bne.n	202f2e <adc_lld_stop_conversion+0xe>
  202f36:	7a25      	ldrb	r5, [r4, #8]
  202f38:	213d      	movs	r1, #61	; 0x3d
  adcp->adc->CR1 = 0;
  202f3a:	6a82      	ldr	r2, [r0, #40]	; 0x28
  adcp->adc->CR2 = ADC_CR2_ADON;
  202f3c:	2001      	movs	r0, #1
  dmaStreamDisable(adcp->dmastp);
  202f3e:	6864      	ldr	r4, [r4, #4]
  202f40:	40a9      	lsls	r1, r5
  202f42:	6021      	str	r1, [r4, #0]
  adcp->adc->CR1 = 0;
  202f44:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
  202f46:	6893      	ldr	r3, [r2, #8]
  202f48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
  202f4c:	bc30      	pop	{r4, r5}
  adcp->adc->CR2 &= ~(ADC_CR2_SWSTART);
  202f4e:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
  202f50:	6090      	str	r0, [r2, #8]
}
  202f52:	4770      	bx	lr
	...

00202f60 <adc_lld_serve_rx_interrupt.lto_priv.49>:
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
  202f60:	f011 0f0c 	tst.w	r1, #12
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
  202f64:	b570      	push	{r4, r5, r6, lr}
  202f66:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
  202f68:	d118      	bne.n	202f9c <adc_lld_serve_rx_interrupt.lto_priv.49+0x3c>
    if (adcp->grpp != NULL) {
  202f6a:	6903      	ldr	r3, [r0, #16]
  202f6c:	b1ab      	cbz	r3, 202f9a <adc_lld_serve_rx_interrupt.lto_priv.49+0x3a>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
  202f6e:	068d      	lsls	r5, r1, #26
  202f70:	d511      	bpl.n	202f96 <adc_lld_serve_rx_interrupt.lto_priv.49+0x36>
        _adc_isr_full_code(adcp);
  202f72:	781a      	ldrb	r2, [r3, #0]
  202f74:	2a00      	cmp	r2, #0
  202f76:	d043      	beq.n	203000 <adc_lld_serve_rx_interrupt.lto_priv.49+0xa0>
  202f78:	685d      	ldr	r5, [r3, #4]
  202f7a:	b175      	cbz	r5, 202f9a <adc_lld_serve_rx_interrupt.lto_priv.49+0x3a>
  202f7c:	68c2      	ldr	r2, [r0, #12]
  202f7e:	2a01      	cmp	r2, #1
  202f80:	d939      	bls.n	202ff6 <adc_lld_serve_rx_interrupt.lto_priv.49+0x96>
  202f82:	0852      	lsrs	r2, r2, #1
  202f84:	885e      	ldrh	r6, [r3, #2]
  202f86:	6883      	ldr	r3, [r0, #8]
  202f88:	0051      	lsls	r1, r2, #1
  202f8a:	fb06 3101 	mla	r1, r6, r1, r3
  202f8e:	462b      	mov	r3, r5
}
  202f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
  202f94:	4718      	bx	r3
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
  202f96:	06ca      	lsls	r2, r1, #27
  202f98:	d421      	bmi.n	202fde <adc_lld_serve_rx_interrupt.lto_priv.49+0x7e>
  202f9a:	bd70      	pop	{r4, r5, r6, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  202f9c:	f7ff ffc0 	bl	202f20 <adc_lld_stop_conversion>
  202fa0:	6923      	ldr	r3, [r4, #16]
  202fa2:	689b      	ldr	r3, [r3, #8]
  202fa4:	2b00      	cmp	r3, #0
  202fa6:	d04b      	beq.n	203040 <adc_lld_serve_rx_interrupt.lto_priv.49+0xe0>
  202fa8:	2205      	movs	r2, #5
  202faa:	2100      	movs	r1, #0
  202fac:	4620      	mov	r0, r4
  202fae:	7022      	strb	r2, [r4, #0]
  202fb0:	4798      	blx	r3
  202fb2:	7823      	ldrb	r3, [r4, #0]
  202fb4:	2b05      	cmp	r3, #5
  202fb6:	d01b      	beq.n	202ff0 <adc_lld_serve_rx_interrupt.lto_priv.49+0x90>
  202fb8:	2300      	movs	r3, #0
  202fba:	6123      	str	r3, [r4, #16]
  202fbc:	2320      	movs	r3, #32
  202fbe:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  202fc2:	6963      	ldr	r3, [r4, #20]
  202fc4:	b13b      	cbz	r3, 202fd6 <adc_lld_serve_rx_interrupt.lto_priv.49+0x76>
    *trp = NULL;
  202fc6:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
  202fc8:	f04f 32ff 	mov.w	r2, #4294967295
    (void) chSchReadyI(tp);
  202fcc:	4618      	mov	r0, r3
    *trp = NULL;
  202fce:	6161      	str	r1, [r4, #20]
    tp->u.rdymsg = msg;
  202fd0:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
  202fd2:	f7fe f83d 	bl	201050 <chSchReadyI>
  202fd6:	2300      	movs	r3, #0
  202fd8:	f383 8811 	msr	BASEPRI, r3
  202fdc:	bd70      	pop	{r4, r5, r6, pc}
        _adc_isr_half_code(adcp);
  202fde:	685b      	ldr	r3, [r3, #4]
  202fe0:	2b00      	cmp	r3, #0
  202fe2:	d0da      	beq.n	202f9a <adc_lld_serve_rx_interrupt.lto_priv.49+0x3a>
  202fe4:	68c2      	ldr	r2, [r0, #12]
  202fe6:	6881      	ldr	r1, [r0, #8]
  202fe8:	0852      	lsrs	r2, r2, #1
}
  202fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_half_code(adcp);
  202fee:	4718      	bx	r3
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  202ff0:	2302      	movs	r3, #2
  202ff2:	7023      	strb	r3, [r4, #0]
  202ff4:	e7e0      	b.n	202fb8 <adc_lld_serve_rx_interrupt.lto_priv.49+0x58>
        _adc_isr_full_code(adcp);
  202ff6:	462b      	mov	r3, r5
  202ff8:	6881      	ldr	r1, [r0, #8]
}
  202ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        _adc_isr_full_code(adcp);
  202ffe:	4718      	bx	r3
  203000:	f7ff ff8e 	bl	202f20 <adc_lld_stop_conversion>
  203004:	6923      	ldr	r3, [r4, #16]
  203006:	685b      	ldr	r3, [r3, #4]
  203008:	b1ab      	cbz	r3, 203036 <adc_lld_serve_rx_interrupt.lto_priv.49+0xd6>
  20300a:	2504      	movs	r5, #4
  20300c:	68e2      	ldr	r2, [r4, #12]
  20300e:	68a1      	ldr	r1, [r4, #8]
  203010:	4620      	mov	r0, r4
  203012:	7025      	strb	r5, [r4, #0]
  203014:	4798      	blx	r3
  203016:	7823      	ldrb	r3, [r4, #0]
  203018:	42ab      	cmp	r3, r5
  20301a:	d00c      	beq.n	203036 <adc_lld_serve_rx_interrupt.lto_priv.49+0xd6>
  20301c:	2320      	movs	r3, #32
  20301e:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  203022:	6963      	ldr	r3, [r4, #20]
  203024:	2b00      	cmp	r3, #0
  203026:	d0d6      	beq.n	202fd6 <adc_lld_serve_rx_interrupt.lto_priv.49+0x76>
    *trp = NULL;
  203028:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  20302a:	4618      	mov	r0, r3
    *trp = NULL;
  20302c:	6162      	str	r2, [r4, #20]
    tp->u.rdymsg = msg;
  20302e:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
  203030:	f7fe f80e 	bl	201050 <chSchReadyI>
  203034:	e7cf      	b.n	202fd6 <adc_lld_serve_rx_interrupt.lto_priv.49+0x76>
  203036:	2202      	movs	r2, #2
  203038:	2300      	movs	r3, #0
  20303a:	7022      	strb	r2, [r4, #0]
  20303c:	6123      	str	r3, [r4, #16]
  20303e:	e7ed      	b.n	20301c <adc_lld_serve_rx_interrupt.lto_priv.49+0xbc>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  203040:	2202      	movs	r2, #2
  203042:	6123      	str	r3, [r4, #16]
  203044:	7022      	strb	r2, [r4, #0]
  203046:	e7b9      	b.n	202fbc <adc_lld_serve_rx_interrupt.lto_priv.49+0x5c>
	...

00203050 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
  203050:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
  203054:	2a15      	cmp	r2, #21
  203056:	d80d      	bhi.n	203074 <_usb_ep0out+0x24>
  203058:	f640 6141 	movw	r1, #3649	; 0xe41
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
  20305c:	b538      	push	{r3, r4, r5, lr}
  20305e:	2301      	movs	r3, #1
  203060:	4604      	mov	r4, r0
  203062:	4093      	lsls	r3, r2
  203064:	420b      	tst	r3, r1
  203066:	d112      	bne.n	20308e <_usb_ep0out+0x3e>
  203068:	f413 1580 	ands.w	r5, r3, #1048576	; 0x100000
  20306c:	d103      	bne.n	203076 <_usb_ep0out+0x26>
  20306e:	029b      	lsls	r3, r3, #10
  203070:	d423      	bmi.n	2030ba <_usb_ep0out+0x6a>
  203072:	bd38      	pop	{r3, r4, r5, pc}
  203074:	4770      	bx	lr
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
  203076:	68c3      	ldr	r3, [r0, #12]
  203078:	699b      	ldr	r3, [r3, #24]
  20307a:	685b      	ldr	r3, [r3, #4]
  20307c:	2b00      	cmp	r3, #0
  20307e:	d1f8      	bne.n	203072 <_usb_ep0out+0x22>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
  203080:	6d83      	ldr	r3, [r0, #88]	; 0x58
  203082:	b103      	cbz	r3, 203086 <_usb_ep0out+0x36>
      usbp->ep0endcb(usbp);
  203084:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
  203086:	2300      	movs	r3, #0
  203088:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  20308c:	bd38      	pop	{r3, r4, r5, pc}
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
  20308e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
    usb_lld_stall_out(usbp, 0);
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
  203090:	6841      	ldr	r1, [r0, #4]
  203092:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
  203096:	680d      	ldr	r5, [r1, #0]
  203098:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  20309c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
  2030a0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
  2030a4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  2030a8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
  2030ac:	b10d      	cbz	r5, 2030b2 <_usb_ep0out+0x62>
  2030ae:	2106      	movs	r1, #6
  2030b0:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
  2030b2:	2306      	movs	r3, #6
  2030b4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  2030b8:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
  2030ba:	220b      	movs	r2, #11
  2030bc:	2320      	movs	r3, #32
  2030be:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
  2030c2:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2030c6:	8902      	ldrh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
  2030c8:	4629      	mov	r1, r5
  isp = usbp->epc[ep]->in_state;
  2030ca:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2030cc:	f042 0201 	orr.w	r2, r2, #1
  isp = usbp->epc[ep]->in_state;
  2030d0:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2030d2:	8102      	strh	r2, [r0, #8]
  isp->txbuf  = buf;
  2030d4:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
  2030d6:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
  2030d8:	605d      	str	r5, [r3, #4]
  usb_lld_start_in(usbp, ep);
  2030da:	f7fe ff09 	bl	201ef0 <usb_lld_start_in>
  2030de:	f385 8811 	msr	BASEPRI, r5
  2030e2:	bd38      	pop	{r3, r4, r5, pc}
	...

002030f0 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
  2030f0:	b538      	push	{r3, r4, r5, lr}
  switch (usbp->ep0state) {
  2030f2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
  2030f6:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
  2030f8:	2b15      	cmp	r3, #21
  2030fa:	d821      	bhi.n	203140 <_usb_ep0in+0x50>
  2030fc:	e8df f003 	tbb	[pc, r3]
  203100:	2020200b 	.word	0x2020200b
  203104:	200b2020 	.word	0x200b2020
  203108:	48312120 	.word	0x48312120
  20310c:	20202020 	.word	0x20202020
  203110:	20202020 	.word	0x20202020
  203114:	0b0b      	.short	0x0b0b
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
  203116:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
  203118:	6841      	ldr	r1, [r0, #4]
  20311a:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
  20311e:	680d      	ldr	r5, [r1, #0]
  203120:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  203124:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
  203128:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
  20312c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  203130:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
  203134:	b10d      	cbz	r5, 20313a <_usb_ep0in+0x4a>
  203136:	2106      	movs	r1, #6
  203138:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
  20313a:	2306      	movs	r3, #6
  20313c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  203140:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
  203142:	f890 1063 	ldrb.w	r1, [r0, #99]	; 0x63
  203146:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    if ((usbp->ep0n < max) &&
  20314a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    max = (size_t)get_hword(&usbp->setup[6]);
  20314c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    if ((usbp->ep0n < max) &&
  203150:	4293      	cmp	r3, r2
  203152:	d906      	bls.n	203162 <_usb_ep0in+0x72>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
  203154:	68c3      	ldr	r3, [r0, #12]
  203156:	8a1b      	ldrh	r3, [r3, #16]
  203158:	fbb2 f5f3 	udiv	r5, r2, r3
  20315c:	fb03 2515 	mls	r5, r3, r5, r2
    if ((usbp->ep0n < max) &&
  203160:	b1ed      	cbz	r5, 20319e <_usb_ep0in+0xae>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
  203162:	2214      	movs	r2, #20
  203164:	2320      	movs	r3, #32
  203166:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
  20316a:	f383 8811 	msr	BASEPRI, r3
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  20316e:	8962      	ldrh	r2, [r4, #10]
  osp->rxbuf  = buf;
  203170:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
  203172:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_out(usbp, ep);
  203174:	4620      	mov	r0, r4
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  203176:	f042 0201 	orr.w	r2, r2, #1
  usb_lld_start_out(usbp, ep);
  20317a:	4629      	mov	r1, r5
  osp = usbp->epc[ep]->out_state;
  20317c:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
  20317e:	8162      	strh	r2, [r4, #10]
  osp->rxbuf  = buf;
  203180:	609d      	str	r5, [r3, #8]
  osp->rxsize = n;
  203182:	601d      	str	r5, [r3, #0]
  osp->rxcnt  = 0;
  203184:	605d      	str	r5, [r3, #4]
  usb_lld_start_out(usbp, ep);
  203186:	f7fe ff0b 	bl	201fa0 <usb_lld_start_out>
  20318a:	f385 8811 	msr	BASEPRI, r5
  20318e:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
  203190:	6d83      	ldr	r3, [r0, #88]	; 0x58
  203192:	b103      	cbz	r3, 203196 <_usb_ep0in+0xa6>
      usbp->ep0endcb(usbp);
  203194:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
  203196:	2300      	movs	r3, #0
  203198:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  20319c:	bd38      	pop	{r3, r4, r5, pc}
  20319e:	2320      	movs	r3, #32
  2031a0:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2031a4:	8902      	ldrh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
  2031a6:	4629      	mov	r1, r5
  isp = usbp->epc[ep]->in_state;
  2031a8:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2031aa:	f042 0201 	orr.w	r2, r2, #1
  isp = usbp->epc[ep]->in_state;
  2031ae:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
  2031b0:	8102      	strh	r2, [r0, #8]
  isp->txbuf  = buf;
  2031b2:	609d      	str	r5, [r3, #8]
  isp->txsize = n;
  2031b4:	601d      	str	r5, [r3, #0]
  isp->txcnt  = 0;
  2031b6:	605d      	str	r5, [r3, #4]
  usb_lld_start_in(usbp, ep);
  2031b8:	f7fe fe9a 	bl	201ef0 <usb_lld_start_in>
  2031bc:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
  2031c0:	230a      	movs	r3, #10
  2031c2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  2031c6:	bd38      	pop	{r3, r4, r5, pc}
	...

002031d0 <Vector150>:
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2031d0:	4b08      	ldr	r3, [pc, #32]	; (2031f4 <Vector150+0x24>)
  if (dma_isr_redir[13].dma_func)
  2031d2:	4809      	ldr	r0, [pc, #36]	; (2031f8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2031d4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
  2031d6:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2031d8:	0989      	lsrs	r1, r1, #6
  2031da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  2031de:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6U;
  2031e0:	018c      	lsls	r4, r1, #6
  2031e2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
  2031e4:	b10a      	cbz	r2, 2031ea <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
  2031e6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
  2031e8:	4790      	blx	r2
}
  2031ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2031ee:	f7fd be97 	b.w	200f20 <_port_irq_epilogue>
  2031f2:	bf00      	nop
  2031f4:	40026400 	.word	0x40026400
  2031f8:	20000fcc 	.word	0x20000fcc
  2031fc:	00000000 	.word	0x00000000

00203200 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  203200:	b508      	push	{r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  203202:	4b07      	ldr	r3, [pc, #28]	; (203220 <Vector130+0x20>)
  if (dma_isr_redir[12].dma_func)
  203204:	4807      	ldr	r0, [pc, #28]	; (203224 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  203206:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
  203208:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20320a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
  20320e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
  203210:	b10a      	cbz	r2, 203216 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
  203212:	6e40      	ldr	r0, [r0, #100]	; 0x64
  203214:	4790      	blx	r2
}
  203216:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20321a:	f7fd be81 	b.w	200f20 <_port_irq_epilogue>
  20321e:	bf00      	nop
  203220:	40026400 	.word	0x40026400
  203224:	20000fcc 	.word	0x20000fcc
	...

00203230 <Vector12C>:
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  203230:	4b08      	ldr	r3, [pc, #32]	; (203254 <Vector12C+0x24>)
  if (dma_isr_redir[11].dma_func)
  203232:	4809      	ldr	r0, [pc, #36]	; (203258 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  203234:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
  203236:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  203238:	0d89      	lsrs	r1, r1, #22
  20323a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  20323e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22U;
  203240:	058c      	lsls	r4, r1, #22
  203242:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
  203244:	b10a      	cbz	r2, 20324a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
  203246:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  203248:	4790      	blx	r2
}
  20324a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20324e:	f7fd be67 	b.w	200f20 <_port_irq_epilogue>
  203252:	bf00      	nop
  203254:	40026400 	.word	0x40026400
  203258:	20000fcc 	.word	0x20000fcc
  20325c:	00000000 	.word	0x00000000

00203260 <Vector128>:
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  203260:	4b08      	ldr	r3, [pc, #32]	; (203284 <Vector128+0x24>)
  if (dma_isr_redir[10].dma_func)
  203262:	4809      	ldr	r0, [pc, #36]	; (203288 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  203264:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
  203266:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  203268:	0c09      	lsrs	r1, r1, #16
  20326a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  20326e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16U;
  203270:	040c      	lsls	r4, r1, #16
  203272:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
  203274:	b10a      	cbz	r2, 20327a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
  203276:	6d40      	ldr	r0, [r0, #84]	; 0x54
  203278:	4790      	blx	r2
}
  20327a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20327e:	f7fd be4f 	b.w	200f20 <_port_irq_epilogue>
  203282:	bf00      	nop
  203284:	40026400 	.word	0x40026400
  203288:	20000fcc 	.word	0x20000fcc
  20328c:	00000000 	.word	0x00000000

00203290 <Vector124>:
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  203290:	4b08      	ldr	r3, [pc, #32]	; (2032b4 <Vector124+0x24>)
  if (dma_isr_redir[9].dma_func)
  203292:	4809      	ldr	r0, [pc, #36]	; (2032b8 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  203294:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
  203296:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  203298:	0989      	lsrs	r1, r1, #6
  20329a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  20329e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6U;
  2032a0:	018c      	lsls	r4, r1, #6
  2032a2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
  2032a4:	b10a      	cbz	r2, 2032aa <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
  2032a6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  2032a8:	4790      	blx	r2
}
  2032aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2032ae:	f7fd be37 	b.w	200f20 <_port_irq_epilogue>
  2032b2:	bf00      	nop
  2032b4:	40026400 	.word	0x40026400
  2032b8:	20000fcc 	.word	0x20000fcc
  2032bc:	00000000 	.word	0x00000000

002032c0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  2032c0:	b508      	push	{r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2032c2:	4b07      	ldr	r3, [pc, #28]	; (2032e0 <Vector120+0x20>)
  if (dma_isr_redir[8].dma_func)
  2032c4:	4807      	ldr	r0, [pc, #28]	; (2032e4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2032c6:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
  2032c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2032ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
  2032ce:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
  2032d0:	b10a      	cbz	r2, 2032d6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
  2032d2:	6c40      	ldr	r0, [r0, #68]	; 0x44
  2032d4:	4790      	blx	r2
}
  2032d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2032da:	f7fd be21 	b.w	200f20 <_port_irq_epilogue>
  2032de:	bf00      	nop
  2032e0:	40026400 	.word	0x40026400
  2032e4:	20000fcc 	.word	0x20000fcc
	...

002032f0 <VectorFC>:
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2032f0:	4b08      	ldr	r3, [pc, #32]	; (203314 <VectorFC+0x24>)
  if (dma_isr_redir[7].dma_func)
  2032f2:	4809      	ldr	r0, [pc, #36]	; (203318 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2032f4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
  2032f6:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  2032f8:	0d89      	lsrs	r1, r1, #22
  2032fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  2032fe:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22U;
  203300:	058c      	lsls	r4, r1, #22
  203302:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
  203304:	b10a      	cbz	r2, 20330a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
  203306:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
  203308:	4790      	blx	r2
}
  20330a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20330e:	f7fd be07 	b.w	200f20 <_port_irq_epilogue>
  203312:	bf00      	nop
  203314:	40026000 	.word	0x40026000
  203318:	20000fcc 	.word	0x20000fcc
  20331c:	00000000 	.word	0x00000000

00203320 <Vector84>:
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  203320:	4b08      	ldr	r3, [pc, #32]	; (203344 <Vector84+0x24>)
  if (dma_isr_redir[6].dma_func)
  203322:	4809      	ldr	r0, [pc, #36]	; (203348 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  203324:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
  203326:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  203328:	0c09      	lsrs	r1, r1, #16
  20332a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  20332e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16U;
  203330:	040c      	lsls	r4, r1, #16
  203332:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
  203334:	b10a      	cbz	r2, 20333a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
  203336:	6b40      	ldr	r0, [r0, #52]	; 0x34
  203338:	4790      	blx	r2
}
  20333a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20333e:	f7fd bdef 	b.w	200f20 <_port_irq_epilogue>
  203342:	bf00      	nop
  203344:	40026000 	.word	0x40026000
  203348:	20000fcc 	.word	0x20000fcc
  20334c:	00000000 	.word	0x00000000

00203350 <Vector80>:
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  203350:	4b08      	ldr	r3, [pc, #32]	; (203374 <Vector80+0x24>)
  if (dma_isr_redir[5].dma_func)
  203352:	4809      	ldr	r0, [pc, #36]	; (203378 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  203354:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
  203356:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  203358:	0989      	lsrs	r1, r1, #6
  20335a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  20335e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6U;
  203360:	018c      	lsls	r4, r1, #6
  203362:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
  203364:	b10a      	cbz	r2, 20336a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
  203366:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  203368:	4790      	blx	r2
}
  20336a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20336e:	f7fd bdd7 	b.w	200f20 <_port_irq_epilogue>
  203372:	bf00      	nop
  203374:	40026000 	.word	0x40026000
  203378:	20000fcc 	.word	0x20000fcc
  20337c:	00000000 	.word	0x00000000

00203380 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  203380:	b508      	push	{r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  203382:	4b07      	ldr	r3, [pc, #28]	; (2033a0 <Vector7C+0x20>)
  if (dma_isr_redir[4].dma_func)
  203384:	4807      	ldr	r0, [pc, #28]	; (2033a4 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  203386:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
  203388:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20338a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
  20338e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
  203390:	b10a      	cbz	r2, 203396 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
  203392:	6a40      	ldr	r0, [r0, #36]	; 0x24
  203394:	4790      	blx	r2
}
  203396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20339a:	f7fd bdc1 	b.w	200f20 <_port_irq_epilogue>
  20339e:	bf00      	nop
  2033a0:	40026000 	.word	0x40026000
  2033a4:	20000fcc 	.word	0x20000fcc
	...

002033b0 <Vector78>:
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2033b0:	4b08      	ldr	r3, [pc, #32]	; (2033d4 <Vector78+0x24>)
  if (dma_isr_redir[3].dma_func)
  2033b2:	4809      	ldr	r0, [pc, #36]	; (2033d8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2033b4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
  2033b6:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  2033b8:	0d89      	lsrs	r1, r1, #22
  2033ba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  2033be:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22U;
  2033c0:	058c      	lsls	r4, r1, #22
  2033c2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
  2033c4:	b10a      	cbz	r2, 2033ca <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
  2033c6:	69c0      	ldr	r0, [r0, #28]
  2033c8:	4790      	blx	r2
}
  2033ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2033ce:	f7fd bda7 	b.w	200f20 <_port_irq_epilogue>
  2033d2:	bf00      	nop
  2033d4:	40026000 	.word	0x40026000
  2033d8:	20000fcc 	.word	0x20000fcc
  2033dc:	00000000 	.word	0x00000000

002033e0 <Vector74>:
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2033e0:	4b08      	ldr	r3, [pc, #32]	; (203404 <Vector74+0x24>)
  if (dma_isr_redir[2].dma_func)
  2033e2:	4809      	ldr	r0, [pc, #36]	; (203408 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2033e4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
  2033e6:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2033e8:	0c09      	lsrs	r1, r1, #16
  2033ea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  2033ee:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16U;
  2033f0:	040c      	lsls	r4, r1, #16
  2033f2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
  2033f4:	b10a      	cbz	r2, 2033fa <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
  2033f6:	6940      	ldr	r0, [r0, #20]
  2033f8:	4790      	blx	r2
}
  2033fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2033fe:	f7fd bd8f 	b.w	200f20 <_port_irq_epilogue>
  203402:	bf00      	nop
  203404:	40026000 	.word	0x40026000
  203408:	20000fcc 	.word	0x20000fcc
  20340c:	00000000 	.word	0x00000000

00203410 <Vector70>:
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  203410:	4b08      	ldr	r3, [pc, #32]	; (203434 <Vector70+0x24>)
  if (dma_isr_redir[1].dma_func)
  203412:	4809      	ldr	r0, [pc, #36]	; (203438 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  203414:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
  203416:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  203418:	0989      	lsrs	r1, r1, #6
  20341a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  20341e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6U;
  203420:	018c      	lsls	r4, r1, #6
  203422:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
  203424:	b10a      	cbz	r2, 20342a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
  203426:	68c0      	ldr	r0, [r0, #12]
  203428:	4790      	blx	r2
}
  20342a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  20342e:	f7fd bd77 	b.w	200f20 <_port_irq_epilogue>
  203432:	bf00      	nop
  203434:	40026000 	.word	0x40026000
  203438:	20000fcc 	.word	0x20000fcc
  20343c:	00000000 	.word	0x00000000

00203440 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  203440:	b508      	push	{r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  203442:	4b07      	ldr	r3, [pc, #28]	; (203460 <Vector6C+0x20>)
  if (dma_isr_redir[0].dma_func)
  203444:	4a07      	ldr	r2, [pc, #28]	; (203464 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  203446:	6819      	ldr	r1, [r3, #0]
  203448:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
  20344c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
  20344e:	6813      	ldr	r3, [r2, #0]
  203450:	b10b      	cbz	r3, 203456 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
  203452:	6850      	ldr	r0, [r2, #4]
  203454:	4798      	blx	r3
}
  203456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  20345a:	f7fd bd61 	b.w	200f20 <_port_irq_epilogue>
  20345e:	bf00      	nop
  203460:	40026000 	.word	0x40026000
  203464:	20000fcc 	.word	0x20000fcc
	...

00203470 <Vector88>:
  sr = ADC1->SR;
  203470:	4b1d      	ldr	r3, [pc, #116]	; (2034e8 <Vector88+0x78>)
  ADC1->SR = 0;
  203472:	2100      	movs	r1, #0
  sr = ADC1->SR;
  203474:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
  203476:	6019      	str	r1, [r3, #0]
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
  203478:	0693      	lsls	r3, r2, #26
  20347a:	d52b      	bpl.n	2034d4 <Vector88+0x64>
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
  20347c:	b510      	push	{r4, lr}
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
  20347e:	4c1b      	ldr	r4, [pc, #108]	; (2034ec <Vector88+0x7c>)
  203480:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  203482:	681b      	ldr	r3, [r3, #0]
  203484:	685b      	ldr	r3, [r3, #4]
  203486:	b30b      	cbz	r3, 2034cc <Vector88+0x5c>
    if (ADCD1.grpp != NULL)
  203488:	6923      	ldr	r3, [r4, #16]
  20348a:	b1fb      	cbz	r3, 2034cc <Vector88+0x5c>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  20348c:	4620      	mov	r0, r4
  20348e:	f7ff fd47 	bl	202f20 <adc_lld_stop_conversion>
  203492:	6923      	ldr	r3, [r4, #16]
  203494:	689b      	ldr	r3, [r3, #8]
  203496:	b313      	cbz	r3, 2034de <Vector88+0x6e>
  203498:	2205      	movs	r2, #5
  20349a:	2101      	movs	r1, #1
  20349c:	4620      	mov	r0, r4
  20349e:	7022      	strb	r2, [r4, #0]
  2034a0:	4798      	blx	r3
  2034a2:	7823      	ldrb	r3, [r4, #0]
  2034a4:	2b05      	cmp	r3, #5
  2034a6:	d017      	beq.n	2034d8 <Vector88+0x68>
  2034a8:	2300      	movs	r3, #0
  2034aa:	6123      	str	r3, [r4, #16]
  2034ac:	2320      	movs	r3, #32
  2034ae:	f383 8811 	msr	BASEPRI, r3
  if (*trp != NULL) {
  2034b2:	6963      	ldr	r3, [r4, #20]
  2034b4:	b13b      	cbz	r3, 2034c6 <Vector88+0x56>
    tp->u.rdymsg = msg;
  2034b6:	f04f 31ff 	mov.w	r1, #4294967295
    *trp = NULL;
  2034ba:	2200      	movs	r2, #0
    (void) chSchReadyI(tp);
  2034bc:	4618      	mov	r0, r3
    tp->u.rdymsg = msg;
  2034be:	6259      	str	r1, [r3, #36]	; 0x24
    *trp = NULL;
  2034c0:	6162      	str	r2, [r4, #20]
    (void) chSchReadyI(tp);
  2034c2:	f7fd fdc5 	bl	201050 <chSchReadyI>
  2034c6:	2300      	movs	r3, #0
  2034c8:	f383 8811 	msr	BASEPRI, r3
}
  2034cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2034d0:	f7fd bd26 	b.w	200f20 <_port_irq_epilogue>
  2034d4:	f7fd bd24 	b.w	200f20 <_port_irq_epilogue>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
  2034d8:	2302      	movs	r3, #2
  2034da:	7023      	strb	r3, [r4, #0]
  2034dc:	e7e4      	b.n	2034a8 <Vector88+0x38>
  2034de:	2202      	movs	r2, #2
  2034e0:	6123      	str	r3, [r4, #16]
  2034e2:	7022      	strb	r2, [r4, #0]
  2034e4:	e7e2      	b.n	2034ac <Vector88+0x3c>
  2034e6:	bf00      	nop
  2034e8:	40012000 	.word	0x40012000
  2034ec:	20000850 	.word	0x20000850

002034f0 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
  2034f0:	4b3e      	ldr	r3, [pc, #248]	; (2035ec <VectorE0+0xfc>)
OSAL_IRQ_HANDLER(VectorE0) {
  2034f2:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  2034f4:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
  2034f6:	681a      	ldr	r2, [r3, #0]
  2034f8:	4014      	ands	r4, r2
  2034fa:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  2034fe:	615a      	str	r2, [r3, #20]

  exti_serve_irq(pr, 10);
  203500:	0562      	lsls	r2, r4, #21
  203502:	d510      	bpl.n	203526 <VectorE0+0x36>
  203504:	4a3a      	ldr	r2, [pc, #232]	; (2035f0 <VectorE0+0x100>)
  203506:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
  20350a:	b113      	cbz	r3, 203512 <VectorE0+0x22>
  20350c:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
  203510:	4798      	blx	r3
  203512:	2320      	movs	r3, #32
  203514:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
  203518:	2100      	movs	r1, #0
  20351a:	4836      	ldr	r0, [pc, #216]	; (2035f4 <VectorE0+0x104>)
  20351c:	f7fd fe78 	bl	201210 <chThdDequeueAllI>
  203520:	2300      	movs	r3, #0
  203522:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 11);
  203526:	0523      	lsls	r3, r4, #20
  203528:	d510      	bpl.n	20354c <VectorE0+0x5c>
  20352a:	4a31      	ldr	r2, [pc, #196]	; (2035f0 <VectorE0+0x100>)
  20352c:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
  203530:	b113      	cbz	r3, 203538 <VectorE0+0x48>
  203532:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
  203536:	4798      	blx	r3
  203538:	2320      	movs	r3, #32
  20353a:	f383 8811 	msr	BASEPRI, r3
  20353e:	2100      	movs	r1, #0
  203540:	482d      	ldr	r0, [pc, #180]	; (2035f8 <VectorE0+0x108>)
  203542:	f7fd fe65 	bl	201210 <chThdDequeueAllI>
  203546:	2300      	movs	r3, #0
  203548:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 12);
  20354c:	04e0      	lsls	r0, r4, #19
  20354e:	d510      	bpl.n	203572 <VectorE0+0x82>
  203550:	4a27      	ldr	r2, [pc, #156]	; (2035f0 <VectorE0+0x100>)
  203552:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
  203556:	b113      	cbz	r3, 20355e <VectorE0+0x6e>
  203558:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
  20355c:	4798      	blx	r3
  20355e:	2320      	movs	r3, #32
  203560:	f383 8811 	msr	BASEPRI, r3
  203564:	2100      	movs	r1, #0
  203566:	4825      	ldr	r0, [pc, #148]	; (2035fc <VectorE0+0x10c>)
  203568:	f7fd fe52 	bl	201210 <chThdDequeueAllI>
  20356c:	2300      	movs	r3, #0
  20356e:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 13);
  203572:	04a1      	lsls	r1, r4, #18
  203574:	d510      	bpl.n	203598 <VectorE0+0xa8>
  203576:	4a1e      	ldr	r2, [pc, #120]	; (2035f0 <VectorE0+0x100>)
  203578:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
  20357c:	b113      	cbz	r3, 203584 <VectorE0+0x94>
  20357e:	f8d2 00dc 	ldr.w	r0, [r2, #220]	; 0xdc
  203582:	4798      	blx	r3
  203584:	2320      	movs	r3, #32
  203586:	f383 8811 	msr	BASEPRI, r3
  20358a:	2100      	movs	r1, #0
  20358c:	481c      	ldr	r0, [pc, #112]	; (203600 <VectorE0+0x110>)
  20358e:	f7fd fe3f 	bl	201210 <chThdDequeueAllI>
  203592:	2300      	movs	r3, #0
  203594:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 14);
  203598:	0462      	lsls	r2, r4, #17
  20359a:	d510      	bpl.n	2035be <VectorE0+0xce>
  20359c:	4a14      	ldr	r2, [pc, #80]	; (2035f0 <VectorE0+0x100>)
  20359e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
  2035a2:	b113      	cbz	r3, 2035aa <VectorE0+0xba>
  2035a4:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
  2035a8:	4798      	blx	r3
  2035aa:	2320      	movs	r3, #32
  2035ac:	f383 8811 	msr	BASEPRI, r3
  2035b0:	2100      	movs	r1, #0
  2035b2:	4814      	ldr	r0, [pc, #80]	; (203604 <VectorE0+0x114>)
  2035b4:	f7fd fe2c 	bl	201210 <chThdDequeueAllI>
  2035b8:	2300      	movs	r3, #0
  2035ba:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 15);
  2035be:	0423      	lsls	r3, r4, #16
  2035c0:	d510      	bpl.n	2035e4 <VectorE0+0xf4>
  2035c2:	4a0b      	ldr	r2, [pc, #44]	; (2035f0 <VectorE0+0x100>)
  2035c4:	f8d2 30f8 	ldr.w	r3, [r2, #248]	; 0xf8
  2035c8:	b113      	cbz	r3, 2035d0 <VectorE0+0xe0>
  2035ca:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
  2035ce:	4798      	blx	r3
  2035d0:	2320      	movs	r3, #32
  2035d2:	f383 8811 	msr	BASEPRI, r3
  2035d6:	2100      	movs	r1, #0
  2035d8:	480b      	ldr	r0, [pc, #44]	; (203608 <VectorE0+0x118>)
  2035da:	f7fd fe19 	bl	201210 <chThdDequeueAllI>
  2035de:	2300      	movs	r3, #0
  2035e0:	f383 8811 	msr	BASEPRI, r3

  OSAL_IRQ_EPILOGUE();
}
  2035e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2035e8:	f7fd bc9a 	b.w	200f20 <_port_irq_epilogue>
  2035ec:	40013c00 	.word	0x40013c00
  2035f0:	20000d8c 	.word	0x20000d8c
  2035f4:	20000e2c 	.word	0x20000e2c
  2035f8:	20000e3c 	.word	0x20000e3c
  2035fc:	20000e4c 	.word	0x20000e4c
  203600:	20000e5c 	.word	0x20000e5c
  203604:	20000e6c 	.word	0x20000e6c
  203608:	20000e7c 	.word	0x20000e7c
  20360c:	00000000 	.word	0x00000000

00203610 <Vector9C>:
  pr = EXTI->PR;
  203610:	4b32      	ldr	r3, [pc, #200]	; (2036dc <Vector9C+0xcc>)
OSAL_IRQ_HANDLER(Vector9C) {
  203612:	b510      	push	{r4, lr}
  pr = EXTI->PR;
  203614:	695c      	ldr	r4, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
  203616:	681a      	ldr	r2, [r3, #0]
  203618:	4014      	ands	r4, r2
  20361a:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
  EXTI->PR = pr;
  20361e:	615a      	str	r2, [r3, #20]
  exti_serve_irq(pr, 5);
  203620:	06a3      	lsls	r3, r4, #26
  203622:	d50e      	bpl.n	203642 <Vector9C+0x32>
  203624:	4a2e      	ldr	r2, [pc, #184]	; (2036e0 <Vector9C+0xd0>)
  203626:	6d93      	ldr	r3, [r2, #88]	; 0x58
  203628:	b10b      	cbz	r3, 20362e <Vector9C+0x1e>
  20362a:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
  20362c:	4798      	blx	r3
  20362e:	2320      	movs	r3, #32
  203630:	f383 8811 	msr	BASEPRI, r3
  203634:	2100      	movs	r1, #0
  203636:	482b      	ldr	r0, [pc, #172]	; (2036e4 <Vector9C+0xd4>)
  203638:	f7fd fdea 	bl	201210 <chThdDequeueAllI>
  20363c:	2300      	movs	r3, #0
  20363e:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 6);
  203642:	0660      	lsls	r0, r4, #25
  203644:	d50e      	bpl.n	203664 <Vector9C+0x54>
  203646:	4a26      	ldr	r2, [pc, #152]	; (2036e0 <Vector9C+0xd0>)
  203648:	6e93      	ldr	r3, [r2, #104]	; 0x68
  20364a:	b10b      	cbz	r3, 203650 <Vector9C+0x40>
  20364c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
  20364e:	4798      	blx	r3
  203650:	2320      	movs	r3, #32
  203652:	f383 8811 	msr	BASEPRI, r3
  203656:	2100      	movs	r1, #0
  203658:	4823      	ldr	r0, [pc, #140]	; (2036e8 <Vector9C+0xd8>)
  20365a:	f7fd fdd9 	bl	201210 <chThdDequeueAllI>
  20365e:	2300      	movs	r3, #0
  203660:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 7);
  203664:	0621      	lsls	r1, r4, #24
  203666:	d50e      	bpl.n	203686 <Vector9C+0x76>
  203668:	4a1d      	ldr	r2, [pc, #116]	; (2036e0 <Vector9C+0xd0>)
  20366a:	6f93      	ldr	r3, [r2, #120]	; 0x78
  20366c:	b10b      	cbz	r3, 203672 <Vector9C+0x62>
  20366e:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  203670:	4798      	blx	r3
  203672:	2320      	movs	r3, #32
  203674:	f383 8811 	msr	BASEPRI, r3
  203678:	2100      	movs	r1, #0
  20367a:	481c      	ldr	r0, [pc, #112]	; (2036ec <Vector9C+0xdc>)
  20367c:	f7fd fdc8 	bl	201210 <chThdDequeueAllI>
  203680:	2300      	movs	r3, #0
  203682:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 8);
  203686:	05e2      	lsls	r2, r4, #23
  203688:	d510      	bpl.n	2036ac <Vector9C+0x9c>
  20368a:	4a15      	ldr	r2, [pc, #84]	; (2036e0 <Vector9C+0xd0>)
  20368c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
  203690:	b113      	cbz	r3, 203698 <Vector9C+0x88>
  203692:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
  203696:	4798      	blx	r3
  203698:	2320      	movs	r3, #32
  20369a:	f383 8811 	msr	BASEPRI, r3
  20369e:	2100      	movs	r1, #0
  2036a0:	4813      	ldr	r0, [pc, #76]	; (2036f0 <Vector9C+0xe0>)
  2036a2:	f7fd fdb5 	bl	201210 <chThdDequeueAllI>
  2036a6:	2300      	movs	r3, #0
  2036a8:	f383 8811 	msr	BASEPRI, r3
  exti_serve_irq(pr, 9);
  2036ac:	05a3      	lsls	r3, r4, #22
  2036ae:	d510      	bpl.n	2036d2 <Vector9C+0xc2>
  2036b0:	4a0b      	ldr	r2, [pc, #44]	; (2036e0 <Vector9C+0xd0>)
  2036b2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
  2036b6:	b113      	cbz	r3, 2036be <Vector9C+0xae>
  2036b8:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
  2036bc:	4798      	blx	r3
  2036be:	2320      	movs	r3, #32
  2036c0:	f383 8811 	msr	BASEPRI, r3
  2036c4:	2100      	movs	r1, #0
  2036c6:	480b      	ldr	r0, [pc, #44]	; (2036f4 <Vector9C+0xe4>)
  2036c8:	f7fd fda2 	bl	201210 <chThdDequeueAllI>
  2036cc:	2300      	movs	r3, #0
  2036ce:	f383 8811 	msr	BASEPRI, r3
}
  2036d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
  2036d6:	f7fd bc23 	b.w	200f20 <_port_irq_epilogue>
  2036da:	bf00      	nop
  2036dc:	40013c00 	.word	0x40013c00
  2036e0:	20000d8c 	.word	0x20000d8c
  2036e4:	20000ddc 	.word	0x20000ddc
  2036e8:	20000dec 	.word	0x20000dec
  2036ec:	20000dfc 	.word	0x20000dfc
  2036f0:	20000e0c 	.word	0x20000e0c
  2036f4:	20000e1c 	.word	0x20000e1c
	...

00203700 <Vector68>:
  pr = EXTI->PR;
  203700:	4a0d      	ldr	r2, [pc, #52]	; (203738 <Vector68+0x38>)
OSAL_IRQ_HANDLER(Vector68) {
  203702:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  203704:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
  203706:	6811      	ldr	r1, [r2, #0]
  203708:	400b      	ands	r3, r1
  20370a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
  20370e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 4);
  203710:	b173      	cbz	r3, 203730 <Vector68+0x30>
  203712:	4a0a      	ldr	r2, [pc, #40]	; (20373c <Vector68+0x3c>)
  203714:	6c93      	ldr	r3, [r2, #72]	; 0x48
  203716:	b10b      	cbz	r3, 20371c <Vector68+0x1c>
  203718:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  20371a:	4798      	blx	r3
  20371c:	2320      	movs	r3, #32
  20371e:	f383 8811 	msr	BASEPRI, r3
  203722:	2100      	movs	r1, #0
  203724:	4806      	ldr	r0, [pc, #24]	; (203740 <Vector68+0x40>)
  203726:	f7fd fd73 	bl	201210 <chThdDequeueAllI>
  20372a:	2300      	movs	r3, #0
  20372c:	f383 8811 	msr	BASEPRI, r3
}
  203730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  203734:	f7fd bbf4 	b.w	200f20 <_port_irq_epilogue>
  203738:	40013c00 	.word	0x40013c00
  20373c:	20000d8c 	.word	0x20000d8c
  203740:	20000dcc 	.word	0x20000dcc
	...

00203750 <Vector64>:
  pr = EXTI->PR;
  203750:	4a0d      	ldr	r2, [pc, #52]	; (203788 <Vector64+0x38>)
OSAL_IRQ_HANDLER(Vector64) {
  203752:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  203754:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
  203756:	6811      	ldr	r1, [r2, #0]
  203758:	400b      	ands	r3, r1
  20375a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
  20375e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 3);
  203760:	b173      	cbz	r3, 203780 <Vector64+0x30>
  203762:	4a0a      	ldr	r2, [pc, #40]	; (20378c <Vector64+0x3c>)
  203764:	6b93      	ldr	r3, [r2, #56]	; 0x38
  203766:	b10b      	cbz	r3, 20376c <Vector64+0x1c>
  203768:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
  20376a:	4798      	blx	r3
  20376c:	2320      	movs	r3, #32
  20376e:	f383 8811 	msr	BASEPRI, r3
  203772:	2100      	movs	r1, #0
  203774:	4806      	ldr	r0, [pc, #24]	; (203790 <Vector64+0x40>)
  203776:	f7fd fd4b 	bl	201210 <chThdDequeueAllI>
  20377a:	2300      	movs	r3, #0
  20377c:	f383 8811 	msr	BASEPRI, r3
}
  203780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  203784:	f7fd bbcc 	b.w	200f20 <_port_irq_epilogue>
  203788:	40013c00 	.word	0x40013c00
  20378c:	20000d8c 	.word	0x20000d8c
  203790:	20000dbc 	.word	0x20000dbc
	...

002037a0 <Vector60>:
  pr = EXTI->PR;
  2037a0:	4a0d      	ldr	r2, [pc, #52]	; (2037d8 <Vector60+0x38>)
OSAL_IRQ_HANDLER(Vector60) {
  2037a2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2037a4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
  2037a6:	6811      	ldr	r1, [r2, #0]
  2037a8:	400b      	ands	r3, r1
  2037aa:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
  2037ae:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 2);
  2037b0:	b173      	cbz	r3, 2037d0 <Vector60+0x30>
  2037b2:	4a0a      	ldr	r2, [pc, #40]	; (2037dc <Vector60+0x3c>)
  2037b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
  2037b6:	b10b      	cbz	r3, 2037bc <Vector60+0x1c>
  2037b8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  2037ba:	4798      	blx	r3
  2037bc:	2320      	movs	r3, #32
  2037be:	f383 8811 	msr	BASEPRI, r3
  2037c2:	2100      	movs	r1, #0
  2037c4:	4806      	ldr	r0, [pc, #24]	; (2037e0 <Vector60+0x40>)
  2037c6:	f7fd fd23 	bl	201210 <chThdDequeueAllI>
  2037ca:	2300      	movs	r3, #0
  2037cc:	f383 8811 	msr	BASEPRI, r3
}
  2037d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  2037d4:	f7fd bba4 	b.w	200f20 <_port_irq_epilogue>
  2037d8:	40013c00 	.word	0x40013c00
  2037dc:	20000d8c 	.word	0x20000d8c
  2037e0:	20000dac 	.word	0x20000dac
	...

002037f0 <Vector5C>:
  pr = EXTI->PR;
  2037f0:	4a0d      	ldr	r2, [pc, #52]	; (203828 <Vector5C+0x38>)
OSAL_IRQ_HANDLER(Vector5C) {
  2037f2:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  2037f4:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
  2037f6:	6811      	ldr	r1, [r2, #0]
  2037f8:	400b      	ands	r3, r1
  2037fa:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
  2037fe:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 1);
  203800:	b173      	cbz	r3, 203820 <Vector5C+0x30>
  203802:	4a0a      	ldr	r2, [pc, #40]	; (20382c <Vector5C+0x3c>)
  203804:	6993      	ldr	r3, [r2, #24]
  203806:	b10b      	cbz	r3, 20380c <Vector5C+0x1c>
  203808:	69d0      	ldr	r0, [r2, #28]
  20380a:	4798      	blx	r3
  20380c:	2320      	movs	r3, #32
  20380e:	f383 8811 	msr	BASEPRI, r3
  203812:	2100      	movs	r1, #0
  203814:	4806      	ldr	r0, [pc, #24]	; (203830 <Vector5C+0x40>)
  203816:	f7fd fcfb 	bl	201210 <chThdDequeueAllI>
  20381a:	2300      	movs	r3, #0
  20381c:	f383 8811 	msr	BASEPRI, r3
}
  203820:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  203824:	f7fd bb7c 	b.w	200f20 <_port_irq_epilogue>
  203828:	40013c00 	.word	0x40013c00
  20382c:	20000d8c 	.word	0x20000d8c
  203830:	20000d9c 	.word	0x20000d9c
	...

00203840 <Vector58>:
  pr = EXTI->PR;
  203840:	4a0d      	ldr	r2, [pc, #52]	; (203878 <Vector58+0x38>)
OSAL_IRQ_HANDLER(Vector58) {
  203842:	b508      	push	{r3, lr}
  pr = EXTI->PR;
  203844:	6953      	ldr	r3, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
  203846:	6811      	ldr	r1, [r2, #0]
  203848:	400b      	ands	r3, r1
  20384a:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
  20384e:	6153      	str	r3, [r2, #20]
  exti_serve_irq(pr, 0);
  203850:	b173      	cbz	r3, 203870 <Vector58+0x30>
  203852:	4a0a      	ldr	r2, [pc, #40]	; (20387c <Vector58+0x3c>)
  203854:	6893      	ldr	r3, [r2, #8]
  203856:	b10b      	cbz	r3, 20385c <Vector58+0x1c>
  203858:	68d0      	ldr	r0, [r2, #12]
  20385a:	4798      	blx	r3
  20385c:	2320      	movs	r3, #32
  20385e:	f383 8811 	msr	BASEPRI, r3
  203862:	2100      	movs	r1, #0
  203864:	4805      	ldr	r0, [pc, #20]	; (20387c <Vector58+0x3c>)
  203866:	f7fd fcd3 	bl	201210 <chThdDequeueAllI>
  20386a:	2300      	movs	r3, #0
  20386c:	f383 8811 	msr	BASEPRI, r3
}
  203870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
  203874:	f7fd bb54 	b.w	200f20 <_port_irq_epilogue>
  203878:	40013c00 	.word	0x40013c00
  20387c:	20000d8c 	.word	0x20000d8c

00203880 <chSchWakeupS.constprop.48>:
  thread_t *otp = currp;
  203880:	4b15      	ldr	r3, [pc, #84]	; (2038d8 <chSchWakeupS.constprop.48+0x58>)
  if (ntp->prio <= otp->prio) {
  203882:	6881      	ldr	r1, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  203884:	b4f0      	push	{r4, r5, r6, r7}
  ntp->u.rdymsg = msg;
  203886:	2600      	movs	r6, #0
  thread_t *otp = currp;
  203888:	699d      	ldr	r5, [r3, #24]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  20388a:	4604      	mov	r4, r0
  ntp->u.rdymsg = msg;
  20388c:	6246      	str	r6, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
  20388e:	68a8      	ldr	r0, [r5, #8]
  203890:	4281      	cmp	r1, r0
  203892:	d80c      	bhi.n	2038ae <chSchWakeupS.constprop.48+0x2e>
  tp->state = CH_STATE_READY;
  203894:	f884 6020 	strb.w	r6, [r4, #32]
    cp = cp->queue.next;
  203898:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
  20389a:	689a      	ldr	r2, [r3, #8]
  20389c:	4291      	cmp	r1, r2
  20389e:	d9fb      	bls.n	203898 <chSchWakeupS.constprop.48+0x18>
  tp->queue.prev             = cp->queue.prev;
  2038a0:	685a      	ldr	r2, [r3, #4]
  tp->queue.next             = cp;
  2038a2:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  2038a4:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
  2038a6:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
  2038a8:	605c      	str	r4, [r3, #4]
}
  2038aa:	bcf0      	pop	{r4, r5, r6, r7}
  2038ac:	4770      	bx	lr
  cp = (thread_t *)&ch.rlist.queue;
  2038ae:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
  2038b0:	f885 6020 	strb.w	r6, [r5, #32]
    cp = cp->queue.next;
  2038b4:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
  2038b6:	6891      	ldr	r1, [r2, #8]
  2038b8:	4288      	cmp	r0, r1
  2038ba:	d9fb      	bls.n	2038b4 <chSchWakeupS.constprop.48+0x34>
  tp->queue.prev             = cp->queue.prev;
  2038bc:	6856      	ldr	r6, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
  2038be:	2701      	movs	r7, #1
  tp->queue.next             = cp;
  2038c0:	602a      	str	r2, [r5, #0]
    chSysSwitch(ntp, otp);
  2038c2:	4629      	mov	r1, r5
  tp->queue.prev             = cp->queue.prev;
  2038c4:	606e      	str	r6, [r5, #4]
    chSysSwitch(ntp, otp);
  2038c6:	4620      	mov	r0, r4
  tp->queue.prev->queue.next = tp;
  2038c8:	6035      	str	r5, [r6, #0]
  cp->queue.prev             = tp;
  2038ca:	6055      	str	r5, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
  2038cc:	f884 7020 	strb.w	r7, [r4, #32]
    currp = ntp;
  2038d0:	619c      	str	r4, [r3, #24]
}
  2038d2:	bcf0      	pop	{r4, r5, r6, r7}
    chSysSwitch(ntp, otp);
  2038d4:	f7fc bd04 	b.w	2002e0 <_port_switch>
  2038d8:	20001248 	.word	0x20001248
  2038dc:	00000000 	.word	0x00000000

002038e0 <chTMStartMeasurementX.constprop.43>:
  return DWT->CYCCNT;
  2038e0:	4b01      	ldr	r3, [pc, #4]	; (2038e8 <chTMStartMeasurementX.constprop.43+0x8>)
  2038e2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
  2038e4:	6083      	str	r3, [r0, #8]
  2038e6:	4770      	bx	lr
  2038e8:	e0001000 	.word	0xe0001000
  2038ec:	00000000 	.word	0x00000000

002038f0 <otg_txfifo_handler.constprop.6>:
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
  2038f0:	4a27      	ldr	r2, [pc, #156]	; (203990 <otg_txfifo_handler.constprop.6+0xa0>)
  2038f2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
  2038f6:	68d9      	ldr	r1, [r3, #12]
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
  2038f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
  2038fc:	f8d1 e014 	ldr.w	lr, [r1, #20]
  203900:	f8d2 906c 	ldr.w	r9, [r2, #108]	; 0x6c
  203904:	e89e 0060 	ldmia.w	lr, {r5, r6}
  203908:	42b5      	cmp	r5, r6
  20390a:	d935      	bls.n	203978 <otg_txfifo_handler.constprop.6+0x88>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
  20390c:	1bad      	subs	r5, r5, r6
    if (n > usbp->epc[ep]->in_maxsize)
  20390e:	f8b1 8010 	ldrh.w	r8, [r1, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
  203912:	eb09 1c40 	add.w	ip, r9, r0, lsl #5
  203916:	4545      	cmp	r5, r8
  203918:	f8dc 3918 	ldr.w	r3, [ip, #2328]	; 0x918
  20391c:	bf28      	it	cs
  20391e:	4645      	movcs	r5, r8
  203920:	b29b      	uxth	r3, r3
  203922:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
  203926:	d824      	bhi.n	203972 <otg_txfifo_handler.constprop.6+0x82>
  203928:	1c44      	adds	r4, r0, #1
  20392a:	f8de 7008 	ldr.w	r7, [lr, #8]
  20392e:	eb09 3404 	add.w	r4, r9, r4, lsl #12
    *fifop = *((uint32_t *)buf);
  203932:	683b      	ldr	r3, [r7, #0]
    if (n <= 4) {
  203934:	2d04      	cmp	r5, #4
    *fifop = *((uint32_t *)buf);
  203936:	6023      	str	r3, [r4, #0]
    if (n <= 4) {
  203938:	d907      	bls.n	20394a <otg_txfifo_handler.constprop.6+0x5a>
  20393a:	462b      	mov	r3, r5
  20393c:	463a      	mov	r2, r7
    n -= 4;
  20393e:	3b04      	subs	r3, #4
    *fifop = *((uint32_t *)buf);
  203940:	f852 1f04 	ldr.w	r1, [r2, #4]!
    if (n <= 4) {
  203944:	2b04      	cmp	r3, #4
    *fifop = *((uint32_t *)buf);
  203946:	6021      	str	r1, [r4, #0]
    if (n <= 4) {
  203948:	d8f9      	bhi.n	20393e <otg_txfifo_handler.constprop.6+0x4e>
    usbp->epc[ep]->in_state->txcnt += n;
  20394a:	442e      	add	r6, r5
    usbp->epc[ep]->in_state->txbuf += n;
  20394c:	442f      	add	r7, r5
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
  20394e:	f8de 5000 	ldr.w	r5, [lr]
    usbp->epc[ep]->in_state->txbuf += n;
  203952:	f8ce 7008 	str.w	r7, [lr, #8]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
  203956:	42b5      	cmp	r5, r6
    usbp->epc[ep]->in_state->txcnt += n;
  203958:	f8ce 6004 	str.w	r6, [lr, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
  20395c:	d90c      	bls.n	203978 <otg_txfifo_handler.constprop.6+0x88>
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
  20395e:	1bad      	subs	r5, r5, r6
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
  203960:	f8dc 3918 	ldr.w	r3, [ip, #2328]	; 0x918
  203964:	4545      	cmp	r5, r8
  203966:	b29b      	uxth	r3, r3
  203968:	bf28      	it	cs
  20396a:	4645      	movcs	r5, r8
  20396c:	ebb5 0f83 	cmp.w	r5, r3, lsl #2
  203970:	d9df      	bls.n	203932 <otg_txfifo_handler.constprop.6+0x42>
      return false;
  203972:	2000      	movs	r0, #0
}
  203974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
  203978:	2301      	movs	r3, #1
  20397a:	f8d9 2834 	ldr.w	r2, [r9, #2100]	; 0x834
  20397e:	fa03 f100 	lsl.w	r1, r3, r0
      return true;
  203982:	4618      	mov	r0, r3
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
  203984:	ea22 0201 	bic.w	r2, r2, r1
  203988:	f8c9 2834 	str.w	r2, [r9, #2100]	; 0x834
  20398c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  203990:	200011d0 	.word	0x200011d0
	...

002039a0 <otg_epout_handler.constprop.3>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
  2039a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
  2039a4:	4e25      	ldr	r6, [pc, #148]	; (203a3c <otg_epout_handler.constprop.3+0x9c>)
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
  2039a6:	4605      	mov	r5, r0
  stm32_otg_t *otgp = usbp->otg;
  2039a8:	6ef7      	ldr	r7, [r6, #108]	; 0x6c
  uint32_t epint = otgp->oe[ep].DOEPINT;
  2039aa:	eb07 1340 	add.w	r3, r7, r0, lsl #5
  2039ae:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
  2039b2:	0720      	lsls	r0, r4, #28
  otgp->oe[ep].DOEPINT = epint;
  2039b4:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
  2039b8:	d503      	bpl.n	2039c2 <otg_epout_handler.constprop.3+0x22>
  2039ba:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
  2039be:	0719      	lsls	r1, r3, #28
  2039c0:	d425      	bmi.n	203a0e <otg_epout_handler.constprop.3+0x6e>
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
  2039c2:	07e2      	lsls	r2, r4, #31
  2039c4:	d521      	bpl.n	203a0a <otg_epout_handler.constprop.3+0x6a>
  2039c6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
  2039ca:	07db      	lsls	r3, r3, #31
  2039cc:	d51d      	bpl.n	203a0a <otg_epout_handler.constprop.3+0x6a>
    osp = usbp->epc[ep]->out_state;
  2039ce:	eb06 0385 	add.w	r3, r6, r5, lsl #2
  2039d2:	68d9      	ldr	r1, [r3, #12]
    if (ep == 0) {
  2039d4:	b95d      	cbnz	r5, 2039ee <otg_epout_handler.constprop.3+0x4e>
    osp = usbp->epc[ep]->out_state;
  2039d6:	698a      	ldr	r2, [r1, #24]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
  2039d8:	8a48      	ldrh	r0, [r1, #18]
  2039da:	6854      	ldr	r4, [r2, #4]
  2039dc:	fbb4 f3f0 	udiv	r3, r4, r0
  2039e0:	fb00 4313 	mls	r3, r0, r3, r4
  2039e4:	b91b      	cbnz	r3, 2039ee <otg_epout_handler.constprop.3+0x4e>
          (osp->rxsize < osp->totsize)) {
  2039e6:	6810      	ldr	r0, [r2, #0]
  2039e8:	68d3      	ldr	r3, [r2, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
  2039ea:	4298      	cmp	r0, r3
  2039ec:	d317      	bcc.n	203a1e <otg_epout_handler.constprop.3+0x7e>
    _usb_isr_invoke_out_cb(usbp, ep);
  2039ee:	2201      	movs	r2, #1
  2039f0:	8973      	ldrh	r3, [r6, #10]
  2039f2:	68cc      	ldr	r4, [r1, #12]
  2039f4:	40aa      	lsls	r2, r5
  2039f6:	ea23 0302 	bic.w	r3, r3, r2
  2039fa:	8173      	strh	r3, [r6, #10]
  2039fc:	b12c      	cbz	r4, 203a0a <otg_epout_handler.constprop.3+0x6a>
  2039fe:	4629      	mov	r1, r5
  203a00:	4623      	mov	r3, r4
  203a02:	480e      	ldr	r0, [pc, #56]	; (203a3c <otg_epout_handler.constprop.3+0x9c>)
}
  203a04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _usb_isr_invoke_out_cb(usbp, ep);
  203a08:	4718      	bx	r3
  203a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _usb_isr_invoke_setup_cb(usbp, ep);
  203a0e:	eb06 0385 	add.w	r3, r6, r5, lsl #2
  203a12:	4629      	mov	r1, r5
  203a14:	4630      	mov	r0, r6
  203a16:	68db      	ldr	r3, [r3, #12]
  203a18:	685b      	ldr	r3, [r3, #4]
  203a1a:	4798      	blx	r3
  203a1c:	e7d1      	b.n	2039c2 <otg_epout_handler.constprop.3+0x22>
        osp->rxsize = osp->totsize - osp->rxsize;
  203a1e:	1a1b      	subs	r3, r3, r0
        osp->rxcnt  = 0;
  203a20:	6055      	str	r5, [r2, #4]
  203a22:	2120      	movs	r1, #32
        osp->rxsize = osp->totsize - osp->rxsize;
  203a24:	6013      	str	r3, [r2, #0]
  203a26:	f381 8811 	msr	BASEPRI, r1
        usb_lld_start_out(usbp, ep);
  203a2a:	4804      	ldr	r0, [pc, #16]	; (203a3c <otg_epout_handler.constprop.3+0x9c>)
  203a2c:	4629      	mov	r1, r5
  203a2e:	f7fe fab7 	bl	201fa0 <usb_lld_start_out>
  203a32:	f385 8811 	msr	BASEPRI, r5
  203a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  203a3a:	bf00      	nop
  203a3c:	200011d0 	.word	0x200011d0

00203a40 <otg_epin_handler.constprop.2>:
  stm32_otg_t *otgp = usbp->otg;
  203a40:	4a20      	ldr	r2, [pc, #128]	; (203ac4 <otg_epin_handler.constprop.2+0x84>)
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
  203a42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
  203a44:	6ed6      	ldr	r6, [r2, #108]	; 0x6c
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
  203a46:	4605      	mov	r5, r0
  uint32_t epint = otgp->ie[ep].DIEPINT;
  203a48:	eb06 1340 	add.w	r3, r6, r0, lsl #5
  203a4c:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
  203a50:	07e0      	lsls	r0, r4, #31
  otgp->ie[ep].DIEPINT = epint;
  203a52:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
  203a56:	d503      	bpl.n	203a60 <otg_epin_handler.constprop.2+0x20>
  203a58:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
  203a5c:	07d9      	lsls	r1, r3, #31
  203a5e:	d408      	bmi.n	203a72 <otg_epin_handler.constprop.2+0x32>
  if ((epint & DIEPINT_TXFE) &&
  203a60:	0623      	lsls	r3, r4, #24
  203a62:	d505      	bpl.n	203a70 <otg_epin_handler.constprop.2+0x30>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
  203a64:	2301      	movs	r3, #1
  203a66:	f8d6 2834 	ldr.w	r2, [r6, #2100]	; 0x834
  203a6a:	40ab      	lsls	r3, r5
  if ((epint & DIEPINT_TXFE) &&
  203a6c:	4213      	tst	r3, r2
  203a6e:	d115      	bne.n	203a9c <otg_epin_handler.constprop.2+0x5c>
  203a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
  203a72:	eb02 0385 	add.w	r3, r2, r5, lsl #2
  203a76:	68d8      	ldr	r0, [r3, #12]
  203a78:	6943      	ldr	r3, [r0, #20]
    if (isp->txsize < isp->totsize) {
  203a7a:	681f      	ldr	r7, [r3, #0]
  203a7c:	68d9      	ldr	r1, [r3, #12]
  203a7e:	428f      	cmp	r7, r1
  203a80:	d311      	bcc.n	203aa6 <otg_epin_handler.constprop.2+0x66>
      _usb_isr_invoke_in_cb(usbp, ep);
  203a82:	2101      	movs	r1, #1
  203a84:	8913      	ldrh	r3, [r2, #8]
  203a86:	6887      	ldr	r7, [r0, #8]
  203a88:	40a9      	lsls	r1, r5
  203a8a:	ea23 0301 	bic.w	r3, r3, r1
  203a8e:	8113      	strh	r3, [r2, #8]
  203a90:	2f00      	cmp	r7, #0
  203a92:	d0e5      	beq.n	203a60 <otg_epin_handler.constprop.2+0x20>
  203a94:	4610      	mov	r0, r2
  203a96:	4629      	mov	r1, r5
  203a98:	47b8      	blx	r7
  203a9a:	e7e1      	b.n	203a60 <otg_epin_handler.constprop.2+0x20>
    otg_txfifo_handler(usbp, ep);
  203a9c:	4628      	mov	r0, r5
}
  203a9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    otg_txfifo_handler(usbp, ep);
  203aa2:	f7ff bf25 	b.w	2038f0 <otg_txfifo_handler.constprop.6>
      isp->txsize = isp->totsize - isp->txsize;
  203aa6:	1bc9      	subs	r1, r1, r7
      isp->txcnt  = 0;
  203aa8:	2700      	movs	r7, #0
  203aaa:	2020      	movs	r0, #32
  203aac:	e883 0082 	stmia.w	r3, {r1, r7}
  203ab0:	f380 8811 	msr	BASEPRI, r0
      usb_lld_start_in(usbp, ep);
  203ab4:	4610      	mov	r0, r2
  203ab6:	4629      	mov	r1, r5
  203ab8:	f7fe fa1a 	bl	201ef0 <usb_lld_start_in>
  203abc:	f387 8811 	msr	BASEPRI, r7
  203ac0:	e7ce      	b.n	203a60 <otg_epin_handler.constprop.2+0x20>
  203ac2:	bf00      	nop
  203ac4:	200011d0 	.word	0x200011d0

00203ac8 <memcpy>:
  203ac8:	b510      	push	{r4, lr}
  203aca:	1e43      	subs	r3, r0, #1
  203acc:	440a      	add	r2, r1
  203ace:	4291      	cmp	r1, r2
  203ad0:	d100      	bne.n	203ad4 <memcpy+0xc>
  203ad2:	bd10      	pop	{r4, pc}
  203ad4:	f811 4b01 	ldrb.w	r4, [r1], #1
  203ad8:	f803 4f01 	strb.w	r4, [r3, #1]!
  203adc:	e7f7      	b.n	203ace <memcpy+0x6>
